
TDPS_ALL_PINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110e4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  080112d8  080112d8  000212d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ca0  08011ca0  00030208  2**0
                  CONTENTS
  4 .ARM          00000000  08011ca0  08011ca0  00030208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011ca0  08011ca0  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ca0  08011ca0  00021ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ca4  08011ca4  00021ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011ca8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007738  20000208  08011eb0  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007940  08011eb0  00037940  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1b9  00000000  00000000  00030231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000422f  00000000  00000000  0004e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00052620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  000540a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e80e  00000000  00000000  00055990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e653  00000000  00000000  0007419e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae096  00000000  00000000  000927f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000856c  00000000  00000000  001408d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000208 	.word	0x20000208
 800020c:	00000000 	.word	0x00000000
 8000210:	080112bc 	.word	0x080112bc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000020c 	.word	0x2000020c
 800022c:	080112bc 	.word	0x080112bc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_frsub>:
 8000c08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	e002      	b.n	8000c14 <__addsf3>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fsub>:
 8000c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c14 <__addsf3>:
 8000c14:	0042      	lsls	r2, r0, #1
 8000c16:	bf1f      	itttt	ne
 8000c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c1c:	ea92 0f03 	teqne	r2, r3
 8000c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c28:	d06a      	beq.n	8000d00 <__addsf3+0xec>
 8000c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c32:	bfc1      	itttt	gt
 8000c34:	18d2      	addgt	r2, r2, r3
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	4048      	eorgt	r0, r1
 8000c3a:	4041      	eorgt	r1, r0
 8000c3c:	bfb8      	it	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	2b19      	cmp	r3, #25
 8000c42:	bf88      	it	hi
 8000c44:	4770      	bxhi	lr
 8000c46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4249      	negne	r1, r1
 8000c66:	ea92 0f03 	teq	r2, r3
 8000c6a:	d03f      	beq.n	8000cec <__addsf3+0xd8>
 8000c6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c70:	fa41 fc03 	asr.w	ip, r1, r3
 8000c74:	eb10 000c 	adds.w	r0, r0, ip
 8000c78:	f1c3 0320 	rsb	r3, r3, #32
 8000c7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__addsf3+0x78>
 8000c86:	4249      	negs	r1, r1
 8000c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c90:	d313      	bcc.n	8000cba <__addsf3+0xa6>
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c96:	d306      	bcc.n	8000ca6 <__addsf3+0x92>
 8000c98:	0840      	lsrs	r0, r0, #1
 8000c9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9e:	f102 0201 	add.w	r2, r2, #1
 8000ca2:	2afe      	cmp	r2, #254	; 0xfe
 8000ca4:	d251      	bcs.n	8000d4a <__addsf3+0x136>
 8000ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	ea40 0003 	orr.w	r0, r0, r3
 8000cb8:	4770      	bx	lr
 8000cba:	0049      	lsls	r1, r1, #1
 8000cbc:	eb40 0000 	adc.w	r0, r0, r0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc8:	d2ed      	bcs.n	8000ca6 <__addsf3+0x92>
 8000cca:	fab0 fc80 	clz	ip, r0
 8000cce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cda:	bfaa      	itet	ge
 8000cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce0:	4252      	neglt	r2, r2
 8000ce2:	4318      	orrge	r0, r3
 8000ce4:	bfbc      	itt	lt
 8000ce6:	40d0      	lsrlt	r0, r2
 8000ce8:	4318      	orrlt	r0, r3
 8000cea:	4770      	bx	lr
 8000cec:	f092 0f00 	teq	r2, #0
 8000cf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf4:	bf06      	itte	eq
 8000cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cfa:	3201      	addeq	r2, #1
 8000cfc:	3b01      	subne	r3, #1
 8000cfe:	e7b5      	b.n	8000c6c <__addsf3+0x58>
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d021      	beq.n	8000d54 <__addsf3+0x140>
 8000d10:	ea92 0f03 	teq	r2, r3
 8000d14:	d004      	beq.n	8000d20 <__addsf3+0x10c>
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	bf08      	it	eq
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	4770      	bx	lr
 8000d20:	ea90 0f01 	teq	r0, r1
 8000d24:	bf1c      	itt	ne
 8000d26:	2000      	movne	r0, #0
 8000d28:	4770      	bxne	lr
 8000d2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2e:	d104      	bne.n	8000d3a <__addsf3+0x126>
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	bf28      	it	cs
 8000d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d38:	4770      	bx	lr
 8000d3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3e:	bf3c      	itt	cc
 8000d40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bxcc	lr
 8000d46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d52:	4770      	bx	lr
 8000d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d58:	bf16      	itet	ne
 8000d5a:	4608      	movne	r0, r1
 8000d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d60:	4601      	movne	r1, r0
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	bf06      	itte	eq
 8000d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d6a:	ea90 0f01 	teqeq	r0, r1
 8000d6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_ui2f>:
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e004      	b.n	8000d84 <__aeabi_i2f+0x8>
 8000d7a:	bf00      	nop

08000d7c <__aeabi_i2f>:
 8000d7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d80:	bf48      	it	mi
 8000d82:	4240      	negmi	r0, r0
 8000d84:	ea5f 0c00 	movs.w	ip, r0
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d90:	4601      	mov	r1, r0
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	e01c      	b.n	8000dd2 <__aeabi_l2f+0x2a>

08000d98 <__aeabi_ul2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e00a      	b.n	8000dbc <__aeabi_l2f+0x14>
 8000da6:	bf00      	nop

08000da8 <__aeabi_l2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db4:	d502      	bpl.n	8000dbc <__aeabi_l2f+0x14>
 8000db6:	4240      	negs	r0, r0
 8000db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbc:	ea5f 0c01 	movs.w	ip, r1
 8000dc0:	bf02      	ittt	eq
 8000dc2:	4684      	moveq	ip, r0
 8000dc4:	4601      	moveq	r1, r0
 8000dc6:	2000      	moveq	r0, #0
 8000dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dcc:	bf08      	it	eq
 8000dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd6:	fabc f28c 	clz	r2, ip
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de0:	db10      	blt.n	8000e04 <__aeabi_l2f+0x5c>
 8000de2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de6:	4463      	add	r3, ip
 8000de8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df4:	fa20 f202 	lsr.w	r2, r0, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	f020 0001 	biceq.w	r0, r0, #1
 8000e02:	4770      	bx	lr
 8000e04:	f102 0220 	add.w	r2, r2, #32
 8000e08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e14:	fa21 f202 	lsr.w	r2, r1, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_fmul>:
 8000e24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e2c:	bf1e      	ittt	ne
 8000e2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e32:	ea92 0f0c 	teqne	r2, ip
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d06f      	beq.n	8000f1c <__aeabi_fmul+0xf8>
 8000e3c:	441a      	add	r2, r3
 8000e3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e42:	0240      	lsls	r0, r0, #9
 8000e44:	bf18      	it	ne
 8000e46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e4a:	d01e      	beq.n	8000e8a <__aeabi_fmul+0x66>
 8000e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e58:	fba0 3101 	umull	r3, r1, r0, r1
 8000e5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e64:	bf3e      	ittt	cc
 8000e66:	0049      	lslcc	r1, r1, #1
 8000e68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	ea40 0001 	orr.w	r0, r0, r1
 8000e72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e76:	2afd      	cmp	r2, #253	; 0xfd
 8000e78:	d81d      	bhi.n	8000eb6 <__aeabi_fmul+0x92>
 8000e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e82:	bf08      	it	eq
 8000e84:	f020 0001 	biceq.w	r0, r0, #1
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e92:	bf08      	it	eq
 8000e94:	0249      	lsleq	r1, r1, #9
 8000e96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e9e:	3a7f      	subs	r2, #127	; 0x7f
 8000ea0:	bfc2      	ittt	gt
 8000ea2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eaa:	4770      	bxgt	lr
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	dc5d      	bgt.n	8000f74 <__aeabi_fmul+0x150>
 8000eb8:	f112 0f19 	cmn.w	r2, #25
 8000ebc:	bfdc      	itt	le
 8000ebe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ec2:	4770      	bxle	lr
 8000ec4:	f1c2 0200 	rsb	r2, r2, #0
 8000ec8:	0041      	lsls	r1, r0, #1
 8000eca:	fa21 f102 	lsr.w	r1, r1, r2
 8000ece:	f1c2 0220 	rsb	r2, r2, #32
 8000ed2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ed6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eda:	f140 0000 	adc.w	r0, r0, #0
 8000ede:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ee2:	bf08      	it	eq
 8000ee4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee8:	4770      	bx	lr
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fmul+0xce>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fmul+0xe6>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e78f      	b.n	8000e3c <__aeabi_fmul+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	bf18      	it	ne
 8000f26:	ea93 0f0c 	teqne	r3, ip
 8000f2a:	d00a      	beq.n	8000f42 <__aeabi_fmul+0x11e>
 8000f2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f30:	bf18      	it	ne
 8000f32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	d1d8      	bne.n	8000eea <__aeabi_fmul+0xc6>
 8000f38:	ea80 0001 	eor.w	r0, r0, r1
 8000f3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f40:	4770      	bx	lr
 8000f42:	f090 0f00 	teq	r0, #0
 8000f46:	bf17      	itett	ne
 8000f48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f4c:	4608      	moveq	r0, r1
 8000f4e:	f091 0f00 	teqne	r1, #0
 8000f52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f56:	d014      	beq.n	8000f82 <__aeabi_fmul+0x15e>
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_fmul+0x13e>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d10f      	bne.n	8000f82 <__aeabi_fmul+0x15e>
 8000f62:	ea93 0f0c 	teq	r3, ip
 8000f66:	d103      	bne.n	8000f70 <__aeabi_fmul+0x14c>
 8000f68:	024b      	lsls	r3, r1, #9
 8000f6a:	bf18      	it	ne
 8000f6c:	4608      	movne	r0, r1
 8000f6e:	d108      	bne.n	8000f82 <__aeabi_fmul+0x15e>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f80:	4770      	bx	lr
 8000f82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_fdiv>:
 8000f8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f94:	bf1e      	ittt	ne
 8000f96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f9a:	ea92 0f0c 	teqne	r2, ip
 8000f9e:	ea93 0f0c 	teqne	r3, ip
 8000fa2:	d069      	beq.n	8001078 <__aeabi_fdiv+0xec>
 8000fa4:	eba2 0203 	sub.w	r2, r2, r3
 8000fa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fac:	0249      	lsls	r1, r1, #9
 8000fae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fb2:	d037      	beq.n	8001024 <__aeabi_fdiv+0x98>
 8000fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fc4:	428b      	cmp	r3, r1
 8000fc6:	bf38      	it	cc
 8000fc8:	005b      	lslcc	r3, r3, #1
 8000fca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	bf24      	itt	cs
 8000fd6:	1a5b      	subcs	r3, r3, r1
 8000fd8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fe0:	bf24      	itt	cs
 8000fe2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fe6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fee:	bf24      	itt	cs
 8000ff0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ffc:	bf24      	itt	cs
 8000ffe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001002:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	bf18      	it	ne
 800100a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800100e:	d1e0      	bne.n	8000fd2 <__aeabi_fdiv+0x46>
 8001010:	2afd      	cmp	r2, #253	; 0xfd
 8001012:	f63f af50 	bhi.w	8000eb6 <__aeabi_fmul+0x92>
 8001016:	428b      	cmp	r3, r1
 8001018:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800101c:	bf08      	it	eq
 800101e:	f020 0001 	biceq.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001028:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800102c:	327f      	adds	r2, #127	; 0x7f
 800102e:	bfc2      	ittt	gt
 8001030:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001034:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001038:	4770      	bxgt	lr
 800103a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	3a01      	subs	r2, #1
 8001044:	e737      	b.n	8000eb6 <__aeabi_fmul+0x92>
 8001046:	f092 0f00 	teq	r2, #0
 800104a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800104e:	bf02      	ittt	eq
 8001050:	0040      	lsleq	r0, r0, #1
 8001052:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001056:	3a01      	subeq	r2, #1
 8001058:	d0f9      	beq.n	800104e <__aeabi_fdiv+0xc2>
 800105a:	ea40 000c 	orr.w	r0, r0, ip
 800105e:	f093 0f00 	teq	r3, #0
 8001062:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001066:	bf02      	ittt	eq
 8001068:	0049      	lsleq	r1, r1, #1
 800106a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800106e:	3b01      	subeq	r3, #1
 8001070:	d0f9      	beq.n	8001066 <__aeabi_fdiv+0xda>
 8001072:	ea41 010c 	orr.w	r1, r1, ip
 8001076:	e795      	b.n	8000fa4 <__aeabi_fdiv+0x18>
 8001078:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800107c:	ea92 0f0c 	teq	r2, ip
 8001080:	d108      	bne.n	8001094 <__aeabi_fdiv+0x108>
 8001082:	0242      	lsls	r2, r0, #9
 8001084:	f47f af7d 	bne.w	8000f82 <__aeabi_fmul+0x15e>
 8001088:	ea93 0f0c 	teq	r3, ip
 800108c:	f47f af70 	bne.w	8000f70 <__aeabi_fmul+0x14c>
 8001090:	4608      	mov	r0, r1
 8001092:	e776      	b.n	8000f82 <__aeabi_fmul+0x15e>
 8001094:	ea93 0f0c 	teq	r3, ip
 8001098:	d104      	bne.n	80010a4 <__aeabi_fdiv+0x118>
 800109a:	024b      	lsls	r3, r1, #9
 800109c:	f43f af4c 	beq.w	8000f38 <__aeabi_fmul+0x114>
 80010a0:	4608      	mov	r0, r1
 80010a2:	e76e      	b.n	8000f82 <__aeabi_fmul+0x15e>
 80010a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a8:	bf18      	it	ne
 80010aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ae:	d1ca      	bne.n	8001046 <__aeabi_fdiv+0xba>
 80010b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010b4:	f47f af5c 	bne.w	8000f70 <__aeabi_fmul+0x14c>
 80010b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010bc:	f47f af3c 	bne.w	8000f38 <__aeabi_fmul+0x114>
 80010c0:	e75f      	b.n	8000f82 <__aeabi_fmul+0x15e>
 80010c2:	bf00      	nop

080010c4 <__gesf2>:
 80010c4:	f04f 3cff 	mov.w	ip, #4294967295
 80010c8:	e006      	b.n	80010d8 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__lesf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	e002      	b.n	80010d8 <__cmpsf2+0x4>
 80010d2:	bf00      	nop

080010d4 <__cmpsf2>:
 80010d4:	f04f 0c01 	mov.w	ip, #1
 80010d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e8:	bf18      	it	ne
 80010ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ee:	d011      	beq.n	8001114 <__cmpsf2+0x40>
 80010f0:	b001      	add	sp, #4
 80010f2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010f6:	bf18      	it	ne
 80010f8:	ea90 0f01 	teqne	r0, r1
 80010fc:	bf58      	it	pl
 80010fe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001102:	bf88      	it	hi
 8001104:	17c8      	asrhi	r0, r1, #31
 8001106:	bf38      	it	cc
 8001108:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800110c:	bf18      	it	ne
 800110e:	f040 0001 	orrne.w	r0, r0, #1
 8001112:	4770      	bx	lr
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	d102      	bne.n	8001120 <__cmpsf2+0x4c>
 800111a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111e:	d105      	bne.n	800112c <__cmpsf2+0x58>
 8001120:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001124:	d1e4      	bne.n	80010f0 <__cmpsf2+0x1c>
 8001126:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112a:	d0e1      	beq.n	80010f0 <__cmpsf2+0x1c>
 800112c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <__aeabi_cfrcmple>:
 8001134:	4684      	mov	ip, r0
 8001136:	4608      	mov	r0, r1
 8001138:	4661      	mov	r1, ip
 800113a:	e7ff      	b.n	800113c <__aeabi_cfcmpeq>

0800113c <__aeabi_cfcmpeq>:
 800113c:	b50f      	push	{r0, r1, r2, r3, lr}
 800113e:	f7ff ffc9 	bl	80010d4 <__cmpsf2>
 8001142:	2800      	cmp	r0, #0
 8001144:	bf48      	it	mi
 8001146:	f110 0f00 	cmnmi.w	r0, #0
 800114a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800114c <__aeabi_fcmpeq>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff fff4 	bl	800113c <__aeabi_cfcmpeq>
 8001154:	bf0c      	ite	eq
 8001156:	2001      	moveq	r0, #1
 8001158:	2000      	movne	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmplt>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffea 	bl	800113c <__aeabi_cfcmpeq>
 8001168:	bf34      	ite	cc
 800116a:	2001      	movcc	r0, #1
 800116c:	2000      	movcs	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmple>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffe0 	bl	800113c <__aeabi_cfcmpeq>
 800117c:	bf94      	ite	ls
 800117e:	2001      	movls	r0, #1
 8001180:	2000      	movhi	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpge>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffd2 	bl	8001134 <__aeabi_cfrcmple>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpgt>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffc8 	bl	8001134 <__aeabi_cfrcmple>
 80011a4:	bf34      	ite	cc
 80011a6:	2001      	movcc	r0, #1
 80011a8:	2000      	movcs	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_f2iz>:
 80011b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b8:	d30f      	bcc.n	80011da <__aeabi_f2iz+0x2a>
 80011ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c2:	d90d      	bls.n	80011e0 <__aeabi_f2iz+0x30>
 80011c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011cc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d0:	fa23 f002 	lsr.w	r0, r3, r2
 80011d4:	bf18      	it	ne
 80011d6:	4240      	negne	r0, r0
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2iz+0x3a>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d105      	bne.n	80011f6 <__aeabi_f2iz+0x46>
 80011ea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ee:	bf08      	it	eq
 80011f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr

080011fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_ADC1_Init+0x74>)
 800120e:	4a19      	ldr	r2, [pc, #100]	; (8001274 <MX_ADC1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_ADC1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_ADC1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_ADC1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_ADC1_Init+0x74>)
 8001226:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800122a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_ADC1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC1_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_ADC1_Init+0x74>)
 800123a:	f004 fbc9 	bl	80059d0 <HAL_ADC_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001244:	f003 fbfe 	bl	8004a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001248:	230a      	movs	r3, #10
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124c:	2301      	movs	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_ADC1_Init+0x74>)
 800125a:	f004 fca3 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001264:	f003 fbee 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000224 	.word	0x20000224
 8001274:	40012400 	.word	0x40012400

08001278 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_ADC_MspInit+0x6c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d121      	bne.n	80012dc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_ADC_MspInit+0x70>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_ADC_MspInit+0x70>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_ADC_MspInit+0x70>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_ADC_MspInit+0x70>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_ADC_MspInit+0x70>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_ADC_MspInit+0x70>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_ADC_MspInit+0x74>)
 80012d8:	f004 fe7e 	bl	8005fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40012400 	.word	0x40012400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40011000 	.word	0x40011000

080012f0 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	HAL_SuspendTick(); //
 80012f8:	f003 fc50 	bl	8004b9c <HAL_SuspendTick>
/* place for user code */
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick(); //
 800130c:	f003 fc56 	bl	8004bbc <HAL_ResumeTick>
/* place for user code */
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800131c:	4a34      	ldr	r2, [pc, #208]	; (80013f0 <MX_FREERTOS_Init+0xd8>)
 800131e:	2100      	movs	r1, #0
 8001320:	4834      	ldr	r0, [pc, #208]	; (80013f4 <MX_FREERTOS_Init+0xdc>)
 8001322:	f008 fc2f 	bl	8009b84 <osThreadNew>
 8001326:	4603      	mov	r3, r0
 8001328:	4a33      	ldr	r2, [pc, #204]	; (80013f8 <MX_FREERTOS_Init+0xe0>)
 800132a:	6013      	str	r3, [r2, #0]

  /* creation of patio1ComApp */
  patio1ComAppHandle = osThreadNew(patio1ComFcn, NULL, &patio1ComApp_attributes);
 800132c:	4a33      	ldr	r2, [pc, #204]	; (80013fc <MX_FREERTOS_Init+0xe4>)
 800132e:	2100      	movs	r1, #0
 8001330:	4833      	ldr	r0, [pc, #204]	; (8001400 <MX_FREERTOS_Init+0xe8>)
 8001332:	f008 fc27 	bl	8009b84 <osThreadNew>
 8001336:	4603      	mov	r3, r0
 8001338:	4a32      	ldr	r2, [pc, #200]	; (8001404 <MX_FREERTOS_Init+0xec>)
 800133a:	6013      	str	r3, [r2, #0]

  /* creation of patio1MotorCtrl */
  patio1MotorCtrlHandle = osThreadNew(patio1MotorCtrlFcn, NULL, &patio1MotorCtrl_attributes);
 800133c:	4a32      	ldr	r2, [pc, #200]	; (8001408 <MX_FREERTOS_Init+0xf0>)
 800133e:	2100      	movs	r1, #0
 8001340:	4832      	ldr	r0, [pc, #200]	; (800140c <MX_FREERTOS_Init+0xf4>)
 8001342:	f008 fc1f 	bl	8009b84 <osThreadNew>
 8001346:	4603      	mov	r3, r0
 8001348:	4a31      	ldr	r2, [pc, #196]	; (8001410 <MX_FREERTOS_Init+0xf8>)
 800134a:	6013      	str	r3, [r2, #0]

  /* creation of patio1RangeApp */
  patio1RangeAppHandle = osThreadNew(patio1RangeFcn, NULL, &patio1RangeApp_attributes);
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <MX_FREERTOS_Init+0xfc>)
 800134e:	2100      	movs	r1, #0
 8001350:	4831      	ldr	r0, [pc, #196]	; (8001418 <MX_FREERTOS_Init+0x100>)
 8001352:	f008 fc17 	bl	8009b84 <osThreadNew>
 8001356:	4603      	mov	r3, r0
 8001358:	4a30      	ldr	r2, [pc, #192]	; (800141c <MX_FREERTOS_Init+0x104>)
 800135a:	6013      	str	r3, [r2, #0]

  /* creation of patio1Ultra1App */
  patio1Ultra1AppHandle = osThreadNew(patio1Ultra1Fcn, NULL, &patio1Ultra1App_attributes);
 800135c:	4a30      	ldr	r2, [pc, #192]	; (8001420 <MX_FREERTOS_Init+0x108>)
 800135e:	2100      	movs	r1, #0
 8001360:	4830      	ldr	r0, [pc, #192]	; (8001424 <MX_FREERTOS_Init+0x10c>)
 8001362:	f008 fc0f 	bl	8009b84 <osThreadNew>
 8001366:	4603      	mov	r3, r0
 8001368:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <MX_FREERTOS_Init+0x110>)
 800136a:	6013      	str	r3, [r2, #0]

  /* creation of patio1Ultra2App */
  patio1Ultra2AppHandle = osThreadNew(patio1Ultra2Fcn, NULL, &patio1Ultra2App_attributes);
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <MX_FREERTOS_Init+0x114>)
 800136e:	2100      	movs	r1, #0
 8001370:	482f      	ldr	r0, [pc, #188]	; (8001430 <MX_FREERTOS_Init+0x118>)
 8001372:	f008 fc07 	bl	8009b84 <osThreadNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a2e      	ldr	r2, [pc, #184]	; (8001434 <MX_FREERTOS_Init+0x11c>)
 800137a:	6013      	str	r3, [r2, #0]

  /* creation of patio2ComApp */
  patio2ComAppHandle = osThreadNew(patio2ComFcn, NULL, &patio2ComApp_attributes);
 800137c:	4a2e      	ldr	r2, [pc, #184]	; (8001438 <MX_FREERTOS_Init+0x120>)
 800137e:	2100      	movs	r1, #0
 8001380:	482e      	ldr	r0, [pc, #184]	; (800143c <MX_FREERTOS_Init+0x124>)
 8001382:	f008 fbff 	bl	8009b84 <osThreadNew>
 8001386:	4603      	mov	r3, r0
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <MX_FREERTOS_Init+0x128>)
 800138a:	6013      	str	r3, [r2, #0]

  /* creation of patio2MotorCtrl */
  patio2MotorCtrlHandle = osThreadNew(patio2MotorCtrlFcn, NULL, &patio2MotorCtrl_attributes);
 800138c:	4a2d      	ldr	r2, [pc, #180]	; (8001444 <MX_FREERTOS_Init+0x12c>)
 800138e:	2100      	movs	r1, #0
 8001390:	482d      	ldr	r0, [pc, #180]	; (8001448 <MX_FREERTOS_Init+0x130>)
 8001392:	f008 fbf7 	bl	8009b84 <osThreadNew>
 8001396:	4603      	mov	r3, r0
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <MX_FREERTOS_Init+0x134>)
 800139a:	6013      	str	r3, [r2, #0]

  /* creation of patio2RangeApp */
  patio2RangeAppHandle = osThreadNew(patio2RangeFcn, NULL, &patio2RangeApp_attributes);
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <MX_FREERTOS_Init+0x138>)
 800139e:	2100      	movs	r1, #0
 80013a0:	482c      	ldr	r0, [pc, #176]	; (8001454 <MX_FREERTOS_Init+0x13c>)
 80013a2:	f008 fbef 	bl	8009b84 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <MX_FREERTOS_Init+0x140>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* creation of patio2Ultra1App */
  patio2Ultra1AppHandle = osThreadNew(patio2Ultra1Fcn, NULL, &patio2Ultra1App_attributes);
 80013ac:	4a2b      	ldr	r2, [pc, #172]	; (800145c <MX_FREERTOS_Init+0x144>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	482b      	ldr	r0, [pc, #172]	; (8001460 <MX_FREERTOS_Init+0x148>)
 80013b2:	f008 fbe7 	bl	8009b84 <osThreadNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <MX_FREERTOS_Init+0x14c>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* creation of patio2EngineApp */
  patio2EngineAppHandle = osThreadNew(patio2EngineFcn, NULL, &patio2EngineApp_attributes);
 80013bc:	4a2a      	ldr	r2, [pc, #168]	; (8001468 <MX_FREERTOS_Init+0x150>)
 80013be:	2100      	movs	r1, #0
 80013c0:	482a      	ldr	r0, [pc, #168]	; (800146c <MX_FREERTOS_Init+0x154>)
 80013c2:	f008 fbdf 	bl	8009b84 <osThreadNew>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <MX_FREERTOS_Init+0x158>)
 80013ca:	6013      	str	r3, [r2, #0]

  /* creation of patio2TransApp */
  patio2TransAppHandle = osThreadNew(patio2TransFcn, NULL, &patio2TransApp_attributes);
 80013cc:	4a29      	ldr	r2, [pc, #164]	; (8001474 <MX_FREERTOS_Init+0x15c>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4829      	ldr	r0, [pc, #164]	; (8001478 <MX_FREERTOS_Init+0x160>)
 80013d2:	f008 fbd7 	bl	8009b84 <osThreadNew>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <MX_FREERTOS_Init+0x164>)
 80013da:	6013      	str	r3, [r2, #0]

  /* creation of patio2Ultra2App */
  patio2Ultra2AppHandle = osThreadNew(patio2Ultra2Fcn, NULL, &patio2Ultra2App_attributes);
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <MX_FREERTOS_Init+0x168>)
 80013de:	2100      	movs	r1, #0
 80013e0:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_FREERTOS_Init+0x16c>)
 80013e2:	f008 fbcf 	bl	8009b84 <osThreadNew>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <MX_FREERTOS_Init+0x170>)
 80013ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	080114cc 	.word	0x080114cc
 80013f4:	0800148d 	.word	0x0800148d
 80013f8:	2000029c 	.word	0x2000029c
 80013fc:	080114f0 	.word	0x080114f0
 8001400:	080015b1 	.word	0x080015b1
 8001404:	200002a0 	.word	0x200002a0
 8001408:	08011514 	.word	0x08011514
 800140c:	08001645 	.word	0x08001645
 8001410:	200002a4 	.word	0x200002a4
 8001414:	08011538 	.word	0x08011538
 8001418:	080018bd 	.word	0x080018bd
 800141c:	200002a8 	.word	0x200002a8
 8001420:	0801155c 	.word	0x0801155c
 8001424:	08001b39 	.word	0x08001b39
 8001428:	200002ac 	.word	0x200002ac
 800142c:	08011580 	.word	0x08011580
 8001430:	08001be9 	.word	0x08001be9
 8001434:	200002b0 	.word	0x200002b0
 8001438:	080115a4 	.word	0x080115a4
 800143c:	08001c95 	.word	0x08001c95
 8001440:	200002b4 	.word	0x200002b4
 8001444:	080115c8 	.word	0x080115c8
 8001448:	08001d49 	.word	0x08001d49
 800144c:	200002b8 	.word	0x200002b8
 8001450:	080115ec 	.word	0x080115ec
 8001454:	08001fcd 	.word	0x08001fcd
 8001458:	200002bc 	.word	0x200002bc
 800145c:	08011610 	.word	0x08011610
 8001460:	080022e9 	.word	0x080022e9
 8001464:	200002c0 	.word	0x200002c0
 8001468:	08011634 	.word	0x08011634
 800146c:	08002395 	.word	0x08002395
 8001470:	200002c4 	.word	0x200002c4
 8001474:	08011658 	.word	0x08011658
 8001478:	080023c5 	.word	0x080023c5
 800147c:	200002c8 	.word	0x200002c8
 8001480:	0801167c 	.word	0x0801167c
 8001484:	080023f9 	.word	0x080023f9
 8001488:	200002cc 	.word	0x200002cc

0800148c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	uint16_t pulse=0;
 8001494:	2300      	movs	r3, #0
 8001496:	81fb      	strh	r3, [r7, #14]

	robot_stop(); // stop the car
 8001498:	f001 fd84 	bl	8002fa4 <robot_stop>
	HAL_Delay(3000); //
 800149c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014a0:	f004 fa72 	bl	8005988 <HAL_Delay>
	HAL_TIM_Base_Start(&htim5); // engine and motor
 80014a4:	4837      	ldr	r0, [pc, #220]	; (8001584 <StartDefaultTask+0xf8>)
 80014a6:	f006 fcb3 	bl	8007e10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3); // ultrosanic
 80014aa:	4837      	ldr	r0, [pc, #220]	; (8001588 <StartDefaultTask+0xfc>)
 80014ac:	f006 fcb0 	bl	8007e10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2); // ultrosanic capture base
 80014b0:	4836      	ldr	r0, [pc, #216]	; (800158c <StartDefaultTask+0x100>)
 80014b2:	f006 fcad 	bl	8007e10 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8); // ultrosanic capture base
 80014b6:	4836      	ldr	r0, [pc, #216]	; (8001590 <StartDefaultTask+0x104>)
 80014b8:	f006 fcaa 	bl	8007e10 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // 生成控制电机的PWM信号
 80014bc:	2100      	movs	r1, #0
 80014be:	4831      	ldr	r0, [pc, #196]	; (8001584 <StartDefaultTask+0xf8>)
 80014c0:	f006 fdae 	bl	8008020 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80014c4:	2104      	movs	r1, #4
 80014c6:	482f      	ldr	r0, [pc, #188]	; (8001584 <StartDefaultTask+0xf8>)
 80014c8:	f006 fdaa 	bl	8008020 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);// ultrosanic PWM
 80014cc:	2104      	movs	r1, #4
 80014ce:	482e      	ldr	r0, [pc, #184]	; (8001588 <StartDefaultTask+0xfc>)
 80014d0:	f006 fda6 	bl	8008020 <HAL_TIM_PWM_Start>

	mpu_ini(); //
 80014d4:	f001 f80e 	bl	80024f4 <mpu_ini>
	calculate_error(); //
 80014d8:	f001 f88a 	bl	80025f0 <calculate_error>
	sprintf(buffer, "%s", "TIM8");
	start_info_debug(buffer);
#endif


	if(HAL_GPIO_ReadPin(Selection_GPIO_Port, Selection_Pin)==GPIO_PIN_SET){ // 选择pin口的电平为低，确认程序执行patio1
 80014dc:	2101      	movs	r1, #1
 80014de:	482d      	ldr	r0, [pc, #180]	; (8001594 <StartDefaultTask+0x108>)
 80014e0:	f004 ff0e 	bl	8006300 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d118      	bne.n	800151c <StartDefaultTask+0x90>
		which_patio = PATIO_1;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <StartDefaultTask+0x10c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]

		xTaskNotifyGive(patio1ComAppHandle); // start to commuicate with openMV
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <StartDefaultTask+0x110>)
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2202      	movs	r2, #2
 80014f8:	2100      	movs	r1, #0
 80014fa:	f00a f9b3 	bl	800b864 <xTaskGenericNotify>
//		xTaskNotifyGive(patio1MotorCtrlHandle);
		xTaskNotifyGive(patio1RangeAppHandle);
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <StartDefaultTask+0x114>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	2202      	movs	r2, #2
 8001506:	2100      	movs	r1, #0
 8001508:	f00a f9ac 	bl	800b864 <xTaskGenericNotify>
		xTaskNotifyGive(patio1Ultra1AppHandle);
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <StartDefaultTask+0x118>)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	2300      	movs	r3, #0
 8001512:	2202      	movs	r2, #2
 8001514:	2100      	movs	r1, #0
 8001516:	f00a f9a5 	bl	800b864 <xTaskGenericNotify>
 800151a:	e01d      	b.n	8001558 <StartDefaultTask+0xcc>

#ifdef MY_DEBUG_START
		HAL_UART_Transmit(&huart5, (uint8_t*)"Patio1 1\n", 9, 9);
#endif
	}else if(HAL_GPIO_ReadPin(Selection_GPIO_Port, Selection_Pin)==GPIO_PIN_RESET){ // patio2 执行
 800151c:	2101      	movs	r1, #1
 800151e:	481d      	ldr	r0, [pc, #116]	; (8001594 <StartDefaultTask+0x108>)
 8001520:	f004 feee 	bl	8006300 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <StartDefaultTask+0xcc>
		which_patio = PATIO_2;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <StartDefaultTask+0x10c>)
 800152c:	2202      	movs	r2, #2
 800152e:	701a      	strb	r2, [r3, #0]

		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); // 启动舵机控制PWM信号
 8001530:	2108      	movs	r1, #8
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <StartDefaultTask+0xf8>)
 8001534:	f006 fd74 	bl	8008020 <HAL_TIM_PWM_Start>
		patio2_engine_close();
 8001538:	f002 fe82 	bl	8004240 <patio2_engine_close>

#ifdef MY_DEBUG_START
		start_info_debug("Engine");
#endif
		xTaskNotifyGive(patio2RangeAppHandle);
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <StartDefaultTask+0x11c>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	2202      	movs	r2, #2
 8001544:	2100      	movs	r1, #0
 8001546:	f00a f98d 	bl	800b864 <xTaskGenericNotify>
		xTaskNotifyGive(patio2MotorCtrlHandle);
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <StartDefaultTask+0x120>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	2300      	movs	r3, #0
 8001550:	2202      	movs	r2, #2
 8001552:	2100      	movs	r1, #0
 8001554:	f00a f986 	bl	800b864 <xTaskGenericNotify>
#ifdef MY_DEBUG_START
		HAL_UART_Transmit(&huart5, (uint8_t*)"Patio 2\n", 9, 9);
#endif
	}
	pulse = (uint16_t)(INI_SPEED/MAX_SPEED_RIGHT*MOTOR_PWM_PERIOD_PULSE);
 8001558:	f241 33ce 	movw	r3, #5070	; 0x13ce
 800155c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, pulse);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <StartDefaultTask+0xf8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	89fa      	ldrh	r2, [r7, #14]
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
	pulse = (uint16_t)(INI_SPEED/MAX_SPEED_LEFT*MOTOR_PWM_PERIOD_PULSE);
 8001566:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 800156a:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pulse);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <StartDefaultTask+0xf8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	89fa      	ldrh	r2, [r7, #14]
 8001572:	639a      	str	r2, [r3, #56]	; 0x38

  for(;;)
  {
    osDelay(1000);
 8001574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001578:	f008 fbae 	bl	8009cd8 <osDelay>

    stack_debug(0);
 800157c:	2000      	movs	r0, #0
 800157e:	f002 ffb1 	bl	80044e4 <stack_debug>
    osDelay(1000);
 8001582:	e7f7      	b.n	8001574 <StartDefaultTask+0xe8>
 8001584:	200004e4 	.word	0x200004e4
 8001588:	20000454 	.word	0x20000454
 800158c:	2000040c 	.word	0x2000040c
 8001590:	2000052c 	.word	0x2000052c
 8001594:	40011c00 	.word	0x40011c00
 8001598:	20000254 	.word	0x20000254
 800159c:	200002a0 	.word	0x200002a0
 80015a0:	200002a8 	.word	0x200002a8
 80015a4:	200002ac 	.word	0x200002ac
 80015a8:	200002bc 	.word	0x200002bc
 80015ac:	200002b8 	.word	0x200002b8

080015b0 <patio1ComFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio1ComFcn */
void patio1ComFcn(void *argument)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio1ComFcn */
  /* Infinite loop */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待进程启动
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	2001      	movs	r0, #1
 80015be:	f00a f905 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
	start_info_debug("P1_Com_P");
#endif
	xTaskNotifyGive(patio1MotorCtrlHandle); // 通知电机控制进程启动
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <patio1ComFcn+0x8c>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2202      	movs	r2, #2
 80015ca:	2100      	movs	r1, #0
 80015cc:	f00a f94a 	bl	800b864 <xTaskGenericNotify>
	uint8_t buffer[20]={0};
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef state;
	int theta=0, rho=0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]

  for(;;)
  {
	  if(patio1_need_com() == 1){ // 不处于转弯阶段和过桥阶段
 80015ea:	f002 fa57 	bl	8003a9c <patio1_need_com>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d11c      	bne.n	800162e <patio1ComFcn+0x7e>
//		  HAL_UART_Transmit(&huart5, (uint8_t*)"OK\n", 4, 4);
		  state = HAL_UART_Receive(&huart4, buffer, 20, 10);
 80015f4:	f107 0110 	add.w	r1, r7, #16
 80015f8:	230a      	movs	r3, #10
 80015fa:	2214      	movs	r2, #20
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <patio1ComFcn+0x90>)
 80015fe:	f008 f8e0 	bl	80097c2 <HAL_UART_Receive>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if(state==HAL_OK){ // 获取数据
 8001608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10e      	bne.n	800162e <patio1ComFcn+0x7e>
			  decode_from_mv_p1(buffer, &rho, &theta);
 8001610:	f107 020c 	add.w	r2, r7, #12
 8001614:	f107 0108 	add.w	r1, r7, #8
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4618      	mov	r0, r3
 800161e:	f002 ff6a 	bl	80044f6 <decode_from_mv_p1>
			  patio1_calculate_targetVel(theta, rho); // 算出两侧的�?�度
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f002 f8ad 	bl	8003788 <patio1_calculate_targetVel>
		  }else{
//			  HAL_UART_Transmit(&huart5, (uint8_t*)"OO\n", 4, 4);
		  }
	  }

	  osDelay(20);
 800162e:	2014      	movs	r0, #20
 8001630:	f008 fb52 	bl	8009cd8 <osDelay>
	  stack_debug(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f002 ff55 	bl	80044e4 <stack_debug>
	  if(patio1_need_com() == 1){ // 不处于转弯阶段和过桥阶段
 800163a:	e7d6      	b.n	80015ea <patio1ComFcn+0x3a>
 800163c:	200002a4 	.word	0x200002a4
 8001640:	20000574 	.word	0x20000574

08001644 <patio1MotorCtrlFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio1MotorCtrlFcn */
void patio1MotorCtrlFcn(void *argument)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	; 0x50
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio1MotorCtrlFcn */
  /* Infinite loop */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待进程启动
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	2001      	movs	r0, #1
 8001652:	f00a f8bb 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
	start_info_debug("P1MOT_P");
#endif
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // 启动编码器（右轮编码器）
 8001656:	213c      	movs	r1, #60	; 0x3c
 8001658:	488d      	ldr	r0, [pc, #564]	; (8001890 <patio1MotorCtrlFcn+0x24c>)
 800165a:	f006 ffa1 	bl	80085a0 <HAL_TIM_Encoder_Start>
#ifdef MY_DEBUG_START
	start_info_debug("Enc_R");
#endif
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // 启动编码器（左轮编码器）
 800165e:	213c      	movs	r1, #60	; 0x3c
 8001660:	488c      	ldr	r0, [pc, #560]	; (8001894 <patio1MotorCtrlFcn+0x250>)
 8001662:	f006 ff9d 	bl	80085a0 <HAL_TIM_Encoder_Start>
#ifdef MY_DEBUG_START
	start_info_debug("Enc_L");
#endif

	PID pidR; // 初始化用于PID算法的数据等
	pidR.kd=K_D, pidR.ki=K_I,pidR.kp=K_P,pidR.errorN0=REAL_MAX_SPEED,pidR.errorN1=REAL_MAX_SPEED,pidR.errorN2=REAL_MAX_SPEED,pidR.velCurrent=0;
 8001666:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <patio1MotorCtrlFcn+0x254>)
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166a:	4b8c      	ldr	r3, [pc, #560]	; (800189c <patio1MotorCtrlFcn+0x258>)
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
 800166e:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <patio1MotorCtrlFcn+0x25c>)
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
 8001672:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <patio1MotorCtrlFcn+0x260>)
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
 8001676:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <patio1MotorCtrlFcn+0x260>)
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <patio1MotorCtrlFcn+0x260>)
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	PID pidL;
	pidL.kd=K_D, pidL.ki=K_I,pidL.kp=K_P,pidL.errorN0=REAL_MAX_SPEED,pidL.errorN1=REAL_MAX_SPEED,pidL.errorN2=REAL_MAX_SPEED,pidL.velCurrent=0;
 8001684:	4b84      	ldr	r3, [pc, #528]	; (8001898 <patio1MotorCtrlFcn+0x254>)
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <patio1MotorCtrlFcn+0x258>)
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <patio1MotorCtrlFcn+0x25c>)
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	4b84      	ldr	r3, [pc, #528]	; (80018a4 <patio1MotorCtrlFcn+0x260>)
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <patio1MotorCtrlFcn+0x260>)
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <patio1MotorCtrlFcn+0x260>)
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
	int16_t pulseR, pulseL;
	uint16_t encoderR=0, encoderL=0; // 初始化数�?????????
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t pulseChangeR, pulseChangeL;
	TickType_t t = xTaskGetTickCount(); // ms,记录程序运行间隔时间
 80016ae:	f009 fc3d 	bl	800af2c <xTaskGetTickCount>
 80016b2:	6478      	str	r0, [r7, #68]	; 0x44

  for(;;)
  {
	  encoderR = __HAL_TIM_GET_COUNTER(&htim1); // 获取编码器数
 80016b4:	4b76      	ldr	r3, [pc, #472]	; (8001890 <patio1MotorCtrlFcn+0x24c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  encoderL = __HAL_TIM_GET_COUNTER(&htim4);
 80016be:	4b75      	ldr	r3, [pc, #468]	; (8001894 <patio1MotorCtrlFcn+0x250>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  __HAL_TIM_SET_COUNTER(&htim1, 0); // 获取之后，重置编码器
 80016c8:	4b71      	ldr	r3, [pc, #452]	; (8001890 <patio1MotorCtrlFcn+0x24c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 80016d0:	4b70      	ldr	r3, [pc, #448]	; (8001894 <patio1MotorCtrlFcn+0x250>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
	  t = xTaskGetTickCount() - t>20?xTaskGetTickCount() - t:20;; // 获取距离上一次计算�?�度时刻的时
 80016d8:	f009 fc28 	bl	800af2c <xTaskGetTickCount>
 80016dc:	4602      	mov	r2, r0
 80016de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b14      	cmp	r3, #20
 80016e4:	d905      	bls.n	80016f2 <patio1MotorCtrlFcn+0xae>
 80016e6:	f009 fc21 	bl	800af2c <xTaskGetTickCount>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	e000      	b.n	80016f4 <patio1MotorCtrlFcn+0xb0>
 80016f2:	2314      	movs	r3, #20
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
	  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1) && encoderR > 30000)
 80016f6:	4b66      	ldr	r3, [pc, #408]	; (8001890 <patio1MotorCtrlFcn+0x24c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b10      	cmp	r3, #16
 8001702:	d10a      	bne.n	800171a <patio1MotorCtrlFcn+0xd6>
 8001704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001708:	f247 5230 	movw	r2, #30000	; 0x7530
 800170c:	4293      	cmp	r3, r2
 800170e:	d904      	bls.n	800171a <patio1MotorCtrlFcn+0xd6>
		  encoderR = 65535 - encoderR;
 8001710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001714:	43db      	mvns	r3, r3
 8001716:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  calculate_vel_from_encoder(encoderR, &pidR, t); // 由编码器数据得到小车速度
 800171a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800171e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fd25 	bl	8003174 <calculate_vel_from_encoder>
	  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4) && encoderL > 30000)
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <patio1MotorCtrlFcn+0x250>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b10      	cmp	r3, #16
 8001736:	d10a      	bne.n	800174e <patio1MotorCtrlFcn+0x10a>
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001740:	4293      	cmp	r3, r2
 8001742:	d904      	bls.n	800174e <patio1MotorCtrlFcn+0x10a>
		  encoderL = 65535 - encoderL;
 8001744:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001748:	43db      	mvns	r3, r3
 800174a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  calculate_vel_from_encoder(encoderL, &pidL, t);
 800174e:	f107 0108 	add.w	r1, r7, #8
 8001752:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fd0b 	bl	8003174 <calculate_vel_from_encoder>
	  t = xTaskGetTickCount();
 800175e:	f009 fbe5 	bl	800af2c <xTaskGetTickCount>
 8001762:	6478      	str	r0, [r7, #68]	; 0x44
	  HAL_UART_Transmit(&huart5, bufferVelR, 17, 20);
	  sprintf((char*)bufferVelL, "realVelL=%1.3f\n", pidL.velCurrent);
	  HAL_UART_Transmit(&huart5, bufferVelL, 17, 20);
#endif

	  if(patio1_need_pid_R() == 1)
 8001764:	f002 f982 	bl	8003a6c <patio1_need_pid_R>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d10b      	bne.n	8001786 <patio1MotorCtrlFcn+0x142>
	  	  pulseChangeR = pid_algorithm(targetVelR, &pidR, RIGHT_WHEEL); // 根据PID算法算出要改变的pulse
 800176e:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <patio1MotorCtrlFcn+0x264>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001776:	2201      	movs	r2, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fc61 	bl	8003040 <pid_algorithm>
 800177e:	4603      	mov	r3, r0
 8001780:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001784:	e002      	b.n	800178c <patio1MotorCtrlFcn+0x148>
	  else
		  pulseChangeR = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  if(patio1_need_pid_L() == 1)
 800178c:	f002 f97a 	bl	8003a84 <patio1_need_pid_L>
 8001790:	4603      	mov	r3, r0
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10b      	bne.n	80017ae <patio1MotorCtrlFcn+0x16a>
	  	  pulseChangeL = pid_algorithm(targetVelL, &pidL, LEFT_WHEEL);
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <patio1MotorCtrlFcn+0x268>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f107 0108 	add.w	r1, r7, #8
 800179e:	2202      	movs	r2, #2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 fc4d 	bl	8003040 <pid_algorithm>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80017ac:	e002      	b.n	80017b4 <patio1MotorCtrlFcn+0x170>
	  else
		  pulseChangeL = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  pulseChangeR = pulseChangeR<(int16_t)(MAX_TUNE_PULSE_R*2)?pulseChangeR:(int16_t)(MAX_TUNE_PULSE_R*2);
 80017b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80017b8:	f641 2268 	movw	r2, #6760	; 0x1a68
 80017bc:	4293      	cmp	r3, r2
 80017be:	bfa8      	it	ge
 80017c0:	4613      	movge	r3, r2
 80017c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  pulseChangeL = pulseChangeL<(int16_t)(MAX_TUNE_PULSE_L*2)?pulseChangeL:(int16_t)(MAX_TUNE_PULSE_L*2);
 80017c6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80017ca:	f641 02ab 	movw	r2, #6315	; 0x18ab
 80017ce:	4293      	cmp	r3, r2
 80017d0:	bfa8      	it	ge
 80017d2:	4613      	movge	r3, r2
 80017d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  pulseChangeR = pulseChangeR>-(int16_t)(MAX_TUNE_PULSE_R*2)?pulseChangeR:-(int16_t)(MAX_TUNE_PULSE_R*2);
 80017d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80017dc:	4a34      	ldr	r2, [pc, #208]	; (80018b0 <patio1MotorCtrlFcn+0x26c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	bfb8      	it	lt
 80017e2:	4613      	movlt	r3, r2
 80017e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  pulseChangeL = pulseChangeL>-(int16_t)(MAX_TUNE_PULSE_L*2)?pulseChangeL:-(int16_t)(MAX_TUNE_PULSE_L*2);
 80017e8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <patio1MotorCtrlFcn+0x270>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bfb8      	it	lt
 80017f2:	4613      	movlt	r3, r2
 80017f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  pulseR = (int16_t)__HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_1) + pulseChangeR; // 计算新的pulse
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <patio1MotorCtrlFcn+0x274>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  pulseL = (int16_t)__HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_2) + pulseChangeL;
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <patio1MotorCtrlFcn+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	b29a      	uxth	r2, r3
 8001814:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001818:	4413      	add	r3, r2
 800181a:	b29b      	uxth	r3, r3
 800181c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  pulseR = pulseR<1?1:pulseR;
 8001820:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001824:	2b01      	cmp	r3, #1
 8001826:	bfb8      	it	lt
 8001828:	2301      	movlt	r3, #1
 800182a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  pulseL = pulseL<1?1:pulseL;
 800182e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001832:	2b01      	cmp	r3, #1
 8001834:	bfb8      	it	lt
 8001836:	2301      	movlt	r3, #1
 8001838:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
//	  sprintf((char*)bufferVelR, "pulseR=%d\n", pulseR);
//	  HAL_UART_Transmit(&huart5, bufferVelR, 17, 20);
//	  sprintf((char*)bufferVelL, "pulseL=%d\n", pulseL);
//	  HAL_UART_Transmit(&huart5, bufferVelL, 17, 20);

	  if(pulseR < MOTOR_PWM_PERIOD_PULSE)
 800183c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001840:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001844:	4293      	cmp	r3, r2
 8001846:	dc05      	bgt.n	8001854 <patio1MotorCtrlFcn+0x210>
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, (uint16_t)pulseR);
 8001848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <patio1MotorCtrlFcn+0x274>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
 8001852:	e004      	b.n	800185e <patio1MotorCtrlFcn+0x21a>
	  else
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, MOTOR_PWM_PERIOD_PULSE);
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <patio1MotorCtrlFcn+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f644 6220 	movw	r2, #20000	; 0x4e20
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
	  if(pulseL < MOTOR_PWM_PERIOD_PULSE)
 800185e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001862:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001866:	4293      	cmp	r3, r2
 8001868:	dc05      	bgt.n	8001876 <patio1MotorCtrlFcn+0x232>
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, (uint16_t)pulseL);
 800186a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <patio1MotorCtrlFcn+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
 8001874:	e004      	b.n	8001880 <patio1MotorCtrlFcn+0x23c>
	  else
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, MOTOR_PWM_PERIOD_PULSE);
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <patio1MotorCtrlFcn+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800187e:	639a      	str	r2, [r3, #56]	; 0x38

	  osDelay(15);
 8001880:	200f      	movs	r0, #15
 8001882:	f008 fa29 	bl	8009cd8 <osDelay>

	  stack_debug(2);
 8001886:	2002      	movs	r0, #2
 8001888:	f002 fe2c 	bl	80044e4 <stack_debug>
	  encoderR = __HAL_TIM_GET_COUNTER(&htim1); // 获取编码器数
 800188c:	e712      	b.n	80016b4 <patio1MotorCtrlFcn+0x70>
 800188e:	bf00      	nop
 8001890:	200003c4 	.word	0x200003c4
 8001894:	2000049c 	.word	0x2000049c
 8001898:	3e99999a 	.word	0x3e99999a
 800189c:	3f19999a 	.word	0x3f19999a
 80018a0:	41200000 	.word	0x41200000
 80018a4:	3e4ccccd 	.word	0x3e4ccccd
 80018a8:	20000020 	.word	0x20000020
 80018ac:	20000024 	.word	0x20000024
 80018b0:	ffffe598 	.word	0xffffe598
 80018b4:	ffffe755 	.word	0xffffe755
 80018b8:	200004e4 	.word	0x200004e4

080018bc <patio1RangeFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio1RangeFcn */
void patio1RangeFcn(void *argument)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b099      	sub	sp, #100	; 0x64
 80018c0:	af04      	add	r7, sp, #16
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio1RangeFcn */
	  /* Infinite loop */
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待启动里程
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	2001      	movs	r0, #1
 80018ca:	f009 ff7f 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
		start_info_debug("P1RNG_P");
#endif
		float tmp, accX, accY, gyroZ, accZ, gyroX, gyroY; //
		float gyroData[GYRO_LENGTH] = {0};
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
		PID pid;
		pid.errorN0=0,pid.errorN1=0,pid.errorN2=0,pid.kd=KD,pid.ki=KI,pid.kp=KP;
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <patio1RangeFcn+0x238>)
 80018ee:	623b      	str	r3, [r7, #32]
 80018f0:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <patio1RangeFcn+0x23c>)
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	4b81      	ldr	r3, [pc, #516]	; (8001afc <patio1RangeFcn+0x240>)
 80018f6:	61bb      	str	r3, [r7, #24]

		TickType_t t = xTaskGetTickCount(); //
 80018f8:	f009 fb18 	bl	800af2c <xTaskGetTickCount>
 80018fc:	64f8      	str	r0, [r7, #76]	; 0x4c
//		uint8_t turnOnFlag = 0; //

	  for(;;)
	  {
	    get_data_from_mpu(&tmp, &accX, &accY, &accZ, &gyroX, &gyroY, &gyroZ); // 获取数据
 80018fe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001902:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001906:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800190a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800190e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4623      	mov	r3, r4
 8001922:	f001 f809 	bl	8002938 <get_data_from_mpu>
	    fifo_queue(gyroData, GYRO_LENGTH, gyroZ);
 8001926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	2103      	movs	r1, #3
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fcc0 	bl	80042b4 <fifo_queue>

	    t = xTaskGetTickCount() - t>5?xTaskGetTickCount() - t:5;; //
 8001934:	f009 fafa 	bl	800af2c <xTaskGetTickCount>
 8001938:	4602      	mov	r2, r0
 800193a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b05      	cmp	r3, #5
 8001940:	d905      	bls.n	800194e <patio1RangeFcn+0x92>
 8001942:	f009 faf3 	bl	800af2c <xTaskGetTickCount>
 8001946:	4602      	mov	r2, r0
 8001948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	e000      	b.n	8001950 <patio1RangeFcn+0x94>
 800194e:	2305      	movs	r3, #5
 8001950:	64fb      	str	r3, [r7, #76]	; 0x4c
	    calculate_pos(accX, calculate_weight_average(gyroData, GYRO_LENGTH), t); //
 8001952:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	2103      	movs	r1, #3
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fc7e 	bl	800425c <calculate_weight_average>
 8001960:	4603      	mov	r3, r0
 8001962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001964:	4619      	mov	r1, r3
 8001966:	4620      	mov	r0, r4
 8001968:	f001 fc76 	bl	8003258 <calculate_pos>
	    t = xTaskGetTickCount(); //
 800196c:	f009 fade 	bl	800af2c <xTaskGetTickCount>
 8001970:	64f8      	str	r0, [r7, #76]	; 0x4c

	    switch(patio1_compare_pos()){
 8001972:	f001 ff49 	bl	8003808 <patio1_compare_pos>
 8001976:	4603      	mov	r3, r0
 8001978:	3b01      	subs	r3, #1
 800197a:	2b0d      	cmp	r3, #13
 800197c:	f200 80b1 	bhi.w	8001ae2 <patio1RangeFcn+0x226>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <patio1RangeFcn+0xcc>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	080019c1 	.word	0x080019c1
 800198c:	080019d5 	.word	0x080019d5
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a01 	.word	0x08001a01
 8001998:	08001a1b 	.word	0x08001a1b
 800199c:	08001a2f 	.word	0x08001a2f
 80019a0:	08001a49 	.word	0x08001a49
 80019a4:	08001a5b 	.word	0x08001a5b
 80019a8:	08001a75 	.word	0x08001a75
 80019ac:	08001a87 	.word	0x08001a87
 80019b0:	08001a9b 	.word	0x08001a9b
 80019b4:	08001aad 	.word	0x08001aad
 80019b8:	08001ac1 	.word	0x08001ac1
 80019bc:	08001add 	.word	0x08001add
	    case P1_1: //
	    	move_forward(); //
 80019c0:	f001 fae8 	bl	8002f94 <move_forward>
	    	tune_velocity(0, &pid);
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f001 fcbb 	bl	8003348 <tune_velocity>
	    	break;
 80019d2:	e088      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_2:
	    	move_forward();
 80019d4:	f001 fade 	bl	8002f94 <move_forward>
	    	P1deltaV = 0;
 80019d8:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <patio1RangeFcn+0x244>)
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
	    	targetVelR = P1_V_O1;
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <patio1RangeFcn+0x248>)
 80019e2:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <patio1RangeFcn+0x24c>)
 80019e4:	601a      	str	r2, [r3, #0]
	    	targetVelL = P1_V_I1;
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <patio1RangeFcn+0x250>)
 80019e8:	4a49      	ldr	r2, [pc, #292]	; (8001b10 <patio1RangeFcn+0x254>)
 80019ea:	601a      	str	r2, [r3, #0]
	    	break;
 80019ec:	e07b      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_3:
	    	move_forward();
 80019ee:	f001 fad1 	bl	8002f94 <move_forward>
	    	tune_velocity(180+GYRO_OFFSET*2, &pid);
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4619      	mov	r1, r3
 80019f8:	4846      	ldr	r0, [pc, #280]	; (8001b14 <patio1RangeFcn+0x258>)
 80019fa:	f001 fca5 	bl	8003348 <tune_velocity>
	    	break;
 80019fe:	e072      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_4:
	    	move_forward();
 8001a00:	f001 fac8 	bl	8002f94 <move_forward>
	    	P1deltaV = 0;
 8001a04:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <patio1RangeFcn+0x244>)
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
	    	targetVelR = P1_V_I2;
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <patio1RangeFcn+0x248>)
 8001a0e:	4a42      	ldr	r2, [pc, #264]	; (8001b18 <patio1RangeFcn+0x25c>)
 8001a10:	601a      	str	r2, [r3, #0]
	    	targetVelL = P1_V_O2;
 8001a12:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <patio1RangeFcn+0x250>)
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <patio1RangeFcn+0x260>)
 8001a16:	601a      	str	r2, [r3, #0]
	    	break;
 8001a18:	e065      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_5:
	    	move_forward();
 8001a1a:	f001 fabb 	bl	8002f94 <move_forward>
	    	tune_velocity(0, &pid);
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f001 fc8e 	bl	8003348 <tune_velocity>
	    	break;
 8001a2c:	e05b      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_6:
	    	move_forward();
 8001a2e:	f001 fab1 	bl	8002f94 <move_forward>
	    	P1deltaV = 0;
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <patio1RangeFcn+0x244>)
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
	    	targetVelR = P1_V_O3;
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <patio1RangeFcn+0x248>)
 8001a3c:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <patio1RangeFcn+0x24c>)
 8001a3e:	601a      	str	r2, [r3, #0]
	    	targetVelL = P1_V_I3;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <patio1RangeFcn+0x250>)
 8001a42:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <patio1RangeFcn+0x254>)
 8001a44:	601a      	str	r2, [r3, #0]
	    	break;
 8001a46:	e04e      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_7:
	    	move_forward();
 8001a48:	f001 faa4 	bl	8002f94 <move_forward>
	    	tune_velocity(180+GYRO_OFFSET*2, &pid);
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	4619      	mov	r1, r3
 8001a52:	4830      	ldr	r0, [pc, #192]	; (8001b14 <patio1RangeFcn+0x258>)
 8001a54:	f001 fc78 	bl	8003348 <tune_velocity>
	    	break;
 8001a58:	e045      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_8:
	    	move_forward();
 8001a5a:	f001 fa9b 	bl	8002f94 <move_forward>
	    	P1deltaV = 0;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <patio1RangeFcn+0x244>)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
	    	targetVelR = P1_V_I4;
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <patio1RangeFcn+0x248>)
 8001a68:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <patio1RangeFcn+0x264>)
 8001a6a:	601a      	str	r2, [r3, #0]
	    	targetVelL = P1_V_O4;
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <patio1RangeFcn+0x250>)
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <patio1RangeFcn+0x268>)
 8001a70:	601a      	str	r2, [r3, #0]
	    	break;
 8001a72:	e038      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_9:
	    	 //
	    	move_forward();
 8001a74:	f001 fa8e 	bl	8002f94 <move_forward>
	    	tune_velocity(0+GYRO_OFFSET, &pid);
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482a      	ldr	r0, [pc, #168]	; (8001b28 <patio1RangeFcn+0x26c>)
 8001a80:	f001 fc62 	bl	8003348 <tune_velocity>
	    	break;
 8001a84:	e02f      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_10:
	    	left_forward_right_back();
 8001a86:	f001 faa7 	bl	8002fd8 <left_forward_right_back>
	    	targetVelL = REAL_MAX_SPEED;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <patio1RangeFcn+0x250>)
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <patio1RangeFcn+0x270>)
 8001a8e:	601a      	str	r2, [r3, #0]
	    	targetVelR = targetVelL;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <patio1RangeFcn+0x250>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <patio1RangeFcn+0x248>)
 8001a96:	6013      	str	r3, [r2, #0]
	    	break;
 8001a98:	e025      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_11:
	    	move_forward();
 8001a9a:	f001 fa7b 	bl	8002f94 <move_forward>
	    	tune_velocity(-90, &pid);
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4822      	ldr	r0, [pc, #136]	; (8001b30 <patio1RangeFcn+0x274>)
 8001aa6:	f001 fc4f 	bl	8003348 <tune_velocity>
	    	break;
 8001aaa:	e01c      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_12:
	    	right_forward_left_back();
 8001aac:	f001 faae 	bl	800300c <right_forward_left_back>
	    	targetVelL = REAL_MAX_SPEED;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <patio1RangeFcn+0x250>)
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <patio1RangeFcn+0x270>)
 8001ab4:	601a      	str	r2, [r3, #0]
	    	targetVelR = targetVelL;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <patio1RangeFcn+0x250>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <patio1RangeFcn+0x248>)
 8001abc:	6013      	str	r3, [r2, #0]
	    	break;
 8001abe:	e012      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_13:
	    	P1deltaV = 0;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <patio1RangeFcn+0x244>)
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
	    	move_forward();
 8001ac8:	f001 fa64 	bl	8002f94 <move_forward>
	    	tune_velocity(0, &pid);
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0000 	mov.w	r0, #0
 8001ad6:	f001 fc37 	bl	8003348 <tune_velocity>
	    	break;
 8001ada:	e004      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    case P1_14:
	    	robot_stop();
 8001adc:	f001 fa62 	bl	8002fa4 <robot_stop>
	    	break;
 8001ae0:	e001      	b.n	8001ae6 <patio1RangeFcn+0x22a>
	    default:
	    	move_forward();
 8001ae2:	f001 fa57 	bl	8002f94 <move_forward>
	    }

	    osDelay(15);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f008 f8f6 	bl	8009cd8 <osDelay>

	    stack_debug(3);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f002 fcf9 	bl	80044e4 <stack_debug>
	    get_data_from_mpu(&tmp, &accX, &accY, &accZ, &gyroX, &gyroY, &gyroZ); // 获取数据
 8001af2:	e704      	b.n	80018fe <patio1RangeFcn+0x42>
 8001af4:	3f99999a 	.word	0x3f99999a
 8001af8:	3e99999a 	.word	0x3e99999a
 8001afc:	40eae148 	.word	0x40eae148
 8001b00:	20000298 	.word	0x20000298
 8001b04:	20000020 	.word	0x20000020
 8001b08:	3ed70a3d 	.word	0x3ed70a3d
 8001b0c:	20000024 	.word	0x20000024
 8001b10:	3e3851ec 	.word	0x3e3851ec
 8001b14:	4335999a 	.word	0x4335999a
 8001b18:	3e5b6db7 	.word	0x3e5b6db7
 8001b1c:	3ec57c58 	.word	0x3ec57c58
 8001b20:	3e75c28f 	.word	0x3e75c28f
 8001b24:	3eb851ec 	.word	0x3eb851ec
 8001b28:	3f4ccccd 	.word	0x3f4ccccd
 8001b2c:	3e4ccccd 	.word	0x3e4ccccd
 8001b30:	c2b40000 	.word	0xc2b40000
 8001b34:	00000000 	.word	0x00000000

08001b38 <patio1Ultra1Fcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio1Ultra1Fcn */
void patio1Ultra1Fcn(void *argument)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio1Ultra1Fcn */
    /* Infinite loop */
  	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	2001      	movs	r0, #1
 8001b46:	f009 fe41 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P1U1_P");
#endif
//  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // 启动对超声波1返回信号的捕
  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <patio1Ultra1Fcn+0xa0>)
 8001b4e:	f006 fb71 	bl	8008234 <HAL_TIM_IC_Start_IT>
#ifdef MY_DEBUG_START
  	start_info_debug("ul1_cap");
#endif

  	uint32_t pulse=0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  	float dis=0;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
    for(;;)
    {
  	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待捕获完成
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	2001      	movs	r0, #1
 8001b62:	f009 fe33 	bl	800b7cc <ulTaskNotifyTake>
  	  pulse = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2);
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <patio1Ultra1Fcn+0xa0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	60fb      	str	r3, [r7, #12]
  	  dis = (float)pulse * 0.001*170; //cm 计算测量距离
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff f900 	bl	8000d74 <__aeabi_ui2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcc6 	bl	8000508 <__aeabi_f2d>
 8001b7c:	a314      	add	r3, pc, #80	; (adr r3, 8001bd0 <patio1Ultra1Fcn+0x98>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fd19 	bl	80005b8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <patio1Ultra1Fcn+0xa4>)
 8001b94:	f7fe fd10 	bl	80005b8 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe ffe2 	bl	8000b68 <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
  	  if(dis > 2){
 8001ba8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bac:	68b8      	ldr	r0, [r7, #8]
 8001bae:	f7ff faf5 	bl	800119c <__aeabi_fcmpgt>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <patio1Ultra1Fcn+0x8a>
  		  fifo_queue(ultra1dis, 5, dis);
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	2105      	movs	r1, #5
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <patio1Ultra1Fcn+0xa8>)
 8001bbe:	f002 fb79 	bl	80042b4 <fifo_queue>
  	  uint8_t bufferDis[20]={0};
  	  sprintf((char*)bufferDis, "P1U1Dis:%4.3f\n", dis);
  	  HAL_UART_Transmit(&huart5, bufferDis, 18, 20);
#endif

  	  stack_debug(4);
 8001bc2:	2004      	movs	r0, #4
 8001bc4:	f002 fc8e 	bl	80044e4 <stack_debug>
  	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待捕获完成
 8001bc8:	e7c8      	b.n	8001b5c <patio1Ultra1Fcn+0x24>
 8001bca:	bf00      	nop
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f50624d 	.word	0x3f50624d
 8001bd8:	2000040c 	.word	0x2000040c
 8001bdc:	40654000 	.word	0x40654000
 8001be0:	20000000 	.word	0x20000000
 8001be4:	00000000 	.word	0x00000000

08001be8 <patio1Ultra2Fcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio1Ultra2Fcn */
void patio1Ultra2Fcn(void *argument)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio1Ultra2Fcn */
  /* Infinite loop */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待启动进程
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f009 fde9 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P1U2_P");
#endif
//	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1); //
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	4822      	ldr	r0, [pc, #136]	; (8001c88 <patio1Ultra2Fcn+0xa0>)
 8001bfe:	f006 fb19 	bl	8008234 <HAL_TIM_IC_Start_IT>
#ifdef MY_DEBUG_START
  	start_info_debug("ul2_cap");
#endif
	uint32_t pulse=0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
	float dis=0;
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
	for(;;){
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待捕获完成
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	2001      	movs	r0, #1
 8001c12:	f009 fddb 	bl	800b7cc <ulTaskNotifyTake>
	  pulse = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_2);
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <patio1Ultra2Fcn+0xa0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	60fb      	str	r3, [r7, #12]
	  dis = (float)pulse * 0.001*170; //cm，计算测
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f7ff f8a8 	bl	8000d74 <__aeabi_ui2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc6e 	bl	8000508 <__aeabi_f2d>
 8001c2c:	a314      	add	r3, pc, #80	; (adr r3, 8001c80 <patio1Ultra2Fcn+0x98>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fcc1 	bl	80005b8 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <patio1Ultra2Fcn+0xa4>)
 8001c44:	f7fe fcb8 	bl	80005b8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff8a 	bl	8000b68 <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	60bb      	str	r3, [r7, #8]
	  if(dis > 2){
 8001c58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f7ff fa9d 	bl	800119c <__aeabi_fcmpgt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <patio1Ultra2Fcn+0x8a>
	  	fifo_queue(ultra2dis, 3, dis);
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <patio1Ultra2Fcn+0xa8>)
 8001c6e:	f002 fb21 	bl	80042b4 <fifo_queue>
#ifdef MY_DEBUG_OUT_ULTRA_INFO
	  uint8_t bufferDis[20]={0};
  	  sprintf((char*)bufferDis, "P1U2Dis:%4.3f\n", dis);
  	  HAL_UART_Transmit(&huart5, bufferDis, 18, 20);
#endif
	  	  stack_debug(5);
 8001c72:	2005      	movs	r0, #5
 8001c74:	f002 fc36 	bl	80044e4 <stack_debug>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待捕获完成
 8001c78:	e7c8      	b.n	8001c0c <patio1Ultra2Fcn+0x24>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c84:	3f50624d 	.word	0x3f50624d
 8001c88:	2000052c 	.word	0x2000052c
 8001c8c:	40654000 	.word	0x40654000
 8001c90:	20000014 	.word	0x20000014

08001c94 <patio2ComFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2ComFcn */
void patio2ComFcn(void *argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2ComFcn */
  /* Infinite loop */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f009 fd93 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P2COM_P");
#endif
//	uint8_t buffer[20];
	uint8_t receiveTime = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0, 0};
 8001caa:	2300      	movs	r3, #0
 8001cac:	813b      	strh	r3, [r7, #8]
	uint8_t forward=0, left=0, right=0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73bb      	strb	r3, [r7, #14]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	737b      	strb	r3, [r7, #13]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	733b      	strb	r3, [r7, #12]

  for(;;)
  {
	  robot_stop();
 8001cba:	f001 f973 	bl	8002fa4 <robot_stop>
	  HAL_UART_Receive(&huart4, data, 1, HAL_MAX_DELAY);
 8001cbe:	f107 0108 	add.w	r1, r7, #8
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	481c      	ldr	r0, [pc, #112]	; (8001d3c <patio2ComFcn+0xa8>)
 8001cca:	f007 fd7a 	bl	80097c2 <HAL_UART_Receive>
//	  HAL_UART_Transmit(&huart5, data,2, HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart5,(uint8_t*)"ok\n",3, HAL_MAX_DELAY);

	  receiveTime ++;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
	  if(data[0] == ARROW_FORWARD)
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d103      	bne.n	8001ce2 <patio2ComFcn+0x4e>
		  forward++;
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	73bb      	strb	r3, [r7, #14]
 8001ce0:	e00c      	b.n	8001cfc <patio2ComFcn+0x68>
	  else if(data[0] == ARROW_LEFT)
 8001ce2:	7a3b      	ldrb	r3, [r7, #8]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d103      	bne.n	8001cf0 <patio2ComFcn+0x5c>
		  left++;
 8001ce8:	7b7b      	ldrb	r3, [r7, #13]
 8001cea:	3301      	adds	r3, #1
 8001cec:	737b      	strb	r3, [r7, #13]
 8001cee:	e005      	b.n	8001cfc <patio2ComFcn+0x68>
	  else if(data[0] == ARROW_RIGHT)
 8001cf0:	7a3b      	ldrb	r3, [r7, #8]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d102      	bne.n	8001cfc <patio2ComFcn+0x68>
		  right ++;
 8001cf6:	7b3b      	ldrb	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	733b      	strb	r3, [r7, #12]

	  if(receiveTime >= RECOGNISE_TIME){
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d913      	bls.n	8001d2a <patio2ComFcn+0x96>
		  finalDirection = which_is_most(forward, left, right);
 8001d02:	7b3a      	ldrb	r2, [r7, #12]
 8001d04:	7b79      	ldrb	r1, [r7, #13]
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 fef3 	bl	8003af4 <which_is_most>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <patio2ComFcn+0xac>)
 8001d14:	701a      	strb	r2, [r3, #0]
//		  finalDirection = ARROW_LEFT;
		  patio2_recognise_finish = 1;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <patio2ComFcn+0xb0>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
		  move_forward();
 8001d1c:	f001 f93a 	bl	8002f94 <move_forward>
		  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	2001      	movs	r0, #1
 8001d26:	f009 fd51 	bl	800b7cc <ulTaskNotifyTake>
	  }

	  data[0] = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	723b      	strb	r3, [r7, #8]
	  osDelay(15);
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f007 ffd2 	bl	8009cd8 <osDelay>

	  stack_debug(6);
 8001d34:	2006      	movs	r0, #6
 8001d36:	f002 fbd5 	bl	80044e4 <stack_debug>
	  robot_stop();
 8001d3a:	e7be      	b.n	8001cba <patio2ComFcn+0x26>
 8001d3c:	20000574 	.word	0x20000574
 8001d40:	20000292 	.word	0x20000292
 8001d44:	20000295 	.word	0x20000295

08001d48 <patio2MotorCtrlFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2MotorCtrlFcn */
void patio2MotorCtrlFcn(void *argument)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	; 0x50
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2MotorCtrlFcn */
  /* Infinite loop */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // 等待进程启动
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	2001      	movs	r0, #1
 8001d56:	f009 fd39 	bl	800b7cc <ulTaskNotifyTake>
	xTaskNotifyGive(patio2Ultra1AppHandle);
 8001d5a:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <patio2MotorCtrlFcn+0x250>)
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2202      	movs	r2, #2
 8001d62:	2100      	movs	r1, #0
 8001d64:	f009 fd7e 	bl	800b864 <xTaskGenericNotify>
	xTaskNotifyGive(patio2Ultra2AppHandle);
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <patio2MotorCtrlFcn+0x254>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2202      	movs	r2, #2
 8001d70:	2100      	movs	r1, #0
 8001d72:	f009 fd77 	bl	800b864 <xTaskGenericNotify>
#ifdef MY_DEBUG_START
  	start_info_debug("P2MOT_P");
#endif
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // 启动编码器（右轮编码器）
 8001d76:	213c      	movs	r1, #60	; 0x3c
 8001d78:	4889      	ldr	r0, [pc, #548]	; (8001fa0 <patio2MotorCtrlFcn+0x258>)
 8001d7a:	f006 fc11 	bl	80085a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // 启动编码器（左轮编码器）
 8001d7e:	213c      	movs	r1, #60	; 0x3c
 8001d80:	4888      	ldr	r0, [pc, #544]	; (8001fa4 <patio2MotorCtrlFcn+0x25c>)
 8001d82:	f006 fc0d 	bl	80085a0 <HAL_TIM_Encoder_Start>
  	start_info_debug("Enc_R");
  	start_info_debug("Enc_L");
#endif

	PID pidR; // 初始化用于PID算法的数据等
	pidR.kd=K_D, pidR.ki=K_I,pidR.kp=K_P,pidR.errorN0=REAL_MAX_SPEED,pidR.errorN1=REAL_MAX_SPEED,pidR.errorN2=REAL_MAX_SPEED,pidR.velCurrent=0;
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <patio2MotorCtrlFcn+0x260>)
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <patio2MotorCtrlFcn+0x264>)
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d8e:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <patio2MotorCtrlFcn+0x268>)
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <patio2MotorCtrlFcn+0x26c>)
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d96:	4b87      	ldr	r3, [pc, #540]	; (8001fb4 <patio2MotorCtrlFcn+0x26c>)
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9a:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <patio2MotorCtrlFcn+0x26c>)
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
	PID pidL;
	pidL.kd=K_D, pidL.ki=K_I,pidL.kp=K_P,pidL.errorN0=REAL_MAX_SPEED,pidL.errorN1=REAL_MAX_SPEED,pidL.errorN2=REAL_MAX_SPEED,pidL.velCurrent=0;
 8001da4:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <patio2MotorCtrlFcn+0x260>)
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	4b80      	ldr	r3, [pc, #512]	; (8001fac <patio2MotorCtrlFcn+0x264>)
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <patio2MotorCtrlFcn+0x268>)
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <patio2MotorCtrlFcn+0x26c>)
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <patio2MotorCtrlFcn+0x26c>)
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <patio2MotorCtrlFcn+0x26c>)
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
	int16_t pulseR, pulseL;
	uint16_t encoderR=0, encoderL=0; //
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t pulseChangeR, pulseChangeL;
	TickType_t t = xTaskGetTickCount(); // ms,记录程序运行间隔时间
 8001dce:	f009 f8ad 	bl	800af2c <xTaskGetTickCount>
 8001dd2:	6478      	str	r0, [r7, #68]	; 0x44

  for(;;)
  {

	  encoderR = __HAL_TIM_GET_COUNTER(&htim1); //
 8001dd4:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <patio2MotorCtrlFcn+0x258>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  encoderL = __HAL_TIM_GET_COUNTER(&htim4);
 8001dde:	4b71      	ldr	r3, [pc, #452]	; (8001fa4 <patio2MotorCtrlFcn+0x25c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  __HAL_TIM_SET_COUNTER(&htim1, 0); // 获取之后，重置编码器
 8001de8:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <patio2MotorCtrlFcn+0x258>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001df0:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <patio2MotorCtrlFcn+0x25c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
	  t = xTaskGetTickCount() - t>20?xTaskGetTickCount() - t:20;; // 获取距离上一�????????
 8001df8:	f009 f898 	bl	800af2c <xTaskGetTickCount>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b14      	cmp	r3, #20
 8001e04:	d905      	bls.n	8001e12 <patio2MotorCtrlFcn+0xca>
 8001e06:	f009 f891 	bl	800af2c <xTaskGetTickCount>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	e000      	b.n	8001e14 <patio2MotorCtrlFcn+0xcc>
 8001e12:	2314      	movs	r3, #20
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
	  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1) && encoderR > 30000)
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <patio2MotorCtrlFcn+0x258>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d10a      	bne.n	8001e3a <patio2MotorCtrlFcn+0xf2>
 8001e24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e28:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d904      	bls.n	8001e3a <patio2MotorCtrlFcn+0xf2>
		  encoderR = 65535 - encoderR;
 8001e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e34:	43db      	mvns	r3, r3
 8001e36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  calculate_vel_from_encoder(encoderR, &pidR, t); // 由编码器数据得到小车速度
 8001e3a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 f995 	bl	8003174 <calculate_vel_from_encoder>
	  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4) && encoderL > 30000)
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <patio2MotorCtrlFcn+0x25c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d10a      	bne.n	8001e6e <patio2MotorCtrlFcn+0x126>
 8001e58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e5c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d904      	bls.n	8001e6e <patio2MotorCtrlFcn+0x126>
		  encoderL = 65535 - encoderL;
 8001e64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  calculate_vel_from_encoder(encoderL, &pidL, t);
 8001e6e:	f107 0108 	add.w	r1, r7, #8
 8001e72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 f97b 	bl	8003174 <calculate_vel_from_encoder>
	  t = xTaskGetTickCount();
 8001e7e:	f009 f855 	bl	800af2c <xTaskGetTickCount>
 8001e82:	6478      	str	r0, [r7, #68]	; 0x44
	  HAL_UART_Transmit(&huart5, bufferVelR, 16, 20);
	  sprintf((char*)bufferVelL, "realVelL=%1.3f\n", pidL.velCurrent);
	  HAL_UART_Transmit(&huart5, bufferVelL, 16, 20);
#endif

	  if(patio2_need_pid_R() == 1)
 8001e84:	f002 f956 	bl	8004134 <patio2_need_pid_R>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10b      	bne.n	8001ea6 <patio2MotorCtrlFcn+0x15e>
	  	  pulseChangeR = pid_algorithm(targetVelR, &pidR, RIGHT_WHEEL); // 根据PID算法算出要改变的pulse
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <patio2MotorCtrlFcn+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e96:	2201      	movs	r2, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 f8d1 	bl	8003040 <pid_algorithm>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001ea4:	e002      	b.n	8001eac <patio2MotorCtrlFcn+0x164>
	  else
		  pulseChangeR = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  if(patio2_need_pid_L() == 1)
 8001eac:	f002 f97e 	bl	80041ac <patio2_need_pid_L>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10b      	bne.n	8001ece <patio2MotorCtrlFcn+0x186>
	  	  pulseChangeL = pid_algorithm(targetVelL, &pidL, LEFT_WHEEL);
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <patio2MotorCtrlFcn+0x274>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f107 0108 	add.w	r1, r7, #8
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 f8bd 	bl	8003040 <pid_algorithm>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ecc:	e002      	b.n	8001ed4 <patio2MotorCtrlFcn+0x18c>
	  else
		  pulseChangeL = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  pulseChangeR = pulseChangeR<(int16_t)(-MAX_TUNE_PULSE_R)?(int16_t)(-MAX_TUNE_PULSE_R):pulseChangeR;
 8001ed4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ed8:	4a39      	ldr	r2, [pc, #228]	; (8001fc0 <patio2MotorCtrlFcn+0x278>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	bfb8      	it	lt
 8001ede:	4613      	movlt	r3, r2
 8001ee0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  pulseChangeL = pulseChangeL<(int16_t)(-MAX_TUNE_PULSE_L)?(int16_t)(-MAX_TUNE_PULSE_L):pulseChangeL;
 8001ee4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001ee8:	4a36      	ldr	r2, [pc, #216]	; (8001fc4 <patio2MotorCtrlFcn+0x27c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	bfb8      	it	lt
 8001eee:	4613      	movlt	r3, r2
 8001ef0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  pulseChangeR = pulseChangeR>(int16_t)(MAX_TUNE_PULSE_R)?(int16_t)(MAX_TUNE_PULSE_R):pulseChangeR;
 8001ef4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ef8:	f640 5234 	movw	r2, #3380	; 0xd34
 8001efc:	4293      	cmp	r3, r2
 8001efe:	bfa8      	it	ge
 8001f00:	4613      	movge	r3, r2
 8001f02:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  pulseChangeL = pulseChangeL>(int16_t)(MAX_TUNE_PULSE_L)?(int16_t)(MAX_TUNE_PULSE_L):pulseChangeL;
 8001f06:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001f0a:	f640 4255 	movw	r2, #3157	; 0xc55
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	bfa8      	it	ge
 8001f12:	4613      	movge	r3, r2
 8001f14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  pulseR = (int16_t)__HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_1) + pulseChangeR; // 计算新的pulse
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <patio2MotorCtrlFcn+0x280>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f24:	4413      	add	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  pulseL = (int16_t)__HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_2) + pulseChangeL;
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <patio2MotorCtrlFcn+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  pulseR = pulseR<1?1:pulseR;
 8001f40:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	bfb8      	it	lt
 8001f48:	2301      	movlt	r3, #1
 8001f4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  pulseL = pulseL<1?1:pulseL;
 8001f4e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	bfb8      	it	lt
 8001f56:	2301      	movlt	r3, #1
 8001f58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	  if(pulseR < MOTOR_PWM_PERIOD_PULSE)
 8001f5c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001f60:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f64:	4293      	cmp	r3, r2
 8001f66:	dc04      	bgt.n	8001f72 <patio2MotorCtrlFcn+0x22a>
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, (uint16_t)pulseR);
 8001f68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <patio2MotorCtrlFcn+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
	  if(pulseL < MOTOR_PWM_PERIOD_PULSE)
 8001f72:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001f76:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	dc04      	bgt.n	8001f88 <patio2MotorCtrlFcn+0x240>
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, (uint16_t)pulseL);
 8001f7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <patio2MotorCtrlFcn+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38

	  osDelay(15);
 8001f88:	200f      	movs	r0, #15
 8001f8a:	f007 fea5 	bl	8009cd8 <osDelay>

	  stack_debug(7);
 8001f8e:	2007      	movs	r0, #7
 8001f90:	f002 faa8 	bl	80044e4 <stack_debug>
	  encoderR = __HAL_TIM_GET_COUNTER(&htim1); //
 8001f94:	e71e      	b.n	8001dd4 <patio2MotorCtrlFcn+0x8c>
 8001f96:	bf00      	nop
 8001f98:	200002c0 	.word	0x200002c0
 8001f9c:	200002cc 	.word	0x200002cc
 8001fa0:	200003c4 	.word	0x200003c4
 8001fa4:	2000049c 	.word	0x2000049c
 8001fa8:	3e99999a 	.word	0x3e99999a
 8001fac:	3f19999a 	.word	0x3f19999a
 8001fb0:	41200000 	.word	0x41200000
 8001fb4:	3e4ccccd 	.word	0x3e4ccccd
 8001fb8:	20000020 	.word	0x20000020
 8001fbc:	20000024 	.word	0x20000024
 8001fc0:	fffff2cc 	.word	0xfffff2cc
 8001fc4:	fffff3ab 	.word	0xfffff3ab
 8001fc8:	200004e4 	.word	0x200004e4

08001fcc <patio2RangeFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2RangeFcn */
void patio2RangeFcn(void *argument)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b09b      	sub	sp, #108	; 0x6c
 8001fd0:	af04      	add	r7, sp, #16
 8001fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2RangeFcn */
  /* Infinite loop */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f009 fbf7 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P2RNG_P");
#endif
	PID pid;
	pid.errorN0=0,pid.errorN1=0,pid.errorN2=0,pid.kd=KD,pid.ki=KI,pid.kp=KP;
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff0:	4bad      	ldr	r3, [pc, #692]	; (80022a8 <patio2RangeFcn+0x2dc>)
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff4:	4bad      	ldr	r3, [pc, #692]	; (80022ac <patio2RangeFcn+0x2e0>)
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ff8:	4bad      	ldr	r3, [pc, #692]	; (80022b0 <patio2RangeFcn+0x2e4>)
 8001ffa:	647b      	str	r3, [r7, #68]	; 0x44
	float tmp, accX, accY, gyroZ, accZ, gyroX, gyroY; // 用于记录本次获取到的数据
	float gyroData[GYRO_LENGTH]={0};
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
	TickType_t t = xTaskGetTickCount(); // 记录程序启动的时
 8002008:	f008 ff90 	bl	800af2c <xTaskGetTickCount>
 800200c:	6578      	str	r0, [r7, #84]	; 0x54
	uint8_t turnOnFlag = 0; // 防止影响IC中断
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


  for(;;)
  {
	  get_data_from_mpu(&tmp, &accX, &accY, &accZ, &gyroX, &gyroY, &gyroZ); // 获取数据
 8002014:	f107 0420 	add.w	r4, r7, #32
 8002018:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800201c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002020:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	4623      	mov	r3, r4
 8002038:	f000 fc7e 	bl	8002938 <get_data_from_mpu>
	  fifo_queue(gyroData, GYRO_LENGTH, gyroZ);
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	2103      	movs	r1, #3
 8002044:	4618      	mov	r0, r3
 8002046:	f002 f935 	bl	80042b4 <fifo_queue>
	  t = xTaskGetTickCount() - t>5?xTaskGetTickCount() - t:5;; // 记录距上次计算里程的时间间隔
 800204a:	f008 ff6f 	bl	800af2c <xTaskGetTickCount>
 800204e:	4602      	mov	r2, r0
 8002050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b05      	cmp	r3, #5
 8002056:	d905      	bls.n	8002064 <patio2RangeFcn+0x98>
 8002058:	f008 ff68 	bl	800af2c <xTaskGetTickCount>
 800205c:	4602      	mov	r2, r0
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	e000      	b.n	8002066 <patio2RangeFcn+0x9a>
 8002064:	2305      	movs	r3, #5
 8002066:	657b      	str	r3, [r7, #84]	; 0x54
	  calculate_pos(accX, calculate_weight_average(gyroData, GYRO_LENGTH), t); // 计算并更新里程计数据
 8002068:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2103      	movs	r1, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f8f3 	bl	800425c <calculate_weight_average>
 8002076:	4603      	mov	r3, r0
 8002078:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800207a:	4619      	mov	r1, r3
 800207c:	4620      	mov	r0, r4
 800207e:	f001 f8eb 	bl	8003258 <calculate_pos>
	  t = xTaskGetTickCount(); // 记录时间时刻
 8002082:	f008 ff53 	bl	800af2c <xTaskGetTickCount>
 8002086:	6578      	str	r0, [r7, #84]	; 0x54

	  switch(patio2_compare_pos()){
 8002088:	f001 fd58 	bl	8003b3c <patio2_compare_pos>
 800208c:	4603      	mov	r3, r0
 800208e:	2b15      	cmp	r3, #21
 8002090:	f200 8102 	bhi.w	8002298 <patio2RangeFcn+0x2cc>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <patio2RangeFcn+0xd0>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020f5 	.word	0x080020f5
 80020a0:	08002109 	.word	0x08002109
 80020a4:	0800212b 	.word	0x0800212b
 80020a8:	0800213f 	.word	0x0800213f
 80020ac:	08002151 	.word	0x08002151
 80020b0:	08002157 	.word	0x08002157
 80020b4:	0800219f 	.word	0x0800219f
 80020b8:	080021c9 	.word	0x080021c9
 80020bc:	080021db 	.word	0x080021db
 80020c0:	080021e1 	.word	0x080021e1
 80020c4:	080021f3 	.word	0x080021f3
 80020c8:	080021f9 	.word	0x080021f9
 80020cc:	0800220b 	.word	0x0800220b
 80020d0:	08002211 	.word	0x08002211
 80020d4:	08002223 	.word	0x08002223
 80020d8:	08002229 	.word	0x08002229
 80020dc:	0800223b 	.word	0x0800223b
 80020e0:	0800224f 	.word	0x0800224f
 80020e4:	08002255 	.word	0x08002255
 80020e8:	08002267 	.word	0x08002267
 80020ec:	0800227b 	.word	0x0800227b
 80020f0:	0800228d 	.word	0x0800228d
	  case PATIO2_MOVE_CLOSER:
		  move_forward();
 80020f4:	f000 ff4e 	bl	8002f94 <move_forward>
		  tune_velocity(0, &pid);
 80020f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020fc:	4619      	mov	r1, r3
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f001 f921 	bl	8003348 <tune_velocity>
		  break;
 8002106:	e0c7      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_RECOGNISE:
		  if(turnOnFlag == 0){
 8002108:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <patio2RangeFcn+0x152>
			  xTaskNotifyGive(patio2ComAppHandle);
 8002110:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <patio2RangeFcn+0x2e8>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	2300      	movs	r3, #0
 8002116:	2202      	movs	r2, #2
 8002118:	2100      	movs	r1, #0
 800211a:	f009 fba3 	bl	800b864 <xTaskGenericNotify>
		  }
		  turnOnFlag = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  robot_stop();
 8002124:	f000 ff3e 	bl	8002fa4 <robot_stop>
		  break;
 8002128:	e0b6      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_KNOCK_ARROW:
		  move_forward();
 800212a:	f000 ff33 	bl	8002f94 <move_forward>
		  tune_velocity(0, &pid);
 800212e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 0000 	mov.w	r0, #0
 8002138:	f001 f906 	bl	8003348 <tune_velocity>
		  break;
 800213c:	e0ac      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_RETURN_ORIGIN:
		  move_back();
 800213e:	f000 ff01 	bl	8002f44 <move_back>
		  tune_velocity(180, &pid);
 8002142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002146:	4619      	mov	r1, r3
 8002148:	485b      	ldr	r0, [pc, #364]	; (80022b8 <patio2RangeFcn+0x2ec>)
 800214a:	f001 f8fd 	bl	8003348 <tune_velocity>
		  break;
 800214e:	e0a3      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TURN_CORNER1:
		  right_forward_left_back();
 8002150:	f000 ff5c 	bl	800300c <right_forward_left_back>
		  break;
 8002154:	e0a0      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_CORNER1:
		  move_forward();
 8002156:	f000 ff1d 	bl	8002f94 <move_forward>
		  switch(finalDirection){
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <patio2RangeFcn+0x2f0>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d007      	beq.n	8002172 <patio2RangeFcn+0x1a6>
 8002162:	2b03      	cmp	r3, #3
 8002164:	f300 8095 	bgt.w	8002292 <patio2RangeFcn+0x2c6>
 8002168:	2b01      	cmp	r3, #1
 800216a:	d009      	beq.n	8002180 <patio2RangeFcn+0x1b4>
 800216c:	2b02      	cmp	r3, #2
 800216e:	d00e      	beq.n	800218e <patio2RangeFcn+0x1c2>
			  tune_velocity(PATIO2_E_A, &pid);
			  break;
		  case ARROW_LEFT:
			  tune_velocity(PATIO2_F_A, &pid);
		  }
		  break;
 8002170:	e08f      	b.n	8002292 <patio2RangeFcn+0x2c6>
			  tune_velocity(PATIO2_D_A, &pid);
 8002172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002176:	4619      	mov	r1, r3
 8002178:	4851      	ldr	r0, [pc, #324]	; (80022c0 <patio2RangeFcn+0x2f4>)
 800217a:	f001 f8e5 	bl	8003348 <tune_velocity>
			  break;
 800217e:	e00d      	b.n	800219c <patio2RangeFcn+0x1d0>
			  tune_velocity(PATIO2_E_A, &pid);
 8002180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002184:	4619      	mov	r1, r3
 8002186:	484f      	ldr	r0, [pc, #316]	; (80022c4 <patio2RangeFcn+0x2f8>)
 8002188:	f001 f8de 	bl	8003348 <tune_velocity>
			  break;
 800218c:	e006      	b.n	800219c <patio2RangeFcn+0x1d0>
			  tune_velocity(PATIO2_F_A, &pid);
 800218e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002192:	4619      	mov	r1, r3
 8002194:	484c      	ldr	r0, [pc, #304]	; (80022c8 <patio2RangeFcn+0x2fc>)
 8002196:	f001 f8d7 	bl	8003348 <tune_velocity>
		  break;
 800219a:	e07a      	b.n	8002292 <patio2RangeFcn+0x2c6>
 800219c:	e079      	b.n	8002292 <patio2RangeFcn+0x2c6>
	  case PATIO2_TURN_OR_GO:
		  switch(finalDirection){
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <patio2RangeFcn+0x2f0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d006      	beq.n	80021b4 <patio2RangeFcn+0x1e8>
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	dc75      	bgt.n	8002296 <patio2RangeFcn+0x2ca>
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d005      	beq.n	80021ba <patio2RangeFcn+0x1ee>
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d006      	beq.n	80021c0 <patio2RangeFcn+0x1f4>
			  robot_stop();
			  break;
		  case ARROW_LEFT:
			  left_forward_right_back();
		  }
		  break;
 80021b2:	e070      	b.n	8002296 <patio2RangeFcn+0x2ca>
			  right_forward_left_back();
 80021b4:	f000 ff2a 	bl	800300c <right_forward_left_back>
			  break;
 80021b8:	e005      	b.n	80021c6 <patio2RangeFcn+0x1fa>
			  robot_stop();
 80021ba:	f000 fef3 	bl	8002fa4 <robot_stop>
			  break;
 80021be:	e002      	b.n	80021c6 <patio2RangeFcn+0x1fa>
			  left_forward_right_back();
 80021c0:	f000 ff0a 	bl	8002fd8 <left_forward_right_back>
		  break;
 80021c4:	e067      	b.n	8002296 <patio2RangeFcn+0x2ca>
 80021c6:	e066      	b.n	8002296 <patio2RangeFcn+0x2ca>

	  case PATIO2_GO:
		  move_forward();
 80021c8:	f000 fee4 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_G_A+GYRO_OFFSET, &pid);
 80021cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021d0:	4619      	mov	r1, r3
 80021d2:	483e      	ldr	r0, [pc, #248]	; (80022cc <patio2RangeFcn+0x300>)
 80021d4:	f001 f8b8 	bl	8003348 <tune_velocity>
		  break;
 80021d8:	e05e      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TURN_CORNER2:
		  left_forward_right_back();
 80021da:	f000 fefd 	bl	8002fd8 <left_forward_right_back>
		  break;
 80021de:	e05b      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_CORNER2:
		  move_forward();
 80021e0:	f000 fed8 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_H_A+GYRO_OFFSET, &pid);
 80021e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e8:	4619      	mov	r1, r3
 80021ea:	4839      	ldr	r0, [pc, #228]	; (80022d0 <patio2RangeFcn+0x304>)
 80021ec:	f001 f8ac 	bl	8003348 <tune_velocity>
		  break;
 80021f0:	e052      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TURN_CORNER3:
		  right_forward_left_back();
 80021f2:	f000 ff0b 	bl	800300c <right_forward_left_back>
		  break;
 80021f6:	e04f      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_CORNER3:
		  move_forward();
 80021f8:	f000 fecc 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_I_A+GYRO_OFFSET*2, &pid);
 80021fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002200:	4619      	mov	r1, r3
 8002202:	4834      	ldr	r0, [pc, #208]	; (80022d4 <patio2RangeFcn+0x308>)
 8002204:	f001 f8a0 	bl	8003348 <tune_velocity>
		  break;
 8002208:	e046      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TURN_CORNER4:
		  left_forward_right_back();
 800220a:	f000 fee5 	bl	8002fd8 <left_forward_right_back>
		  break;
 800220e:	e043      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_CORNER4:
		  move_forward();
 8002210:	f000 fec0 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_J_A+GYRO_OFFSET, &pid);
 8002214:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002218:	4619      	mov	r1, r3
 800221a:	482d      	ldr	r0, [pc, #180]	; (80022d0 <patio2RangeFcn+0x304>)
 800221c:	f001 f894 	bl	8003348 <tune_velocity>
		  break;
 8002220:	e03a      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TURN_CORNER5:
		  right_forward_left_back();
 8002222:	f000 fef3 	bl	800300c <right_forward_left_back>
		  break;
 8002226:	e037      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_CORNER5:
		  move_forward();
 8002228:	f000 feb4 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_K_A, &pid);
 800222c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002230:	4619      	mov	r1, r3
 8002232:	4824      	ldr	r0, [pc, #144]	; (80022c4 <patio2RangeFcn+0x2f8>)
 8002234:	f001 f888 	bl	8003348 <tune_velocity>
		  break;
 8002238:	e02e      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_ARRIVE_BASKET:
		  robot_stop();
 800223a:	f000 feb3 	bl	8002fa4 <robot_stop>
		  xTaskNotifyGive(patio2EngineAppHandle);
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <patio2RangeFcn+0x30c>)
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	2202      	movs	r2, #2
 8002246:	2100      	movs	r1, #0
 8002248:	f009 fb0c 	bl	800b864 <xTaskGenericNotify>
		  break;
 800224c:	e024      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TURN_CORNER6:
		  right_forward_left_back();
 800224e:	f000 fedd 	bl	800300c <right_forward_left_back>
		  break;
 8002252:	e021      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_CORNER6:
		  move_forward();
 8002254:	f000 fe9e 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_L_A+GYRO_OFFSET*4, &pid);
 8002258:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800225c:	4619      	mov	r1, r3
 800225e:	481f      	ldr	r0, [pc, #124]	; (80022dc <patio2RangeFcn+0x310>)
 8002260:	f001 f872 	bl	8003348 <tune_velocity>
		  break;
 8002264:	e018      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_TRANS_INFO:
		  xTaskNotifyGive(patio2TransAppHandle);
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <patio2RangeFcn+0x314>)
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	2300      	movs	r3, #0
 800226c:	2202      	movs	r2, #2
 800226e:	2100      	movs	r1, #0
 8002270:	f009 faf8 	bl	800b864 <xTaskGenericNotify>
		  robot_stop();
 8002274:	f000 fe96 	bl	8002fa4 <robot_stop>
		  break;
 8002278:	e00e      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_TRANS:
		  move_forward();
 800227a:	f000 fe8b 	bl	8002f94 <move_forward>
		  tune_velocity(PATIO2_L_A+GYRO_OFFSET*4, &pid);
 800227e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002282:	4619      	mov	r1, r3
 8002284:	4815      	ldr	r0, [pc, #84]	; (80022dc <patio2RangeFcn+0x310>)
 8002286:	f001 f85f 	bl	8003348 <tune_velocity>
		  break;
 800228a:	e005      	b.n	8002298 <patio2RangeFcn+0x2cc>
	  case PATIO2_FINISH_TASK:
		  robot_stop();
 800228c:	f000 fe8a 	bl	8002fa4 <robot_stop>
 8002290:	e002      	b.n	8002298 <patio2RangeFcn+0x2cc>
		  break;
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <patio2RangeFcn+0x2cc>
		  break;
 8002296:	bf00      	nop
	  }
	  osDelay(15);
 8002298:	200f      	movs	r0, #15
 800229a:	f007 fd1d 	bl	8009cd8 <osDelay>

	  stack_debug(8);
 800229e:	2008      	movs	r0, #8
 80022a0:	f002 f920 	bl	80044e4 <stack_debug>
	  get_data_from_mpu(&tmp, &accX, &accY, &accZ, &gyroX, &gyroY, &gyroZ); // 获取数据
 80022a4:	e6b6      	b.n	8002014 <patio2RangeFcn+0x48>
 80022a6:	bf00      	nop
 80022a8:	3f99999a 	.word	0x3f99999a
 80022ac:	3e99999a 	.word	0x3e99999a
 80022b0:	40eae148 	.word	0x40eae148
 80022b4:	200002b4 	.word	0x200002b4
 80022b8:	43340000 	.word	0x43340000
 80022bc:	20000292 	.word	0x20000292
 80022c0:	42340000 	.word	0x42340000
 80022c4:	42b40000 	.word	0x42b40000
 80022c8:	43070000 	.word	0x43070000
 80022cc:	42b5999a 	.word	0x42b5999a
 80022d0:	3f4ccccd 	.word	0x3f4ccccd
 80022d4:	42b73333 	.word	0x42b73333
 80022d8:	200002c4 	.word	0x200002c4
 80022dc:	43373333 	.word	0x43373333
 80022e0:	200002c8 	.word	0x200002c8
 80022e4:	00000000 	.word	0x00000000

080022e8 <patio2Ultra1Fcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2Ultra1Fcn */
void patio2Ultra1Fcn(void *argument)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2Ultra1Fcn */
  /* Infinite loop */
  	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	2001      	movs	r0, #1
 80022f6:	f009 fa69 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P2U1_P");
#endif
//  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //
  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80022fa:	2104      	movs	r1, #4
 80022fc:	4822      	ldr	r0, [pc, #136]	; (8002388 <patio2Ultra1Fcn+0xa0>)
 80022fe:	f005 ff99 	bl	8008234 <HAL_TIM_IC_Start_IT>
#ifdef MY_DEBUG_START
  	start_info_debug("ul1_cap");
#endif
  	uint32_t pulse=0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  	float dis=0;
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
    for(;;)
    {
  	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	2001      	movs	r0, #1
 8002312:	f009 fa5b 	bl	800b7cc <ulTaskNotifyTake>
  	  pulse = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2);
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <patio2Ultra1Fcn+0xa0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	60fb      	str	r3, [r7, #12]
  	  dis = (float)pulse * 0.001*170; //
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7fe fd28 	bl	8000d74 <__aeabi_ui2f>
 8002324:	4603      	mov	r3, r0
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8ee 	bl	8000508 <__aeabi_f2d>
 800232c:	a314      	add	r3, pc, #80	; (adr r3, 8002380 <patio2Ultra1Fcn+0x98>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe f941 	bl	80005b8 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <patio2Ultra1Fcn+0xa4>)
 8002344:	f7fe f938 	bl	80005b8 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fc0a 	bl	8000b68 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	60bb      	str	r3, [r7, #8]
  	  if(dis > 2){
 8002358:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800235c:	68b8      	ldr	r0, [r7, #8]
 800235e:	f7fe ff1d 	bl	800119c <__aeabi_fcmpgt>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <patio2Ultra1Fcn+0x8a>
  		  fifo_queue(ultra1dis, 5, dis);
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	2105      	movs	r1, #5
 800236c:	4808      	ldr	r0, [pc, #32]	; (8002390 <patio2Ultra1Fcn+0xa8>)
 800236e:	f001 ffa1 	bl	80042b4 <fifo_queue>
  	  uint8_t bufferDis[20]={0};
  	  sprintf((char*)bufferDis, "P2U1Dis:%4.3f\n", dis);
  	  HAL_UART_Transmit(&huart5, bufferDis, 18, 20);
#endif

  	  stack_debug(9);
 8002372:	2009      	movs	r0, #9
 8002374:	f002 f8b6 	bl	80044e4 <stack_debug>
  	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //
 8002378:	e7c8      	b.n	800230c <patio2Ultra1Fcn+0x24>
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w
 8002380:	d2f1a9fc 	.word	0xd2f1a9fc
 8002384:	3f50624d 	.word	0x3f50624d
 8002388:	2000040c 	.word	0x2000040c
 800238c:	40654000 	.word	0x40654000
 8002390:	20000000 	.word	0x20000000

08002394 <patio2EngineFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2EngineFcn */
void patio2EngineFcn(void *argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2EngineFcn */
  /* Infinite loop */

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	2001      	movs	r0, #1
 80023a2:	f009 fa13 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
	  start_info_debug("P2ENG_P");
#endif
	  patio2_engine_open();
 80023a6:	f001 ff3d 	bl	8004224 <patio2_engine_open>

	  osDelay(1000);
 80023aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ae:	f007 fc93 	bl	8009cd8 <osDelay>
	  finishBasketFlag = 1;
 80023b2:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <patio2EngineFcn+0x2c>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]

	  stack_debug(10);
 80023b8:	200a      	movs	r0, #10
 80023ba:	f002 f893 	bl	80044e4 <stack_debug>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80023be:	e7ed      	b.n	800239c <patio2EngineFcn+0x8>
 80023c0:	20000293 	.word	0x20000293

080023c4 <patio2TransFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2TransFcn */
void patio2TransFcn(void *argument)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2TransFcn */
  /* Infinite loop */

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	2001      	movs	r0, #1
 80023d2:	f009 f9fb 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P2RNG_P");
#endif

	  read_time();
 80023d6:	f001 ff99 	bl	800430c <read_time>
	  osDelay(1000);
 80023da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023de:	f007 fc7b 	bl	8009cd8 <osDelay>
	  finishTransFlag = 1;
 80023e2:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <patio2TransFcn+0x2c>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]

	  stack_debug(11);
 80023e8:	200b      	movs	r0, #11
 80023ea:	f002 f87b 	bl	80044e4 <stack_debug>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80023ee:	e7ed      	b.n	80023cc <patio2TransFcn+0x8>
 80023f0:	20000294 	.word	0x20000294
 80023f4:	00000000 	.word	0x00000000

080023f8 <patio2Ultra2Fcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_patio2Ultra2Fcn */
void patio2Ultra2Fcn(void *argument)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN patio2Ultra2Fcn */
  /* Infinite loop */
  	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	2001      	movs	r0, #1
 8002406:	f009 f9e1 	bl	800b7cc <ulTaskNotifyTake>
#ifdef MY_DEBUG_START
  	start_info_debug("P2U2_P");
#endif
//  	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1); //
  	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 800240a:	2104      	movs	r1, #4
 800240c:	4822      	ldr	r0, [pc, #136]	; (8002498 <patio2Ultra2Fcn+0xa0>)
 800240e:	f005 ff11 	bl	8008234 <HAL_TIM_IC_Start_IT>
#ifdef MY_DEBUG_START
  	start_info_debug("ul2_cap");
#endif
  	uint32_t pulse=0;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  	float dis=0;
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
    for(;;)
    {
  	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	2001      	movs	r0, #1
 8002422:	f009 f9d3 	bl	800b7cc <ulTaskNotifyTake>
  	  pulse = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_2);
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <patio2Ultra2Fcn+0xa0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	60fb      	str	r3, [r7, #12]
  	  dis = (float)pulse * 0.001*170; //
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7fe fca0 	bl	8000d74 <__aeabi_ui2f>
 8002434:	4603      	mov	r3, r0
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f866 	bl	8000508 <__aeabi_f2d>
 800243c:	a314      	add	r3, pc, #80	; (adr r3, 8002490 <patio2Ultra2Fcn+0x98>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe f8b9 	bl	80005b8 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <patio2Ultra2Fcn+0xa4>)
 8002454:	f7fe f8b0 	bl	80005b8 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fb82 	bl	8000b68 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
 8002466:	60bb      	str	r3, [r7, #8]
  	  if(dis > 2){
 8002468:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800246c:	68b8      	ldr	r0, [r7, #8]
 800246e:	f7fe fe95 	bl	800119c <__aeabi_fcmpgt>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <patio2Ultra2Fcn+0x8a>
  		  fifo_queue(ultra2dis, 3, dis);
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	2103      	movs	r1, #3
 800247c:	4808      	ldr	r0, [pc, #32]	; (80024a0 <patio2Ultra2Fcn+0xa8>)
 800247e:	f001 ff19 	bl	80042b4 <fifo_queue>
#ifdef MY_DEBUG_OUT_ULTRA_INFO
  	  uint8_t bufferDis[20]={0};
  	  sprintf((char*)bufferDis, "P2U2Dis:%4.3f\n", dis);
  	  HAL_UART_Transmit(&huart5, bufferDis, 18, 20);
#endif
  	  stack_debug(12);
 8002482:	200c      	movs	r0, #12
 8002484:	f002 f82e 	bl	80044e4 <stack_debug>
  	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //
 8002488:	e7c8      	b.n	800241c <patio2Ultra2Fcn+0x24>
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w
 8002490:	d2f1a9fc 	.word	0xd2f1a9fc
 8002494:	3f50624d 	.word	0x3f50624d
 8002498:	2000052c 	.word	0x2000052c
 800249c:	40654000 	.word	0x40654000
 80024a0:	20000014 	.word	0x20000014

080024a4 <write_to_mpu>:
/* USER CODE BEGIN Application */


/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void write_to_mpu(uint16_t subadd, uint8_t data){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af04      	add	r7, sp, #16
 80024aa:	4603      	mov	r3, r0
 80024ac:	460a      	mov	r2, r1
 80024ae:	80fb      	strh	r3, [r7, #6]
 80024b0:	4613      	mov	r3, r2
 80024b2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE_ADDRESS1, subadd, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80024b4:	88fa      	ldrh	r2, [r7, #6]
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	2301      	movs	r3, #1
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	1d7b      	adds	r3, r7, #5
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2301      	movs	r3, #1
 80024c6:	21d0      	movs	r1, #208	; 0xd0
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <write_to_mpu+0x4c>)
 80024ca:	f004 f88d 	bl	80065e8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE_ADDRESS2, subadd, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	2301      	movs	r3, #1
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	1d7b      	adds	r3, r7, #5
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2301      	movs	r3, #1
 80024e0:	21d2      	movs	r1, #210	; 0xd2
 80024e2:	4803      	ldr	r0, [pc, #12]	; (80024f0 <write_to_mpu+0x4c>)
 80024e4:	f004 f880 	bl	80065e8 <HAL_I2C_Mem_Write>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200002d0 	.word	0x200002d0

080024f4 <mpu_ini>:

void mpu_ini(){ // using i2c to initialize the mpu
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	write_to_mpu(BATT_1_ADDRESS, 0x81);
 80024f8:	2181      	movs	r1, #129	; 0x81
 80024fa:	206b      	movs	r0, #107	; 0x6b
 80024fc:	f7ff ffd2 	bl	80024a4 <write_to_mpu>
	HAL_Delay(100); // wait to ensure mpu is reset
 8002500:	2064      	movs	r0, #100	; 0x64
 8002502:	f003 fa41 	bl	8005988 <HAL_Delay>
	write_to_mpu(BATT_1_ADDRESS, 0x00);
 8002506:	2100      	movs	r1, #0
 8002508:	206b      	movs	r0, #107	; 0x6b
 800250a:	f7ff ffcb 	bl	80024a4 <write_to_mpu>
	write_to_mpu(GYRO_CON_ADDRESS, 0x00); // +250 degree range
 800250e:	2100      	movs	r1, #0
 8002510:	201b      	movs	r0, #27
 8002512:	f7ff ffc7 	bl	80024a4 <write_to_mpu>
	write_to_mpu(ACC_CON_ADDRESS, 0x00); // +-2g range
 8002516:	2100      	movs	r1, #0
 8002518:	201c      	movs	r0, #28
 800251a:	f7ff ffc3 	bl	80024a4 <write_to_mpu>
	write_to_mpu(FIFO_ADDRESS, 0x00);
 800251e:	2100      	movs	r1, #0
 8002520:	2023      	movs	r0, #35	; 0x23
 8002522:	f7ff ffbf 	bl	80024a4 <write_to_mpu>
	write_to_mpu(SAMP_FREQ_DIV_ADDRESS, 0x18); // sampling frequency is 40Hz
 8002526:	2118      	movs	r1, #24
 8002528:	2019      	movs	r0, #25
 800252a:	f7ff ffbb 	bl	80024a4 <write_to_mpu>
	write_to_mpu(CON_ADDRESS, 0x04);
 800252e:	2104      	movs	r1, #4
 8002530:	201a      	movs	r0, #26
 8002532:	f7ff ffb7 	bl	80024a4 <write_to_mpu>
	write_to_mpu(INT_EN_ADDRESS, 0x00); // disable the interrupt
 8002536:	2100      	movs	r1, #0
 8002538:	2038      	movs	r0, #56	; 0x38
 800253a:	f7ff ffb3 	bl	80024a4 <write_to_mpu>
//	write_to_mpu(BATT_1_ADDRESS, 0x01);
	write_to_mpu(BATT_2_ADDRESS, 0x00); // use all measure modules
 800253e:	2100      	movs	r1, #0
 8002540:	206c      	movs	r0, #108	; 0x6c
 8002542:	f7ff ffaf 	bl	80024a4 <write_to_mpu>
#ifdef MY_DEBUG_START
	start_info_debug("MPU_INI");
#endif
	HAL_Delay(100);
 8002546:	2064      	movs	r0, #100	; 0x64
 8002548:	f003 fa1e 	bl	8005988 <HAL_Delay>
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <read_from_mpu>:

void read_from_mpu(uint16_t subadd, uint8_t* buffer1, uint8_t* buffer2, uint16_t length){
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af04      	add	r7, sp, #16
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	461a      	mov	r2, r3
 800255c:	4603      	mov	r3, r0
 800255e:	81fb      	strh	r3, [r7, #14]
 8002560:	4613      	mov	r3, r2
 8002562:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, MPU_WRITE_ADDRESS1, subadd, I2C_MEMADD_SIZE_8BIT, buffer1, length, HAL_MAX_DELAY);
 8002564:	89fa      	ldrh	r2, [r7, #14]
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	89bb      	ldrh	r3, [r7, #12]
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	21d0      	movs	r1, #208	; 0xd0
 8002578:	4809      	ldr	r0, [pc, #36]	; (80025a0 <read_from_mpu+0x50>)
 800257a:	f004 f92f 	bl	80067dc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU_WRITE_ADDRESS2, subadd, I2C_MEMADD_SIZE_8BIT, buffer2, length, HAL_MAX_DELAY);
 800257e:	89fa      	ldrh	r2, [r7, #14]
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	89bb      	ldrh	r3, [r7, #12]
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2301      	movs	r3, #1
 8002590:	21d2      	movs	r1, #210	; 0xd2
 8002592:	4803      	ldr	r0, [pc, #12]	; (80025a0 <read_from_mpu+0x50>)
 8002594:	f004 f922 	bl	80067dc <HAL_I2C_Mem_Read>
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200002d0 	.word	0x200002d0

080025a4 <read_data_from_mpu>:

void read_data_from_mpu(uint16_t subadd, int16_t *data1, int16_t* data2){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer1[2], buffer2[2];

	read_from_mpu(subadd, buffer1, buffer2, 2);
 80025b2:	f107 0210 	add.w	r2, r7, #16
 80025b6:	f107 0114 	add.w	r1, r7, #20
 80025ba:	89f8      	ldrh	r0, [r7, #14]
 80025bc:	2302      	movs	r3, #2
 80025be:	f7ff ffc7 	bl	8002550 <read_from_mpu>
	*data1 = (uint16_t)(buffer1[0]<<8|buffer1[1]); // bit operation to get another type data
 80025c2:	7d3b      	ldrb	r3, [r7, #20]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	7d7b      	ldrb	r3, [r7, #21]
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	801a      	strh	r2, [r3, #0]
	*data2 = (uint16_t)(buffer2[0]<<8|buffer2[1]);
 80025d4:	7c3b      	ldrb	r3, [r7, #16]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	7c7b      	ldrb	r3, [r7, #17]
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	801a      	strh	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <calculate_error>:

void calculate_error(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
	int16_t acc_x1, acc_y1, acc_z1, gyro_x1, gyro_y1, gyro_z1;
	int16_t acc_x2, acc_y2, acc_z2, gyro_x2, gyro_y2, gyro_z2;

	read_data_from_mpu(ACC_ADDRESS, &acc_x1, &acc_x2);
 80025f6:	f107 020a 	add.w	r2, r7, #10
 80025fa:	f107 0316 	add.w	r3, r7, #22
 80025fe:	4619      	mov	r1, r3
 8002600:	203b      	movs	r0, #59	; 0x3b
 8002602:	f7ff ffcf 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(ACC_ADDRESS+2, &acc_y1, &acc_y2);
 8002606:	f107 0208 	add.w	r2, r7, #8
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	203d      	movs	r0, #61	; 0x3d
 8002612:	f7ff ffc7 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(ACC_ADDRESS+4, &acc_z1, &acc_z2);
 8002616:	1dba      	adds	r2, r7, #6
 8002618:	f107 0312 	add.w	r3, r7, #18
 800261c:	4619      	mov	r1, r3
 800261e:	203f      	movs	r0, #63	; 0x3f
 8002620:	f7ff ffc0 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(GYRO_ADDRESS, &gyro_x1, &gyro_x2);
 8002624:	1d3a      	adds	r2, r7, #4
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	4619      	mov	r1, r3
 800262c:	2043      	movs	r0, #67	; 0x43
 800262e:	f7ff ffb9 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(GYRO_ADDRESS+2, &gyro_y1, &gyro_y2);
 8002632:	1cba      	adds	r2, r7, #2
 8002634:	f107 030e 	add.w	r3, r7, #14
 8002638:	4619      	mov	r1, r3
 800263a:	2045      	movs	r0, #69	; 0x45
 800263c:	f7ff ffb2 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(GYRO_ADDRESS+4, &gyro_z1, &gyro_z2);
 8002640:	463a      	mov	r2, r7
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4619      	mov	r1, r3
 8002648:	2047      	movs	r0, #71	; 0x47
 800264a:	f7ff ffab 	bl	80025a4 <read_data_from_mpu>

	acc_xE1 = (float)acc_x1/16384*G; // relative error
 800264e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fb92 	bl	8000d7c <__aeabi_i2f>
 8002658:	4603      	mov	r3, r0
 800265a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc94 	bl	8000f8c <__aeabi_fdiv>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff4e 	bl	8000508 <__aeabi_f2d>
 800266c:	a3a2      	add	r3, pc, #648	; (adr r3, 80028f8 <calculate_error+0x308>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd ffa1 	bl	80005b8 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fa73 	bl	8000b68 <__aeabi_d2f>
 8002682:	4603      	mov	r3, r0
 8002684:	4aa0      	ldr	r2, [pc, #640]	; (8002908 <calculate_error+0x318>)
 8002686:	6013      	str	r3, [r2, #0]
	acc_yE1 = (float)acc_y1/16384*G;
 8002688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fb75 	bl	8000d7c <__aeabi_i2f>
 8002692:	4603      	mov	r3, r0
 8002694:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fc77 	bl	8000f8c <__aeabi_fdiv>
 800269e:	4603      	mov	r3, r0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff31 	bl	8000508 <__aeabi_f2d>
 80026a6:	a394      	add	r3, pc, #592	; (adr r3, 80028f8 <calculate_error+0x308>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ff84 	bl	80005b8 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe fa56 	bl	8000b68 <__aeabi_d2f>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a93      	ldr	r2, [pc, #588]	; (800290c <calculate_error+0x31c>)
 80026c0:	6013      	str	r3, [r2, #0]
	acc_zE1 = (float)acc_z1/16384*G - G;
 80026c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fb58 	bl	8000d7c <__aeabi_i2f>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fc5a 	bl	8000f8c <__aeabi_fdiv>
 80026d8:	4603      	mov	r3, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff14 	bl	8000508 <__aeabi_f2d>
 80026e0:	a385      	add	r3, pc, #532	; (adr r3, 80028f8 <calculate_error+0x308>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff67 	bl	80005b8 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	a381      	add	r3, pc, #516	; (adr r3, 80028f8 <calculate_error+0x308>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fda6 	bl	8000248 <__aeabi_dsub>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe fa30 	bl	8000b68 <__aeabi_d2f>
 8002708:	4603      	mov	r3, r0
 800270a:	4a81      	ldr	r2, [pc, #516]	; (8002910 <calculate_error+0x320>)
 800270c:	6013      	str	r3, [r2, #0]
	gyro_xE1 = (float)gyro_x1/131.07;
 800270e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fb32 	bl	8000d7c <__aeabi_i2f>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fef4 	bl	8000508 <__aeabi_f2d>
 8002720:	a377      	add	r3, pc, #476	; (adr r3, 8002900 <calculate_error+0x310>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fe f871 	bl	800080c <__aeabi_ddiv>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa19 	bl	8000b68 <__aeabi_d2f>
 8002736:	4603      	mov	r3, r0
 8002738:	4a76      	ldr	r2, [pc, #472]	; (8002914 <calculate_error+0x324>)
 800273a:	6013      	str	r3, [r2, #0]
	gyro_yE1 = (float)gyro_y1/131.07;
 800273c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fb1b 	bl	8000d7c <__aeabi_i2f>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fedd 	bl	8000508 <__aeabi_f2d>
 800274e:	a36c      	add	r3, pc, #432	; (adr r3, 8002900 <calculate_error+0x310>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fe f85a 	bl	800080c <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa02 	bl	8000b68 <__aeabi_d2f>
 8002764:	4603      	mov	r3, r0
 8002766:	4a6c      	ldr	r2, [pc, #432]	; (8002918 <calculate_error+0x328>)
 8002768:	6013      	str	r3, [r2, #0]
	gyro_zE1 = (float)gyro_z1/131.07;
 800276a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fb04 	bl	8000d7c <__aeabi_i2f>
 8002774:	4603      	mov	r3, r0
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fec6 	bl	8000508 <__aeabi_f2d>
 800277c:	a360      	add	r3, pc, #384	; (adr r3, 8002900 <calculate_error+0x310>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fe f843 	bl	800080c <__aeabi_ddiv>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe f9eb 	bl	8000b68 <__aeabi_d2f>
 8002792:	4603      	mov	r3, r0
 8002794:	4a61      	ldr	r2, [pc, #388]	; (800291c <calculate_error+0x32c>)
 8002796:	6013      	str	r3, [r2, #0]

	acc_xE2 = (float)-acc_x2/16384*G; // relative error
 8002798:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800279c:	425b      	negs	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe faec 	bl	8000d7c <__aeabi_i2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fbee 	bl	8000f8c <__aeabi_fdiv>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fea8 	bl	8000508 <__aeabi_f2d>
 80027b8:	a34f      	add	r3, pc, #316	; (adr r3, 80028f8 <calculate_error+0x308>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd fefb 	bl	80005b8 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe f9cd 	bl	8000b68 <__aeabi_d2f>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a53      	ldr	r2, [pc, #332]	; (8002920 <calculate_error+0x330>)
 80027d2:	6013      	str	r3, [r2, #0]
	acc_yE2 = (float)-acc_y2/16384*G;
 80027d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80027d8:	425b      	negs	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe face 	bl	8000d7c <__aeabi_i2f>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fbd0 	bl	8000f8c <__aeabi_fdiv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe8a 	bl	8000508 <__aeabi_f2d>
 80027f4:	a340      	add	r3, pc, #256	; (adr r3, 80028f8 <calculate_error+0x308>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fedd 	bl	80005b8 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe f9af 	bl	8000b68 <__aeabi_d2f>
 800280a:	4603      	mov	r3, r0
 800280c:	4a45      	ldr	r2, [pc, #276]	; (8002924 <calculate_error+0x334>)
 800280e:	6013      	str	r3, [r2, #0]
	acc_zE2 = (float)-acc_z2/16384*G + G;
 8002810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002814:	425b      	negs	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fab0 	bl	8000d7c <__aeabi_i2f>
 800281c:	4603      	mov	r3, r0
 800281e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fbb2 	bl	8000f8c <__aeabi_fdiv>
 8002828:	4603      	mov	r3, r0
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fe6c 	bl	8000508 <__aeabi_f2d>
 8002830:	a331      	add	r3, pc, #196	; (adr r3, 80028f8 <calculate_error+0x308>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd febf 	bl	80005b8 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	a32d      	add	r3, pc, #180	; (adr r3, 80028f8 <calculate_error+0x308>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fd00 	bl	800024c <__adddf3>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f988 	bl	8000b68 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	4a33      	ldr	r2, [pc, #204]	; (8002928 <calculate_error+0x338>)
 800285c:	6013      	str	r3, [r2, #0]
	gyro_xE2 = (float)-gyro_x2/131.07;
 800285e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002862:	425b      	negs	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fa89 	bl	8000d7c <__aeabi_i2f>
 800286a:	4603      	mov	r3, r0
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe4b 	bl	8000508 <__aeabi_f2d>
 8002872:	a323      	add	r3, pc, #140	; (adr r3, 8002900 <calculate_error+0x310>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd ffc8 	bl	800080c <__aeabi_ddiv>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f970 	bl	8000b68 <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4a28      	ldr	r2, [pc, #160]	; (800292c <calculate_error+0x33c>)
 800288c:	6013      	str	r3, [r2, #0]
	gyro_yE2 = (float)-gyro_y2/131.07;
 800288e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002892:	425b      	negs	r3, r3
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fa71 	bl	8000d7c <__aeabi_i2f>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe33 	bl	8000508 <__aeabi_f2d>
 80028a2:	a317      	add	r3, pc, #92	; (adr r3, 8002900 <calculate_error+0x310>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd ffb0 	bl	800080c <__aeabi_ddiv>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f958 	bl	8000b68 <__aeabi_d2f>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <calculate_error+0x340>)
 80028bc:	6013      	str	r3, [r2, #0]
	gyro_zE2 = (float)-gyro_z2/131.07;
 80028be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80028c2:	425b      	negs	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fa59 	bl	8000d7c <__aeabi_i2f>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fe1b 	bl	8000508 <__aeabi_f2d>
 80028d2:	a30b      	add	r3, pc, #44	; (adr r3, 8002900 <calculate_error+0x310>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd ff98 	bl	800080c <__aeabi_ddiv>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe f940 	bl	8000b68 <__aeabi_d2f>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <calculate_error+0x344>)
 80028ec:	6013      	str	r3, [r2, #0]
#ifdef MY_DEBUG_START
	start_info_debug("MPU_ERROR");
#endif
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	28f5c28f 	.word	0x28f5c28f
 80028fc:	40238f5c 	.word	0x40238f5c
 8002900:	70a3d70a 	.word	0x70a3d70a
 8002904:	4060623d 	.word	0x4060623d
 8002908:	20000258 	.word	0x20000258
 800290c:	2000025c 	.word	0x2000025c
 8002910:	20000260 	.word	0x20000260
 8002914:	20000264 	.word	0x20000264
 8002918:	20000268 	.word	0x20000268
 800291c:	2000026c 	.word	0x2000026c
 8002920:	20000270 	.word	0x20000270
 8002924:	20000274 	.word	0x20000274
 8002928:	20000278 	.word	0x20000278
 800292c:	2000027c 	.word	0x2000027c
 8002930:	20000280 	.word	0x20000280
 8002934:	20000284 	.word	0x20000284

08002938 <get_data_from_mpu>:

void get_data_from_mpu(float*tmpF, float*acc_xF, float*acc_yF, float*acc_zF, float*gyro_xF, float*gyro_yF, float*gyro_zF){
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
	int16_t temp1, acc_x1, acc_y1, acc_z1, gyro_x1, gyro_y1, gyro_z1;
	int16_t temp2, acc_x2, acc_y2, acc_z2, gyro_x2, gyro_y2, gyro_z2;

	read_data_from_mpu(TEMP_ADDRESS, &temp1, &temp2);
 8002946:	f107 0220 	add.w	r2, r7, #32
 800294a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800294e:	4619      	mov	r1, r3
 8002950:	2041      	movs	r0, #65	; 0x41
 8002952:	f7ff fe27 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(ACC_ADDRESS, &acc_x1, &acc_x2);
 8002956:	f107 021e 	add.w	r2, r7, #30
 800295a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295e:	4619      	mov	r1, r3
 8002960:	203b      	movs	r0, #59	; 0x3b
 8002962:	f7ff fe1f 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(ACC_ADDRESS+2, &acc_y1, &acc_y2);
 8002966:	f107 021c 	add.w	r2, r7, #28
 800296a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800296e:	4619      	mov	r1, r3
 8002970:	203d      	movs	r0, #61	; 0x3d
 8002972:	f7ff fe17 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(ACC_ADDRESS+4, &acc_z1, &acc_z2);
 8002976:	f107 021a 	add.w	r2, r7, #26
 800297a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297e:	4619      	mov	r1, r3
 8002980:	203f      	movs	r0, #63	; 0x3f
 8002982:	f7ff fe0f 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(GYRO_ADDRESS, &gyro_x1, &gyro_x2);
 8002986:	f107 0218 	add.w	r2, r7, #24
 800298a:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800298e:	4619      	mov	r1, r3
 8002990:	2043      	movs	r0, #67	; 0x43
 8002992:	f7ff fe07 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(GYRO_ADDRESS+2, &gyro_y1, &gyro_y2);
 8002996:	f107 0216 	add.w	r2, r7, #22
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	2045      	movs	r0, #69	; 0x45
 80029a2:	f7ff fdff 	bl	80025a4 <read_data_from_mpu>
	read_data_from_mpu(GYRO_ADDRESS+4, &gyro_z1, &gyro_z2);
 80029a6:	f107 0214 	add.w	r2, r7, #20
 80029aa:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80029ae:	4619      	mov	r1, r3
 80029b0:	2047      	movs	r0, #71	; 0x47
 80029b2:	f7ff fdf7 	bl	80025a4 <read_data_from_mpu>

	*tmpF = ((float)temp1/340 + 36.53 - (float)temp2/340 + 36.53)/2;
 80029b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9de 	bl	8000d7c <__aeabi_i2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	49d5      	ldr	r1, [pc, #852]	; (8002d18 <get_data_from_mpu+0x3e0>)
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fae1 	bl	8000f8c <__aeabi_fdiv>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd9b 	bl	8000508 <__aeabi_f2d>
 80029d2:	a3cb      	add	r3, pc, #812	; (adr r3, 8002d00 <get_data_from_mpu+0x3c8>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fc38 	bl	800024c <__adddf3>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe f9c7 	bl	8000d7c <__aeabi_i2f>
 80029ee:	4603      	mov	r3, r0
 80029f0:	49c9      	ldr	r1, [pc, #804]	; (8002d18 <get_data_from_mpu+0x3e0>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe faca 	bl	8000f8c <__aeabi_fdiv>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fd84 	bl	8000508 <__aeabi_f2d>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fc1e 	bl	8000248 <__aeabi_dsub>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	a3ba      	add	r3, pc, #744	; (adr r3, 8002d00 <get_data_from_mpu+0x3c8>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f7fd fc17 	bl	800024c <__adddf3>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a2e:	f7fd feed 	bl	800080c <__aeabi_ddiv>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f895 	bl	8000b68 <__aeabi_d2f>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]
	*acc_xF = ((float)acc_x1/16384*G-acc_xE1 - (float)acc_x2/16384*G-acc_xE2)/2;
 8002a44:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f997 	bl	8000d7c <__aeabi_i2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fa99 	bl	8000f8c <__aeabi_fdiv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd53 	bl	8000508 <__aeabi_f2d>
 8002a62:	a3a9      	add	r3, pc, #676	; (adr r3, 8002d08 <get_data_from_mpu+0x3d0>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fda6 	bl	80005b8 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4614      	mov	r4, r2
 8002a72:	461d      	mov	r5, r3
 8002a74:	4ba9      	ldr	r3, [pc, #676]	; (8002d1c <get_data_from_mpu+0x3e4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd45 	bl	8000508 <__aeabi_f2d>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd fbdf 	bl	8000248 <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4614      	mov	r4, r2
 8002a90:	461d      	mov	r5, r3
 8002a92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f970 	bl	8000d7c <__aeabi_i2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fa72 	bl	8000f8c <__aeabi_fdiv>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd2c 	bl	8000508 <__aeabi_f2d>
 8002ab0:	a395      	add	r3, pc, #596	; (adr r3, 8002d08 <get_data_from_mpu+0x3d0>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fd7f 	bl	80005b8 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fbc1 	bl	8000248 <__aeabi_dsub>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4614      	mov	r4, r2
 8002acc:	461d      	mov	r5, r3
 8002ace:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <get_data_from_mpu+0x3e8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd18 	bl	8000508 <__aeabi_f2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbb2 	bl	8000248 <__aeabi_dsub>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af4:	f7fd fe8a 	bl	800080c <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fe f832 	bl	8000b68 <__aeabi_d2f>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	601a      	str	r2, [r3, #0]
	*acc_yF = ((float)acc_y1/16384*G-acc_yE1 - (float)acc_y2/16384*G-acc_yE2)/2;
 8002b0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f934 	bl	8000d7c <__aeabi_i2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fa36 	bl	8000f8c <__aeabi_fdiv>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fcf0 	bl	8000508 <__aeabi_f2d>
 8002b28:	a377      	add	r3, pc, #476	; (adr r3, 8002d08 <get_data_from_mpu+0x3d0>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fd43 	bl	80005b8 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4614      	mov	r4, r2
 8002b38:	461d      	mov	r5, r3
 8002b3a:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <get_data_from_mpu+0x3ec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fce2 	bl	8000508 <__aeabi_f2d>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fb7c 	bl	8000248 <__aeabi_dsub>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f90d 	bl	8000d7c <__aeabi_i2f>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fa0f 	bl	8000f8c <__aeabi_fdiv>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fcc9 	bl	8000508 <__aeabi_f2d>
 8002b76:	a364      	add	r3, pc, #400	; (adr r3, 8002d08 <get_data_from_mpu+0x3d0>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd1c 	bl	80005b8 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fb5e 	bl	8000248 <__aeabi_dsub>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <get_data_from_mpu+0x3f0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcb5 	bl	8000508 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fb4f 	bl	8000248 <__aeabi_dsub>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bba:	f7fd fe27 	bl	800080c <__aeabi_ddiv>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f7fd ffcf 	bl	8000b68 <__aeabi_d2f>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	601a      	str	r2, [r3, #0]
	*acc_zF = ((float)acc_z1/16384*G-acc_zE1 - (float)acc_z2/16384*G-acc_zE2)/2;
 8002bd0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f8d1 	bl	8000d7c <__aeabi_i2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f9d3 	bl	8000f8c <__aeabi_fdiv>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fc8d 	bl	8000508 <__aeabi_f2d>
 8002bee:	a346      	add	r3, pc, #280	; (adr r3, 8002d08 <get_data_from_mpu+0x3d0>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fce0 	bl	80005b8 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <get_data_from_mpu+0x3f4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc7f 	bl	8000508 <__aeabi_f2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	f7fd fb19 	bl	8000248 <__aeabi_dsub>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4614      	mov	r4, r2
 8002c1c:	461d      	mov	r5, r3
 8002c1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f8aa 	bl	8000d7c <__aeabi_i2f>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f9ac 	bl	8000f8c <__aeabi_fdiv>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fc66 	bl	8000508 <__aeabi_f2d>
 8002c3c:	a332      	add	r3, pc, #200	; (adr r3, 8002d08 <get_data_from_mpu+0x3d0>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fcb9 	bl	80005b8 <__aeabi_dmul>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7fd fafb 	bl	8000248 <__aeabi_dsub>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	461d      	mov	r5, r3
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <get_data_from_mpu+0x3f8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc52 	bl	8000508 <__aeabi_f2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd faec 	bl	8000248 <__aeabi_dsub>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c80:	f7fd fdc4 	bl	800080c <__aeabi_ddiv>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fd ff6c 	bl	8000b68 <__aeabi_d2f>
 8002c90:	4602      	mov	r2, r0
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	601a      	str	r2, [r3, #0]
	*gyro_xF = ((float)gyro_x1/131.07-gyro_xE1 - (float)gyro_x2/131.07-gyro_xE2)/2;
 8002c96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f86e 	bl	8000d7c <__aeabi_i2f>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc30 	bl	8000508 <__aeabi_f2d>
 8002ca8:	a319      	add	r3, pc, #100	; (adr r3, 8002d10 <get_data_from_mpu+0x3d8>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd fdad 	bl	800080c <__aeabi_ddiv>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4614      	mov	r4, r2
 8002cb8:	461d      	mov	r5, r3
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <get_data_from_mpu+0x3fc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc22 	bl	8000508 <__aeabi_f2d>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	f7fd fabc 	bl	8000248 <__aeabi_dsub>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f84d 	bl	8000d7c <__aeabi_i2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fc0f 	bl	8000508 <__aeabi_f2d>
 8002cea:	a309      	add	r3, pc, #36	; (adr r3, 8002d10 <get_data_from_mpu+0x3d8>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f7fd fd8c 	bl	800080c <__aeabi_ddiv>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	e01c      	b.n	8002d38 <get_data_from_mpu+0x400>
 8002cfe:	bf00      	nop
 8002d00:	0a3d70a4 	.word	0x0a3d70a4
 8002d04:	404243d7 	.word	0x404243d7
 8002d08:	28f5c28f 	.word	0x28f5c28f
 8002d0c:	40238f5c 	.word	0x40238f5c
 8002d10:	70a3d70a 	.word	0x70a3d70a
 8002d14:	4060623d 	.word	0x4060623d
 8002d18:	43aa0000 	.word	0x43aa0000
 8002d1c:	20000258 	.word	0x20000258
 8002d20:	20000270 	.word	0x20000270
 8002d24:	2000025c 	.word	0x2000025c
 8002d28:	20000274 	.word	0x20000274
 8002d2c:	20000260 	.word	0x20000260
 8002d30:	20000278 	.word	0x20000278
 8002d34:	20000264 	.word	0x20000264
 8002d38:	f7fd fa86 	bl	8000248 <__aeabi_dsub>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <get_data_from_mpu+0x5b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fbdd 	bl	8000508 <__aeabi_f2d>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7fd fa77 	bl	8000248 <__aeabi_dsub>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d6a:	f7fd fd4f 	bl	800080c <__aeabi_ddiv>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd fef7 	bl	8000b68 <__aeabi_d2f>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
	*gyro_yF = ((float)gyro_y1/131.07-gyro_yE1 - (float)gyro_y2/131.07-gyro_yE2)/2;
 8002d80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fff9 	bl	8000d7c <__aeabi_i2f>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbbb 	bl	8000508 <__aeabi_f2d>
 8002d92:	a355      	add	r3, pc, #340	; (adr r3, 8002ee8 <get_data_from_mpu+0x5b0>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fd38 	bl	800080c <__aeabi_ddiv>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4614      	mov	r4, r2
 8002da2:	461d      	mov	r5, r3
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <get_data_from_mpu+0x5bc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbad 	bl	8000508 <__aeabi_f2d>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd fa47 	bl	8000248 <__aeabi_dsub>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4614      	mov	r4, r2
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd ffd8 	bl	8000d7c <__aeabi_i2f>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fb9a 	bl	8000508 <__aeabi_f2d>
 8002dd4:	a344      	add	r3, pc, #272	; (adr r3, 8002ee8 <get_data_from_mpu+0x5b0>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fd17 	bl	800080c <__aeabi_ddiv>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa2f 	bl	8000248 <__aeabi_dsub>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4614      	mov	r4, r2
 8002df0:	461d      	mov	r5, r3
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <get_data_from_mpu+0x5c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb86 	bl	8000508 <__aeabi_f2d>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4620      	mov	r0, r4
 8002e02:	4629      	mov	r1, r5
 8002e04:	f7fd fa20 	bl	8000248 <__aeabi_dsub>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e18:	f7fd fcf8 	bl	800080c <__aeabi_ddiv>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7fd fea0 	bl	8000b68 <__aeabi_d2f>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2c:	601a      	str	r2, [r3, #0]
	*gyro_zF = ((float)gyro_z1/131.07-gyro_zE1 - (float)gyro_z2/131.07-gyro_zE2)/2;
 8002e2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd ffa2 	bl	8000d7c <__aeabi_i2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb64 	bl	8000508 <__aeabi_f2d>
 8002e40:	a329      	add	r3, pc, #164	; (adr r3, 8002ee8 <get_data_from_mpu+0x5b0>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f7fd fce1 	bl	800080c <__aeabi_ddiv>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4614      	mov	r4, r2
 8002e50:	461d      	mov	r5, r3
 8002e52:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <get_data_from_mpu+0x5c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb56 	bl	8000508 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd f9f0 	bl	8000248 <__aeabi_dsub>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	461d      	mov	r5, r3
 8002e70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd ff81 	bl	8000d7c <__aeabi_i2f>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb43 	bl	8000508 <__aeabi_f2d>
 8002e82:	a319      	add	r3, pc, #100	; (adr r3, 8002ee8 <get_data_from_mpu+0x5b0>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd fcc0 	bl	800080c <__aeabi_ddiv>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd f9d8 	bl	8000248 <__aeabi_dsub>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <get_data_from_mpu+0x5c8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb2f 	bl	8000508 <__aeabi_f2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd f9c9 	bl	8000248 <__aeabi_dsub>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ec6:	f7fd fca1 	bl	800080c <__aeabi_ddiv>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fe49 	bl	8000b68 <__aeabi_d2f>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eda:	601a      	str	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	3730      	adds	r7, #48	; 0x30
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	70a3d70a 	.word	0x70a3d70a
 8002eec:	4060623d 	.word	0x4060623d
 8002ef0:	2000027c 	.word	0x2000027c
 8002ef4:	20000268 	.word	0x20000268
 8002ef8:	20000280 	.word	0x20000280
 8002efc:	2000026c 	.word	0x2000026c
 8002f00:	20000284 	.word	0x20000284

08002f04 <right_back>:

void right_back(){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2108      	movs	r1, #8
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <right_back+0x1c>)
 8002f0e:	f003 fa0e 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 8002f12:	2201      	movs	r2, #1
 8002f14:	2110      	movs	r1, #16
 8002f16:	4802      	ldr	r0, [pc, #8]	; (8002f20 <right_back+0x1c>)
 8002f18:	f003 fa09 	bl	800632e <HAL_GPIO_WritePin>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40011c00 	.word	0x40011c00

08002f24 <left_back>:
void left_back(){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4804      	ldr	r0, [pc, #16]	; (8002f40 <left_back+0x1c>)
 8002f2e:	f003 f9fe 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 8002f32:	2201      	movs	r2, #1
 8002f34:	2104      	movs	r1, #4
 8002f36:	4802      	ldr	r0, [pc, #8]	; (8002f40 <left_back+0x1c>)
 8002f38:	f003 f9f9 	bl	800632e <HAL_GPIO_WritePin>
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40011c00 	.word	0x40011c00

08002f44 <move_back>:
void move_back(){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	right_back();
 8002f48:	f7ff ffdc 	bl	8002f04 <right_back>
	left_back();
 8002f4c:	f7ff ffea 	bl	8002f24 <left_back>
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <right_forward>:
void right_forward(){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <right_forward+0x1c>)
 8002f5e:	f003 f9e6 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2110      	movs	r1, #16
 8002f66:	4802      	ldr	r0, [pc, #8]	; (8002f70 <right_forward+0x1c>)
 8002f68:	f003 f9e1 	bl	800632e <HAL_GPIO_WritePin>
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40011c00 	.word	0x40011c00

08002f74 <left_forward>:
void left_forward(){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	4804      	ldr	r0, [pc, #16]	; (8002f90 <left_forward+0x1c>)
 8002f7e:	f003 f9d6 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2104      	movs	r1, #4
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <left_forward+0x1c>)
 8002f88:	f003 f9d1 	bl	800632e <HAL_GPIO_WritePin>
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40011c00 	.word	0x40011c00

08002f94 <move_forward>:
void move_forward(){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	right_forward();
 8002f98:	f7ff ffdc 	bl	8002f54 <right_forward>
	left_forward();
 8002f9c:	f7ff ffea 	bl	8002f74 <left_forward>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <robot_stop>:
void robot_stop(){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2108      	movs	r1, #8
 8002fac:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <robot_stop+0x30>)
 8002fae:	f003 f9be 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <robot_stop+0x30>)
 8002fb8:	f003 f9b9 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <robot_stop+0x30>)
 8002fc2:	f003 f9b4 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2104      	movs	r1, #4
 8002fca:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <robot_stop+0x30>)
 8002fcc:	f003 f9af 	bl	800632e <HAL_GPIO_WritePin>
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40011c00 	.word	0x40011c00

08002fd8 <left_forward_right_back>:
	HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
}

void left_forward_right_back(){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2108      	movs	r1, #8
 8002fe0:	4809      	ldr	r0, [pc, #36]	; (8003008 <left_forward_right_back+0x30>)
 8002fe2:	f003 f9a4 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2110      	movs	r1, #16
 8002fea:	4807      	ldr	r0, [pc, #28]	; (8003008 <left_forward_right_back+0x30>)
 8002fec:	f003 f99f 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4804      	ldr	r0, [pc, #16]	; (8003008 <left_forward_right_back+0x30>)
 8002ff6:	f003 f99a 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4802      	ldr	r0, [pc, #8]	; (8003008 <left_forward_right_back+0x30>)
 8003000:	f003 f995 	bl	800632e <HAL_GPIO_WritePin>
}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40011c00 	.word	0x40011c00

0800300c <right_forward_left_back>:
void right_forward_left_back(){
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 8003010:	2201      	movs	r2, #1
 8003012:	2108      	movs	r1, #8
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <right_forward_left_back+0x30>)
 8003016:	f003 f98a 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	2110      	movs	r1, #16
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <right_forward_left_back+0x30>)
 8003020:	f003 f985 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	2102      	movs	r1, #2
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <right_forward_left_back+0x30>)
 800302a:	f003 f980 	bl	800632e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 800302e:	2201      	movs	r2, #1
 8003030:	2104      	movs	r1, #4
 8003032:	4802      	ldr	r0, [pc, #8]	; (800303c <right_forward_left_back+0x30>)
 8003034:	f003 f97b 	bl	800632e <HAL_GPIO_WritePin>
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40011c00 	.word	0x40011c00

08003040 <pid_algorithm>:

int16_t pid_algorithm(float targetVel, PID* pidPtr, uint8_t whichW){
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	71fb      	strb	r3, [r7, #7]
	float deltaV;
	int16_t pulseChange;

	pidPtr->errorN2 = pidPtr->errorN1,pidPtr->errorN1 = pidPtr->errorN0, pidPtr->errorN0 = targetVel-pidPtr->velCurrent;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7fd fdd3 	bl	8000c10 <__aeabi_fsub>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	605a      	str	r2, [r3, #4]
	deltaV = pidPtr->kp*(pidPtr->errorN0 - pidPtr->errorN1) + pidPtr->ki*pidPtr->errorN0 + pidPtr->kd*(pidPtr->errorN0 - 2*pidPtr->errorN1 + pidPtr->errorN2);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691c      	ldr	r4, [r3, #16]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f7fd fdc5 	bl	8000c10 <__aeabi_fsub>
 8003086:	4603      	mov	r3, r0
 8003088:	4619      	mov	r1, r3
 800308a:	4620      	mov	r0, r4
 800308c:	f7fd feca 	bl	8000e24 <__aeabi_fmul>
 8003090:	4603      	mov	r3, r0
 8003092:	461c      	mov	r4, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fd fec0 	bl	8000e24 <__aeabi_fmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4619      	mov	r1, r3
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7fd fdb3 	bl	8000c14 <__addsf3>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461e      	mov	r6, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	699c      	ldr	r4, [r3, #24]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	685d      	ldr	r5, [r3, #4]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4619      	mov	r1, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fda7 	bl	8000c14 <__addsf3>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4619      	mov	r1, r3
 80030ca:	4628      	mov	r0, r5
 80030cc:	f7fd fda0 	bl	8000c10 <__aeabi_fsub>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7fd fd9a 	bl	8000c14 <__addsf3>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4619      	mov	r1, r3
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7fd fe9d 	bl	8000e24 <__aeabi_fmul>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4630      	mov	r0, r6
 80030f0:	f7fd fd90 	bl	8000c14 <__addsf3>
 80030f4:	4603      	mov	r3, r0
 80030f6:	617b      	str	r3, [r7, #20]

	pulseChange = calculate_pulse_from_vel(deltaV, whichW);
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	4619      	mov	r1, r3
 80030fc:	6978      	ldr	r0, [r7, #20]
 80030fe:	f000 f809 	bl	8003114 <calculate_pulse_from_vel>
 8003102:	4603      	mov	r3, r0
 8003104:	827b      	strh	r3, [r7, #18]

	return pulseChange;
 8003106:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800310a:	4618      	mov	r0, r3
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003114 <calculate_pulse_from_vel>:

int16_t calculate_pulse_from_vel(float vel, uint8_t whichW){
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
	int16_t pulse = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	817b      	strh	r3, [r7, #10]

	float maxSpeed = MAX_SPEED_RIGHT;
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <calculate_pulse_from_vel+0x54>)
 8003126:	60fb      	str	r3, [r7, #12]

	if(whichW == RIGHT_WHEEL)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d102      	bne.n	8003134 <calculate_pulse_from_vel+0x20>
		maxSpeed = MAX_SPEED_RIGHT;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <calculate_pulse_from_vel+0x54>)
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e004      	b.n	800313e <calculate_pulse_from_vel+0x2a>
	else if(whichW == LEFT_WHEEL)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d101      	bne.n	800313e <calculate_pulse_from_vel+0x2a>
		maxSpeed = MAX_SPEED_LEFT;
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <calculate_pulse_from_vel+0x58>)
 800313c:	60fb      	str	r3, [r7, #12]

	pulse = (int16_t)(vel/maxSpeed*MOTOR_PWM_PERIOD_PULSE);
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd ff23 	bl	8000f8c <__aeabi_fdiv>
 8003146:	4603      	mov	r3, r0
 8003148:	4909      	ldr	r1, [pc, #36]	; (8003170 <calculate_pulse_from_vel+0x5c>)
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fe6a 	bl	8000e24 <__aeabi_fmul>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe f82c 	bl	80011b0 <__aeabi_f2iz>
 8003158:	4603      	mov	r3, r0
 800315a:	817b      	strh	r3, [r7, #10]

	return pulse;
 800315c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	3f35c28f 	.word	0x3f35c28f
 800316c:	3f428f5c 	.word	0x3f428f5c
 8003170:	469c4000 	.word	0x469c4000

08003174 <calculate_vel_from_encoder>:

void calculate_vel_from_encoder(uint16_t encoder_data, PID* pidPtr, TickType_t t){
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	81fb      	strh	r3, [r7, #14]
	float roundPerSecond = 0;
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
	roundPerSecond = (float)encoder_data/(float)t*1000/1560/VEL_OFFSET; // 1560=4*13*30
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fdf2 	bl	8000d74 <__aeabi_ui2f>
 8003190:	4604      	mov	r4, r0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fdee 	bl	8000d74 <__aeabi_ui2f>
 8003198:	4603      	mov	r3, r0
 800319a:	4619      	mov	r1, r3
 800319c:	4620      	mov	r0, r4
 800319e:	f7fd fef5 	bl	8000f8c <__aeabi_fdiv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4911      	ldr	r1, [pc, #68]	; (80031ec <calculate_vel_from_encoder+0x78>)
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fe3c 	bl	8000e24 <__aeabi_fmul>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4910      	ldr	r1, [pc, #64]	; (80031f0 <calculate_vel_from_encoder+0x7c>)
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd feeb 	bl	8000f8c <__aeabi_fdiv>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f9a5 	bl	8000508 <__aeabi_f2d>
 80031be:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <calculate_vel_from_encoder+0x80>)
 80031c4:	f7fd fb22 	bl	800080c <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fcca 	bl	8000b68 <__aeabi_d2f>
 80031d4:	4603      	mov	r3, r0
 80031d6:	617b      	str	r3, [r7, #20]
	pidPtr->velCurrent = vel_from_round(roundPerSecond);
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	f000 f80d 	bl	80031f8 <vel_from_round>
 80031de:	4602      	mov	r2, r0
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	447a0000 	.word	0x447a0000
 80031f0:	44c30000 	.word	0x44c30000
 80031f4:	3ff33333 	.word	0x3ff33333

080031f8 <vel_from_round>:

float vel_from_round(float round){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	float vel = 0;
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
	vel = round*DIS_PER_ROUND;
 8003206:	4912      	ldr	r1, [pc, #72]	; (8003250 <vel_from_round+0x58>)
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fd fe0b 	bl	8000e24 <__aeabi_fmul>
 800320e:	4603      	mov	r3, r0
 8003210:	4619      	mov	r1, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fcfe 	bl	8000c14 <__addsf3>
 8003218:	4603      	mov	r3, r0
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f974 	bl	8000508 <__aeabi_f2d>
 8003220:	a309      	add	r3, pc, #36	; (adr r3, 8003248 <vel_from_round+0x50>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd f9c7 	bl	80005b8 <__aeabi_dmul>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f7fd fc99 	bl	8000b68 <__aeabi_d2f>
 8003236:	4603      	mov	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]

	return vel;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	f3af 8000 	nop.w
 8003248:	c083126f 	.word	0xc083126f
 800324c:	400921ca 	.word	0x400921ca
 8003250:	3ca3d70a 	.word	0x3ca3d70a
 8003254:	00000000 	.word	0x00000000

08003258 <calculate_pos>:

void calculate_pos(float acc_x, float gyro_z, uint32_t t_gap){
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	float t=(float)t_gap;
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd fd85 	bl	8000d74 <__aeabi_ui2f>
 800326a:	4603      	mov	r3, r0
 800326c:	617b      	str	r3, [r7, #20]
	float zTmp;

	gyro_z = gyro_z<=0?(gyro_z<-MPU_GYRO_ERROR?gyro_z:0):(gyro_z>MPU_GYRO_ERROR?gyro_z:0);
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	68b8      	ldr	r0, [r7, #8]
 8003274:	f7fd ff7e 	bl	8001174 <__aeabi_fcmple>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <calculate_pos+0x46>
 800327e:	68b8      	ldr	r0, [r7, #8]
 8003280:	f7fd f942 	bl	8000508 <__aeabi_f2d>
 8003284:	a326      	add	r3, pc, #152	; (adr r3, 8003320 <calculate_pos+0xc8>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd fc07 	bl	8000a9c <__aeabi_dcmplt>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <calculate_pos+0x40>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	e011      	b.n	80032bc <calculate_pos+0x64>
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e00e      	b.n	80032bc <calculate_pos+0x64>
 800329e:	68b8      	ldr	r0, [r7, #8]
 80032a0:	f7fd f932 	bl	8000508 <__aeabi_f2d>
 80032a4:	a320      	add	r3, pc, #128	; (adr r3, 8003328 <calculate_pos+0xd0>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd fc15 	bl	8000ad8 <__aeabi_dcmpgt>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <calculate_pos+0x60>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	e001      	b.n	80032bc <calculate_pos+0x64>
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
	zTmp = gyro_z*t/1000*ANGLE_PARA;
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	68b8      	ldr	r0, [r7, #8]
 80032c2:	f7fd fdaf 	bl	8000e24 <__aeabi_fmul>
 80032c6:	4603      	mov	r3, r0
 80032c8:	491b      	ldr	r1, [pc, #108]	; (8003338 <calculate_pos+0xe0>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd fe5e 	bl	8000f8c <__aeabi_fdiv>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f918 	bl	8000508 <__aeabi_f2d>
 80032d8:	a315      	add	r3, pc, #84	; (adr r3, 8003330 <calculate_pos+0xd8>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f7fd f96b 	bl	80005b8 <__aeabi_dmul>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	f7fd fc3d 	bl	8000b68 <__aeabi_d2f>
 80032ee:	4603      	mov	r3, r0
 80032f0:	613b      	str	r3, [r7, #16]
	zAngle += zTmp;
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <calculate_pos+0xe4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6939      	ldr	r1, [r7, #16]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fc8b 	bl	8000c14 <__addsf3>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <calculate_pos+0xe4>)
 8003304:	601a      	str	r2, [r3, #0]
	uint8_t buffer[20]={0};
	sprintf((char*)buffer, "zAngle=%03.5f\n", zAngle);
	HAL_UART_Transmit(&huart5, buffer, 18, 20);
#endif

	tAll += t_gap;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <calculate_pos+0xe8>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <calculate_pos+0xe8>)
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	f3af 8000 	nop.w
 8003320:	33333333 	.word	0x33333333
 8003324:	bfd33333 	.word	0xbfd33333
 8003328:	33333333 	.word	0x33333333
 800332c:	3fd33333 	.word	0x3fd33333
 8003330:	851eb852 	.word	0x851eb852
 8003334:	3ff051eb 	.word	0x3ff051eb
 8003338:	447a0000 	.word	0x447a0000
 800333c:	20000288 	.word	0x20000288
 8003340:	2000028c 	.word	0x2000028c
 8003344:	00000000 	.word	0x00000000

08003348 <tune_velocity>:

void tune_velocity(float targetAngle, PID* pidPtr){
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	float P1vL, P1vR, P2vL, P2vR;
	float ultraV = 0;
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
	float deltaA = zAngle - targetAngle;
 8003358:	4b95      	ldr	r3, [pc, #596]	; (80035b0 <tune_velocity+0x268>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fc56 	bl	8000c10 <__aeabi_fsub>
 8003364:	4603      	mov	r3, r0
 8003366:	623b      	str	r3, [r7, #32]
	if(deltaA < -135 || deltaA > 135)
 8003368:	4992      	ldr	r1, [pc, #584]	; (80035b4 <tune_velocity+0x26c>)
 800336a:	6a38      	ldr	r0, [r7, #32]
 800336c:	f7fd fef8 	bl	8001160 <__aeabi_fcmplt>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <tune_velocity+0x3c>
 8003376:	4990      	ldr	r1, [pc, #576]	; (80035b8 <tune_velocity+0x270>)
 8003378:	6a38      	ldr	r0, [r7, #32]
 800337a:	f7fd ff0f 	bl	800119c <__aeabi_fcmpgt>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <tune_velocity+0x46>
		deltaA = -zAngle;
 8003384:	4b8a      	ldr	r3, [pc, #552]	; (80035b0 <tune_velocity+0x268>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800338c:	623b      	str	r3, [r7, #32]
	float deltaV = pid_algorithm_ang(deltaA, pidPtr);
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	6a38      	ldr	r0, [r7, #32]
 8003392:	f000 f921 	bl	80035d8 <pid_algorithm_ang>
 8003396:	61b8      	str	r0, [r7, #24]
	float u2Dis = calculate_weight_average(ultra2dis, 3);
 8003398:	2103      	movs	r1, #3
 800339a:	4888      	ldr	r0, [pc, #544]	; (80035bc <tune_velocity+0x274>)
 800339c:	f000 ff5e 	bl	800425c <calculate_weight_average>
 80033a0:	61f8      	str	r0, [r7, #28]

	if(which_patio == PATIO_2){
 80033a2:	4b87      	ldr	r3, [pc, #540]	; (80035c0 <tune_velocity+0x278>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d131      	bne.n	800340e <tune_velocity+0xc6>
		if(u2Dis < DIS_MARGIN){
 80033aa:	4986      	ldr	r1, [pc, #536]	; (80035c4 <tune_velocity+0x27c>)
 80033ac:	69f8      	ldr	r0, [r7, #28]
 80033ae:	f7fd fed7 	bl	8001160 <__aeabi_fcmplt>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d027      	beq.n	8003408 <tune_velocity+0xc0>
			ultraV = tanh(DIS_MARGIN-u2Dis)*MAX_TUNE_SPEED*2;
 80033b8:	69f9      	ldr	r1, [r7, #28]
 80033ba:	4882      	ldr	r0, [pc, #520]	; (80035c4 <tune_velocity+0x27c>)
 80033bc:	f7fd fc28 	bl	8000c10 <__aeabi_fsub>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f8a0 	bl	8000508 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	f00c fb5e 	bl	800fa90 <tanh>
 80033d4:	a370      	add	r3, pc, #448	; (adr r3, 8003598 <tune_velocity+0x250>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd f8ed 	bl	80005b8 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	f7fc ff2f 	bl	800024c <__adddf3>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7fd fbb7 	bl	8000b68 <__aeabi_d2f>
 80033fa:	4603      	mov	r3, r0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
			ultraV = -ultraV;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	e004      	b.n	8003412 <tune_velocity+0xca>
		}else{
			u2Dis = DIS_MARGIN;
 8003408:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <tune_velocity+0x27c>)
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e001      	b.n	8003412 <tune_velocity+0xca>
		}
	}else{
		u2Dis = DIS_MARGIN;
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <tune_velocity+0x27c>)
 8003410:	61fb      	str	r3, [r7, #28]
	}

	P2vL = REAL_MAX_SPEED + u2Dis/DIS_MARGIN*deltaV + (DIS_MARGIN-u2Dis)/DIS_MARGIN*ultraV;
 8003412:	496c      	ldr	r1, [pc, #432]	; (80035c4 <tune_velocity+0x27c>)
 8003414:	69f8      	ldr	r0, [r7, #28]
 8003416:	f7fd fdb9 	bl	8000f8c <__aeabi_fdiv>
 800341a:	4603      	mov	r3, r0
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fd00 	bl	8000e24 <__aeabi_fmul>
 8003424:	4603      	mov	r3, r0
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f86e 	bl	8000508 <__aeabi_f2d>
 800342c:	a35c      	add	r3, pc, #368	; (adr r3, 80035a0 <tune_velocity+0x258>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fc ff0b 	bl	800024c <__adddf3>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	69f9      	ldr	r1, [r7, #28]
 8003440:	4860      	ldr	r0, [pc, #384]	; (80035c4 <tune_velocity+0x27c>)
 8003442:	f7fd fbe5 	bl	8000c10 <__aeabi_fsub>
 8003446:	4603      	mov	r3, r0
 8003448:	495e      	ldr	r1, [pc, #376]	; (80035c4 <tune_velocity+0x27c>)
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd fd9e 	bl	8000f8c <__aeabi_fdiv>
 8003450:	4603      	mov	r3, r0
 8003452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fce5 	bl	8000e24 <__aeabi_fmul>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f853 	bl	8000508 <__aeabi_f2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fc feef 	bl	800024c <__adddf3>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fb77 	bl	8000b68 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	617b      	str	r3, [r7, #20]
	P2vR = REAL_MAX_SPEED - u2Dis/DIS_MARGIN*deltaV - (DIS_MARGIN-u2Dis)/DIS_MARGIN*ultraV;
 800347e:	4951      	ldr	r1, [pc, #324]	; (80035c4 <tune_velocity+0x27c>)
 8003480:	69f8      	ldr	r0, [r7, #28]
 8003482:	f7fd fd83 	bl	8000f8c <__aeabi_fdiv>
 8003486:	4603      	mov	r3, r0
 8003488:	69b9      	ldr	r1, [r7, #24]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fcca 	bl	8000e24 <__aeabi_fmul>
 8003490:	4603      	mov	r3, r0
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd f838 	bl	8000508 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	a140      	add	r1, pc, #256	; (adr r1, 80035a0 <tune_velocity+0x258>)
 800349e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034a2:	f7fc fed1 	bl	8000248 <__aeabi_dsub>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4614      	mov	r4, r2
 80034ac:	461d      	mov	r5, r3
 80034ae:	69f9      	ldr	r1, [r7, #28]
 80034b0:	4844      	ldr	r0, [pc, #272]	; (80035c4 <tune_velocity+0x27c>)
 80034b2:	f7fd fbad 	bl	8000c10 <__aeabi_fsub>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4942      	ldr	r1, [pc, #264]	; (80035c4 <tune_velocity+0x27c>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fd66 	bl	8000f8c <__aeabi_fdiv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fcad 	bl	8000e24 <__aeabi_fmul>
 80034ca:	4603      	mov	r3, r0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f81b 	bl	8000508 <__aeabi_f2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4620      	mov	r0, r4
 80034d8:	4629      	mov	r1, r5
 80034da:	f7fc feb5 	bl	8000248 <__aeabi_dsub>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7fd fb3f 	bl	8000b68 <__aeabi_d2f>
 80034ea:	4603      	mov	r3, r0
 80034ec:	613b      	str	r3, [r7, #16]

	P1vL = P1_V+deltaV+P1deltaV;
 80034ee:	69b8      	ldr	r0, [r7, #24]
 80034f0:	f7fd f80a 	bl	8000508 <__aeabi_f2d>
 80034f4:	a32c      	add	r3, pc, #176	; (adr r3, 80035a8 <tune_velocity+0x260>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f7fc fea7 	bl	800024c <__adddf3>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4614      	mov	r4, r2
 8003504:	461d      	mov	r5, r3
 8003506:	4b30      	ldr	r3, [pc, #192]	; (80035c8 <tune_velocity+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc fffc 	bl	8000508 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fc fe98 	bl	800024c <__adddf3>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fd fb20 	bl	8000b68 <__aeabi_d2f>
 8003528:	4603      	mov	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
	P1vR = P1_V-deltaV-P1deltaV;
 800352c:	69b8      	ldr	r0, [r7, #24]
 800352e:	f7fc ffeb 	bl	8000508 <__aeabi_f2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	a11c      	add	r1, pc, #112	; (adr r1, 80035a8 <tune_velocity+0x260>)
 8003538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800353c:	f7fc fe84 	bl	8000248 <__aeabi_dsub>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4614      	mov	r4, r2
 8003546:	461d      	mov	r5, r3
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <tune_velocity+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc ffdb 	bl	8000508 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	f7fc fe75 	bl	8000248 <__aeabi_dsub>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f7fd faff 	bl	8000b68 <__aeabi_d2f>
 800356a:	4603      	mov	r3, r0
 800356c:	60bb      	str	r3, [r7, #8]
	if(which_patio == PATIO_2){
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <tune_velocity+0x278>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d106      	bne.n	8003584 <tune_velocity+0x23c>
		targetVelL = P2vL;
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <tune_velocity+0x284>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6013      	str	r3, [r2, #0]
		targetVelR = P2vR;
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <tune_velocity+0x288>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6013      	str	r3, [r2, #0]
	sprintf((char*)bufferVelR, "targetVRight:%1.3f\n", targetVelR);
	HAL_UART_Transmit(&huart5, bufferVelR, 20, 20);
	sprintf((char*)bufferUlV, "ultraV:%1.3f\n", ultraV);
	HAL_UART_Transmit(&huart5, bufferUlV, 20, 20);
#endif
}
 8003582:	e005      	b.n	8003590 <tune_velocity+0x248>
		targetVelL = P1vL;
 8003584:	4a11      	ldr	r2, [pc, #68]	; (80035cc <tune_velocity+0x284>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6013      	str	r3, [r2, #0]
		targetVelR = P1vR;
 800358a:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <tune_velocity+0x288>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6013      	str	r3, [r2, #0]
}
 8003590:	bf00      	nop
 8003592:	3728      	adds	r7, #40	; 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bdb0      	pop	{r4, r5, r7, pc}
 8003598:	eb851eb8 	.word	0xeb851eb8
 800359c:	3faeb851 	.word	0x3faeb851
 80035a0:	9999999a 	.word	0x9999999a
 80035a4:	3fc99999 	.word	0x3fc99999
 80035a8:	33333333 	.word	0x33333333
 80035ac:	3fd33333 	.word	0x3fd33333
 80035b0:	20000288 	.word	0x20000288
 80035b4:	c3070000 	.word	0xc3070000
 80035b8:	43070000 	.word	0x43070000
 80035bc:	20000014 	.word	0x20000014
 80035c0:	20000254 	.word	0x20000254
 80035c4:	41a00000 	.word	0x41a00000
 80035c8:	20000298 	.word	0x20000298
 80035cc:	20000024 	.word	0x20000024
 80035d0:	20000020 	.word	0x20000020
 80035d4:	00000000 	.word	0x00000000

080035d8 <pid_algorithm_ang>:

float pid_algorithm_ang(float deltaAng, PID* pidPtr){
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
	float deltaA = 0;
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]

	pidPtr->errorN1 = pidPtr->errorN0;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	609a      	str	r2, [r3, #8]
	pidPtr->errorN0 = deltaAng;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	605a      	str	r2, [r3, #4]

	deltaA = pidPtr->kp*pidPtr->errorN0 + pidPtr->kd*(pidPtr->errorN0 - pidPtr->errorN1);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f7fd fc0e 	bl	8000e24 <__aeabi_fmul>
 8003608:	4603      	mov	r3, r0
 800360a:	4698      	mov	r8, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699e      	ldr	r6, [r3, #24]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fd faf8 	bl	8000c10 <__aeabi_fsub>
 8003620:	4603      	mov	r3, r0
 8003622:	4619      	mov	r1, r3
 8003624:	4630      	mov	r0, r6
 8003626:	f7fd fbfd 	bl	8000e24 <__aeabi_fmul>
 800362a:	4603      	mov	r3, r0
 800362c:	4619      	mov	r1, r3
 800362e:	4640      	mov	r0, r8
 8003630:	f7fd faf0 	bl	8000c14 <__addsf3>
 8003634:	4603      	mov	r3, r0
 8003636:	60bb      	str	r3, [r7, #8]

	deltaA = deltaA<-60?-60:deltaA;
 8003638:	494f      	ldr	r1, [pc, #316]	; (8003778 <pid_algorithm_ang+0x1a0>)
 800363a:	68b8      	ldr	r0, [r7, #8]
 800363c:	f7fd fd90 	bl	8001160 <__aeabi_fcmplt>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <pid_algorithm_ang+0x72>
 8003646:	4b4c      	ldr	r3, [pc, #304]	; (8003778 <pid_algorithm_ang+0x1a0>)
 8003648:	e000      	b.n	800364c <pid_algorithm_ang+0x74>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	60bb      	str	r3, [r7, #8]
	deltaA = deltaA>60?60:deltaA;
 800364e:	494b      	ldr	r1, [pc, #300]	; (800377c <pid_algorithm_ang+0x1a4>)
 8003650:	68b8      	ldr	r0, [r7, #8]
 8003652:	f7fd fda3 	bl	800119c <__aeabi_fcmpgt>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <pid_algorithm_ang+0x88>
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <pid_algorithm_ang+0x1a4>)
 800365e:	e000      	b.n	8003662 <pid_algorithm_ang+0x8a>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	60bb      	str	r3, [r7, #8]

	float deltaV = sin(PI/180*deltaA);
 8003664:	68b8      	ldr	r0, [r7, #8]
 8003666:	f7fc ff4f 	bl	8000508 <__aeabi_f2d>
 800366a:	a33d      	add	r3, pc, #244	; (adr r3, 8003760 <pid_algorithm_ang+0x188>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f7fc ffa2 	bl	80005b8 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f00c f9c2 	bl	800fa04 <sin>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f7fd fa6e 	bl	8000b68 <__aeabi_d2f>
 800368c:	4603      	mov	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]
	if(deltaV >= 0)
 8003690:	f04f 0100 	mov.w	r1, #0
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7fd fd77 	bl	8001188 <__aeabi_fcmpge>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <pid_algorithm_ang+0x100>
		deltaV = exp(deltaV+DELTA_OFFSET)-exp(DELTA_OFFSET);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7fc ff31 	bl	8000508 <__aeabi_f2d>
 80036a6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <pid_algorithm_ang+0x1a8>)
 80036ac:	f7fc fdce 	bl	800024c <__adddf3>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f00c fa62 	bl	800fb80 <exp>
 80036bc:	a32a      	add	r3, pc, #168	; (adr r3, 8003768 <pid_algorithm_ang+0x190>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f7fc fdc1 	bl	8000248 <__aeabi_dsub>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	f7fd fa4b 	bl	8000b68 <__aeabi_d2f>
 80036d2:	4603      	mov	r3, r0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e024      	b.n	8003722 <pid_algorithm_ang+0x14a>
	else
		deltaV = -exp(-deltaV+DELTA_OFFSET)-exp(DELTA_OFFSET);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fc ff12 	bl	8000508 <__aeabi_f2d>
 80036e4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <pid_algorithm_ang+0x1a8>)
 80036ea:	f7fc fdaf 	bl	800024c <__adddf3>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	f00c fa43 	bl	800fb80 <exp>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4614      	mov	r4, r2
 8003700:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003704:	a318      	add	r3, pc, #96	; (adr r3, 8003768 <pid_algorithm_ang+0x190>)
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	4620      	mov	r0, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f7fc fd9b 	bl	8000248 <__aeabi_dsub>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd fa25 	bl	8000b68 <__aeabi_d2f>
 800371e:	4603      	mov	r3, r0
 8003720:	60fb      	str	r3, [r7, #12]
	deltaV = tanh(deltaV)*MAX_TUNE_SPEED;
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7fc fef0 	bl	8000508 <__aeabi_f2d>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f00c f9ae 	bl	800fa90 <tanh>
 8003734:	a30e      	add	r3, pc, #56	; (adr r3, 8003770 <pid_algorithm_ang+0x198>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f7fc ff3d 	bl	80005b8 <__aeabi_dmul>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f7fd fa0f 	bl	8000b68 <__aeabi_d2f>
 800374a:	4603      	mov	r3, r0
 800374c:	60fb      	str	r3, [r7, #12]

	return deltaV;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800375a:	bf00      	nop
 800375c:	f3af 8000 	nop.w
 8003760:	171ea105 	.word	0x171ea105
 8003764:	3f91df24 	.word	0x3f91df24
 8003768:	761065a4 	.word	0x761065a4
 800376c:	400a8f99 	.word	0x400a8f99
 8003770:	eb851eb8 	.word	0xeb851eb8
 8003774:	3faeb851 	.word	0x3faeb851
 8003778:	c2700000 	.word	0xc2700000
 800377c:	42700000 	.word	0x42700000
 8003780:	3ff33333 	.word	0x3ff33333
 8003784:	00000000 	.word	0x00000000

08003788 <patio1_calculate_targetVel>:

void patio1_calculate_targetVel(int theta, int rho){
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
	float deltaV = 0;
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

	deltaV = WHEEL_GAP*REAL_MAX_SPEED*sin(PI/90*theta)/CAMERA_FRONT;
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fc fea3 	bl	80004e4 <__aeabi_i2d>
 800379e:	a314      	add	r3, pc, #80	; (adr r3, 80037f0 <patio1_calculate_targetVel+0x68>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fc ff08 	bl	80005b8 <__aeabi_dmul>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f00c f928 	bl	800fa04 <sin>
 80037b4:	a310      	add	r3, pc, #64	; (adr r3, 80037f8 <patio1_calculate_targetVel+0x70>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fc fefd 	bl	80005b8 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <patio1_calculate_targetVel+0x78>)
 80037cc:	f7fd f81e 	bl	800080c <__aeabi_ddiv>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f9c6 	bl	8000b68 <__aeabi_d2f>
 80037dc:	4603      	mov	r3, r0
 80037de:	60fb      	str	r3, [r7, #12]
//	deltaV = deltaV<-MAX_TUNE_SPEED*3?-MAX_TUNE_SPEED*3:deltaV;
//	deltaV = deltaV>MAX_TUNE_SPEED*3?MAX_TUNE_SPEED*3:deltaV;

	P1deltaV = deltaV;
 80037e0:	4a08      	ldr	r2, [pc, #32]	; (8003804 <patio1_calculate_targetVel+0x7c>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart5, bufferVelL, 20, 20);
	sprintf((char*)bufferVelR, "targetVRight:%1.3f\n", targetVelR);
	HAL_UART_Transmit(&huart5, bufferVelR, 20, 20);
#endif

	return;
 80037e6:	bf00      	nop
}
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	171ea105 	.word	0x171ea105
 80037f4:	3fa1df24 	.word	0x3fa1df24
 80037f8:	33333334 	.word	0x33333334
 80037fc:	40133333 	.word	0x40133333
 8003800:	40380000 	.word	0x40380000
 8003804:	20000298 	.word	0x20000298

08003808 <patio1_compare_pos>:

uint8_t patio1_compare_pos(){
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

	switch(patio1Tasks){
 800380c:	4b90      	ldr	r3, [pc, #576]	; (8003a50 <patio1_compare_pos+0x248>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b0e      	cmp	r3, #14
 8003812:	f200 8119 	bhi.w	8003a48 <patio1_compare_pos+0x240>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <patio1_compare_pos+0x14>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003859 	.word	0x08003859
 8003820:	08003867 	.word	0x08003867
 8003824:	08003887 	.word	0x08003887
 8003828:	080038a7 	.word	0x080038a7
 800382c:	080038c7 	.word	0x080038c7
 8003830:	080038e7 	.word	0x080038e7
 8003834:	08003907 	.word	0x08003907
 8003838:	08003927 	.word	0x08003927
 800383c:	08003947 	.word	0x08003947
 8003840:	08003967 	.word	0x08003967
 8003844:	080039a3 	.word	0x080039a3
 8003848:	080039c9 	.word	0x080039c9
 800384c:	08003a05 	.word	0x08003a05
 8003850:	08003a2b 	.word	0x08003a2b
 8003854:	08003a45 	.word	0x08003a45
	case 0:
		patio1Tasks = 1;
 8003858:	4b7d      	ldr	r3, [pc, #500]	; (8003a50 <patio1_compare_pos+0x248>)
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
		tAll = 0;
 800385e:	4b7d      	ldr	r3, [pc, #500]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
		break;
 8003864:	e0f0      	b.n	8003a48 <patio1_compare_pos+0x240>
	case 1:
		if(tAll < P1_1_T){
 8003866:	4b7b      	ldr	r3, [pc, #492]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f243 42bb 	movw	r2, #13499	; 0x34bb
 800386e:	4293      	cmp	r3, r2
 8003870:	d801      	bhi.n	8003876 <patio1_compare_pos+0x6e>
			return P1_1;
 8003872:	2301      	movs	r3, #1
 8003874:	e0e9      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 2;
 8003876:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <patio1_compare_pos+0x248>)
 8003878:	2202      	movs	r2, #2
 800387a:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 800387c:	4b75      	ldr	r3, [pc, #468]	; (8003a54 <patio1_compare_pos+0x24c>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
			return P1_2;
 8003882:	2302      	movs	r3, #2
 8003884:	e0e1      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 2:
		if(tAll < P1_2_T){
 8003886:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f640 2227 	movw	r2, #2599	; 0xa27
 800388e:	4293      	cmp	r3, r2
 8003890:	d801      	bhi.n	8003896 <patio1_compare_pos+0x8e>
			return P1_2;
 8003892:	2302      	movs	r3, #2
 8003894:	e0d9      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 3;
 8003896:	4b6e      	ldr	r3, [pc, #440]	; (8003a50 <patio1_compare_pos+0x248>)
 8003898:	2203      	movs	r2, #3
 800389a:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 800389c:	4b6d      	ldr	r3, [pc, #436]	; (8003a54 <patio1_compare_pos+0x24c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
			return P1_3;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0d1      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 3:
		if(tAll < P1_3_T){
 80038a6:	4b6b      	ldr	r3, [pc, #428]	; (8003a54 <patio1_compare_pos+0x24c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f642 4223 	movw	r2, #11299	; 0x2c23
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d801      	bhi.n	80038b6 <patio1_compare_pos+0xae>
			return P1_3;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0c9      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 4;
 80038b6:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <patio1_compare_pos+0x248>)
 80038b8:	2204      	movs	r2, #4
 80038ba:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 80038bc:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <patio1_compare_pos+0x24c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
			return P1_4;
 80038c2:	2304      	movs	r3, #4
 80038c4:	e0c1      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 4:
		if(tAll < P1_4_T){
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <patio1_compare_pos+0x24c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d801      	bhi.n	80038d6 <patio1_compare_pos+0xce>
			return P1_4;
 80038d2:	2304      	movs	r3, #4
 80038d4:	e0b9      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 5;
 80038d6:	4b5e      	ldr	r3, [pc, #376]	; (8003a50 <patio1_compare_pos+0x248>)
 80038d8:	2205      	movs	r2, #5
 80038da:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 80038dc:	4b5d      	ldr	r3, [pc, #372]	; (8003a54 <patio1_compare_pos+0x24c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
			return P1_5;
 80038e2:	2305      	movs	r3, #5
 80038e4:	e0b1      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 5:
		if(tAll < P1_5_T){
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <patio1_compare_pos+0x24c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f646 1277 	movw	r2, #26999	; 0x6977
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d801      	bhi.n	80038f6 <patio1_compare_pos+0xee>
			return P1_5;
 80038f2:	2305      	movs	r3, #5
 80038f4:	e0a9      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 6;
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <patio1_compare_pos+0x248>)
 80038f8:	2206      	movs	r2, #6
 80038fa:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 80038fc:	4b55      	ldr	r3, [pc, #340]	; (8003a54 <patio1_compare_pos+0x24c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
			return P1_6;
 8003902:	2306      	movs	r3, #6
 8003904:	e0a1      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 6:
		if(tAll < P1_6_T){
 8003906:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f640 2227 	movw	r2, #2599	; 0xa27
 800390e:	4293      	cmp	r3, r2
 8003910:	d801      	bhi.n	8003916 <patio1_compare_pos+0x10e>
			return P1_6;
 8003912:	2306      	movs	r3, #6
 8003914:	e099      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 7;
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <patio1_compare_pos+0x248>)
 8003918:	2207      	movs	r2, #7
 800391a:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 800391c:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <patio1_compare_pos+0x24c>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
			return P1_7;
 8003922:	2307      	movs	r3, #7
 8003924:	e091      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 7:
		if(tAll < P1_7_T){
 8003926:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f242 52e3 	movw	r2, #9699	; 0x25e3
 800392e:	4293      	cmp	r3, r2
 8003930:	d801      	bhi.n	8003936 <patio1_compare_pos+0x12e>
			return P1_7;
 8003932:	2307      	movs	r3, #7
 8003934:	e089      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 8;
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <patio1_compare_pos+0x248>)
 8003938:	2208      	movs	r2, #8
 800393a:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 800393c:	4b45      	ldr	r3, [pc, #276]	; (8003a54 <patio1_compare_pos+0x24c>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
			return P1_8;
 8003942:	2308      	movs	r3, #8
 8003944:	e081      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 8:
		if(tAll < P1_8_T){
 8003946:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f640 62d7 	movw	r2, #3799	; 0xed7
 800394e:	4293      	cmp	r3, r2
 8003950:	d801      	bhi.n	8003956 <patio1_compare_pos+0x14e>
			return P1_8;
 8003952:	2308      	movs	r3, #8
 8003954:	e079      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 9;
 8003956:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <patio1_compare_pos+0x248>)
 8003958:	2209      	movs	r2, #9
 800395a:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 800395c:	4b3d      	ldr	r3, [pc, #244]	; (8003a54 <patio1_compare_pos+0x24c>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
			return P1_9;
 8003962:	2309      	movs	r3, #9
 8003964:	e071      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 9:
		if(tAll < P1_9_T){
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f644 52bb 	movw	r2, #19899	; 0x4dbb
 800396e:	4293      	cmp	r3, r2
 8003970:	d801      	bhi.n	8003976 <patio1_compare_pos+0x16e>
			return P1_9;
 8003972:	2309      	movs	r3, #9
 8003974:	e069      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 8003976:	2105      	movs	r1, #5
 8003978:	4837      	ldr	r0, [pc, #220]	; (8003a58 <patio1_compare_pos+0x250>)
 800397a:	f000 fc6f 	bl	800425c <calculate_weight_average>
 800397e:	4603      	mov	r3, r0
 8003980:	4936      	ldr	r1, [pc, #216]	; (8003a5c <patio1_compare_pos+0x254>)
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fc0a 	bl	800119c <__aeabi_fcmpgt>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <patio1_compare_pos+0x18a>
			return P1_9;
 800398e:	2309      	movs	r3, #9
 8003990:	e05b      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 10;
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <patio1_compare_pos+0x248>)
 8003994:	220a      	movs	r2, #10
 8003996:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 8003998:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <patio1_compare_pos+0x24c>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
			return P1_10;
 800399e:	230a      	movs	r3, #10
 80039a0:	e053      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 10:
		if(zAngle > -90+CORNER_MARGIN*1.5){
 80039a2:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <patio1_compare_pos+0x258>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	492f      	ldr	r1, [pc, #188]	; (8003a64 <patio1_compare_pos+0x25c>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd fbf7 	bl	800119c <__aeabi_fcmpgt>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <patio1_compare_pos+0x1b0>
			return P1_10;
 80039b4:	230a      	movs	r3, #10
 80039b6:	e048      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 11;
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <patio1_compare_pos+0x248>)
 80039ba:	220b      	movs	r2, #11
 80039bc:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <patio1_compare_pos+0x24c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
			return P1_11;
 80039c4:	230b      	movs	r3, #11
 80039c6:	e040      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 11:
		if(tAll < P1_11_T){
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <patio1_compare_pos+0x24c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d801      	bhi.n	80039d8 <patio1_compare_pos+0x1d0>
			return P1_11;
 80039d4:	230b      	movs	r3, #11
 80039d6:	e038      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 80039d8:	2105      	movs	r1, #5
 80039da:	481f      	ldr	r0, [pc, #124]	; (8003a58 <patio1_compare_pos+0x250>)
 80039dc:	f000 fc3e 	bl	800425c <calculate_weight_average>
 80039e0:	4603      	mov	r3, r0
 80039e2:	491e      	ldr	r1, [pc, #120]	; (8003a5c <patio1_compare_pos+0x254>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fbd9 	bl	800119c <__aeabi_fcmpgt>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <patio1_compare_pos+0x1ec>
			return P1_11;
 80039f0:	230b      	movs	r3, #11
 80039f2:	e02a      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 12;
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <patio1_compare_pos+0x248>)
 80039f6:	220c      	movs	r2, #12
 80039f8:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <patio1_compare_pos+0x24c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
			return P1_12;
 8003a00:	230c      	movs	r3, #12
 8003a02:	e022      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 12:
		if(zAngle < 0-CORNER_MARGIN){
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <patio1_compare_pos+0x258>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4917      	ldr	r1, [pc, #92]	; (8003a68 <patio1_compare_pos+0x260>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd fba8 	bl	8001160 <__aeabi_fcmplt>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <patio1_compare_pos+0x212>
			return P1_12;
 8003a16:	230c      	movs	r3, #12
 8003a18:	e017      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 13;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <patio1_compare_pos+0x248>)
 8003a1c:	220d      	movs	r2, #13
 8003a1e:	701a      	strb	r2, [r3, #0]
			tAll = 0;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
			return P1_13;
 8003a26:	230d      	movs	r3, #13
 8003a28:	e00f      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 13:
		if(tAll < P1_13_T){
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <patio1_compare_pos+0x24c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f244 2267 	movw	r2, #16999	; 0x4267
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d801      	bhi.n	8003a3a <patio1_compare_pos+0x232>
			return P1_13;
 8003a36:	230d      	movs	r3, #13
 8003a38:	e007      	b.n	8003a4a <patio1_compare_pos+0x242>
		}else{
			patio1Tasks = 14;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <patio1_compare_pos+0x248>)
 8003a3c:	220e      	movs	r2, #14
 8003a3e:	701a      	strb	r2, [r3, #0]
			return P1_14;
 8003a40:	230e      	movs	r3, #14
 8003a42:	e002      	b.n	8003a4a <patio1_compare_pos+0x242>
		}
	case 14:
		return P1_14;
 8003a44:	230e      	movs	r3, #14
 8003a46:	e000      	b.n	8003a4a <patio1_compare_pos+0x242>
	}
	return PATIO_NOTHING;
 8003a48:	2363      	movs	r3, #99	; 0x63
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000290 	.word	0x20000290
 8003a54:	2000028c 	.word	0x2000028c
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	41a00000 	.word	0x41a00000
 8003a60:	20000288 	.word	0x20000288
 8003a64:	c2700000 	.word	0xc2700000
 8003a68:	c1a00000 	.word	0xc1a00000

08003a6c <patio1_need_pid_R>:


uint8_t patio1_need_pid_R(){
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	if(patio1_compare_pos()==P1_14)
 8003a70:	f7ff feca 	bl	8003808 <patio1_compare_pos>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b0e      	cmp	r3, #14
 8003a78:	d101      	bne.n	8003a7e <patio1_need_pid_R+0x12>
		return 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <patio1_need_pid_R+0x14>
	else
		return 1;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <patio1_need_pid_L>:

uint8_t patio1_need_pid_L(){
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	if(patio1_compare_pos()==P1_14)
 8003a88:	f7ff febe 	bl	8003808 <patio1_compare_pos>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b0e      	cmp	r3, #14
 8003a90:	d101      	bne.n	8003a96 <patio1_need_pid_L+0x12>
		return 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <patio1_need_pid_L+0x14>
	else
		return 1;
 8003a96:	2301      	movs	r3, #1
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <patio1_need_com>:

uint8_t patio1_need_com(){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
	switch(patio1_compare_pos()){
 8003aa0:	f7ff feb2 	bl	8003808 <patio1_compare_pos>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	3b02      	subs	r3, #2
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d81f      	bhi.n	8003aec <patio1_need_com+0x50>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <patio1_need_com+0x18>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003ae9 	.word	0x08003ae9
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003ae9 	.word	0x08003ae9
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003ae9 	.word	0x08003ae9
 8003ae0:	08003aed 	.word	0x08003aed
 8003ae4:	08003ae9 	.word	0x08003ae9
	case P1_8:
	case P1_10:
	case P1_11:
	case P1_12:
	case P1_14:
		return 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <patio1_need_com+0x52>
	}

	return 1;
 8003aec:	2301      	movs	r3, #1
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop

08003af4 <which_is_most>:

uint8_t which_is_most(uint8_t forward, uint8_t left, uint8_t right){
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
 8003afe:	460b      	mov	r3, r1
 8003b00:	71bb      	strb	r3, [r7, #6]
 8003b02:	4613      	mov	r3, r2
 8003b04:	717b      	strb	r3, [r7, #5]
	if(forward>=left && forward>=right)
 8003b06:	79fa      	ldrb	r2, [r7, #7]
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d305      	bcc.n	8003b1a <which_is_most+0x26>
 8003b0e:	79fa      	ldrb	r2, [r7, #7]
 8003b10:	797b      	ldrb	r3, [r7, #5]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d301      	bcc.n	8003b1a <which_is_most+0x26>
		return ARROW_FORWARD;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00a      	b.n	8003b30 <which_is_most+0x3c>
	else if(right>=forward && right>=left)
 8003b1a:	797a      	ldrb	r2, [r7, #5]
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d305      	bcc.n	8003b2e <which_is_most+0x3a>
 8003b22:	797a      	ldrb	r2, [r7, #5]
 8003b24:	79bb      	ldrb	r3, [r7, #6]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d301      	bcc.n	8003b2e <which_is_most+0x3a>
		return ARROW_RIGHT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e000      	b.n	8003b30 <which_is_most+0x3c>
	else
		return ARROW_LEFT;
 8003b2e:	2302      	movs	r3, #2
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
	...

08003b3c <patio2_compare_pos>:

uint8_t patio2_compare_pos(){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0

	switch(patio2Tasks){
 8003b40:	4ba1      	ldr	r3, [pc, #644]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b15      	cmp	r3, #21
 8003b46:	f200 82e7 	bhi.w	8004118 <patio2_compare_pos+0x5dc>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <patio2_compare_pos+0x14>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003bc9 	.word	0x08003bc9
 8003b58:	08003be5 	.word	0x08003be5
 8003b5c:	08003c01 	.word	0x08003c01
 8003b60:	08003c11 	.word	0x08003c11
 8003b64:	08003c99 	.word	0x08003c99
 8003b68:	08003d0f 	.word	0x08003d0f
 8003b6c:	08003d81 	.word	0x08003d81
 8003b70:	08003e1d 	.word	0x08003e1d
 8003b74:	08003e43 	.word	0x08003e43
 8003b78:	08003f0d 	.word	0x08003f0d
 8003b7c:	08003f33 	.word	0x08003f33
 8003b80:	08003f83 	.word	0x08003f83
 8003b84:	08003fa9 	.word	0x08003fa9
 8003b88:	08003fe5 	.word	0x08003fe5
 8003b8c:	0800400b 	.word	0x0800400b
 8003b90:	0800402b 	.word	0x0800402b
 8003b94:	08004047 	.word	0x08004047
 8003b98:	0800409d 	.word	0x0800409d
 8003b9c:	080040bd 	.word	0x080040bd
 8003ba0:	080040d9 	.word	0x080040d9
 8003ba4:	08004115 	.word	0x08004115
	case 0:
		if(tAll < PATIO2_OA_T){
 8003ba8:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <patio2_compare_pos+0x290>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f242 3227 	movw	r2, #8999	; 0x2327
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d801      	bhi.n	8003bb8 <patio2_compare_pos+0x7c>
			return PATIO2_MOVE_CLOSER;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e2b0      	b.n	800411a <patio2_compare_pos+0x5de>
		}else{
			patio2Tasks = 1;
 8003bb8:	4b83      	ldr	r3, [pc, #524]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
			start_info_debug("P2Recong");
#endif
			tAll = 0;
 8003bbe:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <patio2_compare_pos+0x290>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
			return PATIO2_RECOGNISE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e2a8      	b.n	800411a <patio2_compare_pos+0x5de>
		}
	case 1:
		if(patio2_recognise_finish == 1){
 8003bc8:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <patio2_compare_pos+0x294>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <patio2_compare_pos+0xa4>
			patio2Tasks = 2;
 8003bd0:	4b7d      	ldr	r3, [pc, #500]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
			start_info_debug("P2Knock");
#endif
			tAll = 0;
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <patio2_compare_pos+0x290>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
			return PATIO2_KNOCK_ARROW;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e29c      	b.n	800411a <patio2_compare_pos+0x5de>
		}else{
			return PATIO2_RECOGNISE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e29a      	b.n	800411a <patio2_compare_pos+0x5de>
		}
	case 2:
		if(tAll < PATIO2_AC_T){
 8003be4:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <patio2_compare_pos+0x290>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2bc7      	cmp	r3, #199	; 0xc7
 8003bea:	d801      	bhi.n	8003bf0 <patio2_compare_pos+0xb4>
			return PATIO2_KNOCK_ARROW;
 8003bec:	2302      	movs	r3, #2
 8003bee:	e294      	b.n	800411a <patio2_compare_pos+0x5de>
		}else{
			patio2Tasks = 3;
 8003bf0:	4b75      	ldr	r3, [pc, #468]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
			start_info_debug("P2Return");
#endif
			tAll = 0;
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <patio2_compare_pos+0x290>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
			return PATIO2_RETURN_ORIGIN;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e28c      	b.n	800411a <patio2_compare_pos+0x5de>
		}
	case 3:
		if(tAll < PATIO2_CB_T){
			return PATIO2_RETURN_ORIGIN;
		}else{
			patio2Tasks = 4;
 8003c00:	4b71      	ldr	r3, [pc, #452]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003c02:	2204      	movs	r2, #4
 8003c04:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
			start_info_debug("P2Turn_B");
#endif
			tAll = 0;
 8003c06:	4b71      	ldr	r3, [pc, #452]	; (8003dcc <patio2_compare_pos+0x290>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
			return PATIO2_TURN_CORNER1;
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e284      	b.n	800411a <patio2_compare_pos+0x5de>
		}
	case 4:
		switch(finalDirection){
 8003c10:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <patio2_compare_pos+0x298>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d006      	beq.n	8003c26 <patio2_compare_pos+0xea>
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	dc3d      	bgt.n	8003c98 <patio2_compare_pos+0x15c>
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d015      	beq.n	8003c4c <patio2_compare_pos+0x110>
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d026      	beq.n	8003c72 <patio2_compare_pos+0x136>
 8003c24:	e038      	b.n	8003c98 <patio2_compare_pos+0x15c>
		case ARROW_RIGHT:
			if(zAngle < PATIO2_D_A-ANGLE_MARGIN){
 8003c26:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <patio2_compare_pos+0x29c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	496c      	ldr	r1, [pc, #432]	; (8003ddc <patio2_compare_pos+0x2a0>)
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fd fa97 	bl	8001160 <__aeabi_fcmplt>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <patio2_compare_pos+0x100>
				return PATIO2_TURN_CORNER1;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e26e      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 5;
 8003c3c:	4b62      	ldr	r3, [pc, #392]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003c3e:	2205      	movs	r2, #5
 8003c40:	701a      	strb	r2, [r3, #0]
				tAll = 0;
 8003c42:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <patio2_compare_pos+0x290>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER1;
 8003c48:	2305      	movs	r3, #5
 8003c4a:	e266      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case ARROW_FORWARD:
			if(zAngle < PATIO2_E_A-ANGLE_MARGIN){
 8003c4c:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <patio2_compare_pos+0x29c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4963      	ldr	r1, [pc, #396]	; (8003de0 <patio2_compare_pos+0x2a4>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd fa84 	bl	8001160 <__aeabi_fcmplt>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <patio2_compare_pos+0x126>
				return PATIO2_TURN_CORNER1;
 8003c5e:	2304      	movs	r3, #4
 8003c60:	e25b      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 5;
 8003c62:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003c64:	2205      	movs	r2, #5
 8003c66:	701a      	strb	r2, [r3, #0]
				tAll = 0;
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <patio2_compare_pos+0x290>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER1;
 8003c6e:	2305      	movs	r3, #5
 8003c70:	e253      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case ARROW_LEFT:
			if(zAngle < PATIO2_F_A-ANGLE_MARGIN){
 8003c72:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <patio2_compare_pos+0x29c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	495b      	ldr	r1, [pc, #364]	; (8003de4 <patio2_compare_pos+0x2a8>)
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa71 	bl	8001160 <__aeabi_fcmplt>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <patio2_compare_pos+0x14c>
				return PATIO2_TURN_CORNER1;
 8003c84:	2304      	movs	r3, #4
 8003c86:	e248      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 5;
 8003c88:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	701a      	strb	r2, [r3, #0]
				tAll = 0;
 8003c8e:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <patio2_compare_pos+0x290>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER1;
 8003c94:	2305      	movs	r3, #5
 8003c96:	e240      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		}
		case 5:
			switch(finalDirection){
 8003c98:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <patio2_compare_pos+0x298>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d006      	beq.n	8003cae <patio2_compare_pos+0x172>
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	dc34      	bgt.n	8003d0e <patio2_compare_pos+0x1d2>
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d012      	beq.n	8003cce <patio2_compare_pos+0x192>
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d020      	beq.n	8003cee <patio2_compare_pos+0x1b2>
 8003cac:	e02f      	b.n	8003d0e <patio2_compare_pos+0x1d2>
			case ARROW_RIGHT:
				if(tAll < PATIO2_BD_T){
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <patio2_compare_pos+0x290>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f642 728c 	movw	r2, #12172	; 0x2f8c
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d801      	bhi.n	8003cbe <patio2_compare_pos+0x182>
					return PATIO2_FINISH_CORNER1;
 8003cba:	2305      	movs	r3, #5
 8003cbc:	e22d      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 6;
 8003cbe:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003cc0:	2206      	movs	r2, #6
 8003cc2:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_D");
#endif
					tAll = 0;
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <patio2_compare_pos+0x290>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_OR_GO;
 8003cca:	2306      	movs	r3, #6
 8003ccc:	e225      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			case ARROW_FORWARD:
				if(tAll < PATIO2_BE_T){
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <patio2_compare_pos+0x290>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f244 5251 	movw	r2, #17745	; 0x4551
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d801      	bhi.n	8003cde <patio2_compare_pos+0x1a2>
					return PATIO2_FINISH_CORNER1;
 8003cda:	2305      	movs	r3, #5
 8003cdc:	e21d      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 6;
 8003cde:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003ce0:	2206      	movs	r2, #6
 8003ce2:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_E");
#endif
					tAll = 0;
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <patio2_compare_pos+0x290>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_OR_GO;
 8003cea:	2306      	movs	r3, #6
 8003cec:	e215      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			case ARROW_LEFT:
				if(tAll < PATIO2_BF_T){
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <patio2_compare_pos+0x290>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f243 32d8 	movw	r2, #13272	; 0x33d8
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d801      	bhi.n	8003cfe <patio2_compare_pos+0x1c2>
					return PATIO2_FINISH_CORNER1;
 8003cfa:	2305      	movs	r3, #5
 8003cfc:	e20d      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 6;
 8003cfe:	4b32      	ldr	r3, [pc, #200]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003d00:	2206      	movs	r2, #6
 8003d02:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_F");
#endif
					tAll = 0;
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <patio2_compare_pos+0x290>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_OR_GO;
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	e205      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			}
		case 6:
			switch(finalDirection){
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <patio2_compare_pos+0x298>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d006      	beq.n	8003d24 <patio2_compare_pos+0x1e8>
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	dc32      	bgt.n	8003d80 <patio2_compare_pos+0x244>
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d015      	beq.n	8003d4a <patio2_compare_pos+0x20e>
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d01b      	beq.n	8003d5a <patio2_compare_pos+0x21e>
 8003d22:	e02d      	b.n	8003d80 <patio2_compare_pos+0x244>
			case ARROW_RIGHT:
				if(zAngle < PATIO2_G_A - ANGLE_MARGIN){
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <patio2_compare_pos+0x29c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	492d      	ldr	r1, [pc, #180]	; (8003de0 <patio2_compare_pos+0x2a4>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fa18 	bl	8001160 <__aeabi_fcmplt>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <patio2_compare_pos+0x1fe>
					return PATIO2_TURN_OR_GO;
 8003d36:	2306      	movs	r3, #6
 8003d38:	e1ef      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 7;
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2F_Turn_D");
#endif
					tAll = 0;
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <patio2_compare_pos+0x290>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
					return PATIO2_GO;
 8003d46:	2307      	movs	r3, #7
 8003d48:	e1e7      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			case ARROW_FORWARD:
				patio2Tasks = 7;
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	701a      	strb	r2, [r3, #0]
				tAll = 0;
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <patio2_compare_pos+0x290>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
				return PATIO2_GO;
 8003d56:	2307      	movs	r3, #7
 8003d58:	e1df      	b.n	800411a <patio2_compare_pos+0x5de>
			case ARROW_LEFT:
				if(zAngle > PATIO2_G_A + ANGLE_MARGIN){
 8003d5a:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <patio2_compare_pos+0x29c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4922      	ldr	r1, [pc, #136]	; (8003de8 <patio2_compare_pos+0x2ac>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd fa1b 	bl	800119c <__aeabi_fcmpgt>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <patio2_compare_pos+0x234>
					return PATIO2_TURN_OR_GO;
 8003d6c:	2306      	movs	r3, #6
 8003d6e:	e1d4      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 7;
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003d72:	2207      	movs	r2, #7
 8003d74:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2F_Turn_F");
#endif
					tAll = 0;
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <patio2_compare_pos+0x290>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
					return PATIO2_GO;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	e1cc      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			}
		case 7:
			switch(finalDirection){
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <patio2_compare_pos+0x298>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d006      	beq.n	8003d96 <patio2_compare_pos+0x25a>
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	dc47      	bgt.n	8003e1c <patio2_compare_pos+0x2e0>
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d012      	beq.n	8003db6 <patio2_compare_pos+0x27a>
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d033      	beq.n	8003dfc <patio2_compare_pos+0x2c0>
 8003d94:	e042      	b.n	8003e1c <patio2_compare_pos+0x2e0>
			case ARROW_RIGHT:
				if(tAll < PATIO2_DG_T){
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <patio2_compare_pos+0x290>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f645 3203 	movw	r2, #23299	; 0x5b03
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d801      	bhi.n	8003da6 <patio2_compare_pos+0x26a>
					return PATIO2_GO;
 8003da2:	2307      	movs	r3, #7
 8003da4:	e1b9      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 8;
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <patio2_compare_pos+0x28c>)
 8003da8:	2208      	movs	r2, #8
 8003daa:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_G");
#endif
					tAll = 0;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <patio2_compare_pos+0x290>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_CORNER2;
 8003db2:	2308      	movs	r3, #8
 8003db4:	e1b1      	b.n	800411a <patio2_compare_pos+0x5de>
				}

			case ARROW_FORWARD:
				if(tAll < PATIO2_EG_T){
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <patio2_compare_pos+0x290>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f243 62af 	movw	r2, #13999	; 0x36af
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d814      	bhi.n	8003dec <patio2_compare_pos+0x2b0>
					return PATIO2_GO;
 8003dc2:	2307      	movs	r3, #7
 8003dc4:	e1a9      	b.n	800411a <patio2_compare_pos+0x5de>
 8003dc6:	bf00      	nop
 8003dc8:	20000291 	.word	0x20000291
 8003dcc:	2000028c 	.word	0x2000028c
 8003dd0:	20000295 	.word	0x20000295
 8003dd4:	20000292 	.word	0x20000292
 8003dd8:	20000288 	.word	0x20000288
 8003ddc:	42040000 	.word	0x42040000
 8003de0:	429c0000 	.word	0x429c0000
 8003de4:	42f60000 	.word	0x42f60000
 8003de8:	42cc0000 	.word	0x42cc0000
				}else{
					patio2Tasks = 8;
 8003dec:	4b9f      	ldr	r3, [pc, #636]	; (800406c <patio2_compare_pos+0x530>)
 8003dee:	2208      	movs	r2, #8
 8003df0:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_G");
#endif
					tAll = 0;
 8003df2:	4b9f      	ldr	r3, [pc, #636]	; (8004070 <patio2_compare_pos+0x534>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_CORNER2;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	e18e      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			case ARROW_LEFT:
				if(tAll < PATIO2_FG_T){
 8003dfc:	4b9c      	ldr	r3, [pc, #624]	; (8004070 <patio2_compare_pos+0x534>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f645 3203 	movw	r2, #23299	; 0x5b03
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d801      	bhi.n	8003e0c <patio2_compare_pos+0x2d0>
					return PATIO2_GO;
 8003e08:	2307      	movs	r3, #7
 8003e0a:	e186      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
					patio2Tasks = 8;
 8003e0c:	4b97      	ldr	r3, [pc, #604]	; (800406c <patio2_compare_pos+0x530>)
 8003e0e:	2208      	movs	r2, #8
 8003e10:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_G");
#endif
					tAll = 0;
 8003e12:	4b97      	ldr	r3, [pc, #604]	; (8004070 <patio2_compare_pos+0x534>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_CORNER2;
 8003e18:	2308      	movs	r3, #8
 8003e1a:	e17e      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			}
		case 8:
			if(zAngle > PATIO2_H_A + ANGLE_MARGIN){
 8003e1c:	4b95      	ldr	r3, [pc, #596]	; (8004074 <patio2_compare_pos+0x538>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4995      	ldr	r1, [pc, #596]	; (8004078 <patio2_compare_pos+0x53c>)
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd f9ba 	bl	800119c <__aeabi_fcmpgt>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <patio2_compare_pos+0x2f6>
				return PATIO2_TURN_CORNER2;
 8003e2e:	2308      	movs	r3, #8
 8003e30:	e173      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 9;
 8003e32:	4b8e      	ldr	r3, [pc, #568]	; (800406c <patio2_compare_pos+0x530>)
 8003e34:	2209      	movs	r2, #9
 8003e36:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2F_Turn_G");
#endif
				tAll = 0;
 8003e38:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <patio2_compare_pos+0x534>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER2;
 8003e3e:	2309      	movs	r3, #9
 8003e40:	e16b      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 9:
			switch(finalDirection){
 8003e42:	4b8e      	ldr	r3, [pc, #568]	; (800407c <patio2_compare_pos+0x540>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d006      	beq.n	8003e58 <patio2_compare_pos+0x31c>
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	dc5e      	bgt.n	8003f0c <patio2_compare_pos+0x3d0>
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d020      	beq.n	8003e94 <patio2_compare_pos+0x358>
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d03c      	beq.n	8003ed0 <patio2_compare_pos+0x394>
 8003e56:	e059      	b.n	8003f0c <patio2_compare_pos+0x3d0>
			case ARROW_RIGHT:
				if(tAll < PAITO2_DH_T){
 8003e58:	4b85      	ldr	r3, [pc, #532]	; (8004070 <patio2_compare_pos+0x534>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d801      	bhi.n	8003e68 <patio2_compare_pos+0x32c>
					return PATIO2_FINISH_CORNER2;
 8003e64:	2309      	movs	r3, #9
 8003e66:	e158      	b.n	800411a <patio2_compare_pos+0x5de>
				}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 8003e68:	2105      	movs	r1, #5
 8003e6a:	4885      	ldr	r0, [pc, #532]	; (8004080 <patio2_compare_pos+0x544>)
 8003e6c:	f000 f9f6 	bl	800425c <calculate_weight_average>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4984      	ldr	r1, [pc, #528]	; (8004084 <patio2_compare_pos+0x548>)
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fd f991 	bl	800119c <__aeabi_fcmpgt>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <patio2_compare_pos+0x348>
					return PATIO2_FINISH_CORNER2;
 8003e80:	2309      	movs	r3, #9
 8003e82:	e14a      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_H");
#endif
					patio2Tasks = 10;
 8003e84:	4b79      	ldr	r3, [pc, #484]	; (800406c <patio2_compare_pos+0x530>)
 8003e86:	220a      	movs	r2, #10
 8003e88:	701a      	strb	r2, [r3, #0]
					tAll = 0;
 8003e8a:	4b79      	ldr	r3, [pc, #484]	; (8004070 <patio2_compare_pos+0x534>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_CORNER3;
 8003e90:	230a      	movs	r3, #10
 8003e92:	e142      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			case ARROW_FORWARD:
				if(tAll < PAITO2_EH_T){
 8003e94:	4b76      	ldr	r3, [pc, #472]	; (8004070 <patio2_compare_pos+0x534>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d801      	bhi.n	8003ea4 <patio2_compare_pos+0x368>
					return PATIO2_FINISH_CORNER2;
 8003ea0:	2309      	movs	r3, #9
 8003ea2:	e13a      	b.n	800411a <patio2_compare_pos+0x5de>
				}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 8003ea4:	2105      	movs	r1, #5
 8003ea6:	4876      	ldr	r0, [pc, #472]	; (8004080 <patio2_compare_pos+0x544>)
 8003ea8:	f000 f9d8 	bl	800425c <calculate_weight_average>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4975      	ldr	r1, [pc, #468]	; (8004084 <patio2_compare_pos+0x548>)
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fd f973 	bl	800119c <__aeabi_fcmpgt>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <patio2_compare_pos+0x384>
					return PATIO2_FINISH_CORNER2;
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	e12c      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_H");
#endif
					patio2Tasks = 10;
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	; (800406c <patio2_compare_pos+0x530>)
 8003ec2:	220a      	movs	r2, #10
 8003ec4:	701a      	strb	r2, [r3, #0]
					tAll = 0;
 8003ec6:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <patio2_compare_pos+0x534>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_CORNER3;
 8003ecc:	230a      	movs	r3, #10
 8003ece:	e124      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			case ARROW_LEFT:
				if(tAll < PAITO2_FH_T){
 8003ed0:	4b67      	ldr	r3, [pc, #412]	; (8004070 <patio2_compare_pos+0x534>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d801      	bhi.n	8003ee0 <patio2_compare_pos+0x3a4>
					return PATIO2_FINISH_CORNER2;
 8003edc:	2309      	movs	r3, #9
 8003ede:	e11c      	b.n	800411a <patio2_compare_pos+0x5de>
				}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 8003ee0:	2105      	movs	r1, #5
 8003ee2:	4867      	ldr	r0, [pc, #412]	; (8004080 <patio2_compare_pos+0x544>)
 8003ee4:	f000 f9ba 	bl	800425c <calculate_weight_average>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4966      	ldr	r1, [pc, #408]	; (8004084 <patio2_compare_pos+0x548>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd f955 	bl	800119c <__aeabi_fcmpgt>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <patio2_compare_pos+0x3c0>
					return PATIO2_FINISH_CORNER2;
 8003ef8:	2309      	movs	r3, #9
 8003efa:	e10e      	b.n	800411a <patio2_compare_pos+0x5de>
				}else{
#ifdef MY_DEBUG_START
					start_info_debug("P2Turn_H");
#endif
					patio2Tasks = 10;
 8003efc:	4b5b      	ldr	r3, [pc, #364]	; (800406c <patio2_compare_pos+0x530>)
 8003efe:	220a      	movs	r2, #10
 8003f00:	701a      	strb	r2, [r3, #0]
					tAll = 0;
 8003f02:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <patio2_compare_pos+0x534>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
					return PATIO2_TURN_CORNER3;
 8003f08:	230a      	movs	r3, #10
 8003f0a:	e106      	b.n	800411a <patio2_compare_pos+0x5de>
				}
			}
		case 10:
			if(zAngle < PATIO2_I_A - ANGLE_MARGIN){
 8003f0c:	4b59      	ldr	r3, [pc, #356]	; (8004074 <patio2_compare_pos+0x538>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	495d      	ldr	r1, [pc, #372]	; (8004088 <patio2_compare_pos+0x54c>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd f924 	bl	8001160 <__aeabi_fcmplt>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <patio2_compare_pos+0x3e6>
				return PATIO2_TURN_CORNER3;
 8003f1e:	230a      	movs	r3, #10
 8003f20:	e0fb      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 11;
 8003f22:	4b52      	ldr	r3, [pc, #328]	; (800406c <patio2_compare_pos+0x530>)
 8003f24:	220b      	movs	r2, #11
 8003f26:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2F_Turn_H");
#endif
				tAll = 0;
 8003f28:	4b51      	ldr	r3, [pc, #324]	; (8004070 <patio2_compare_pos+0x534>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER3;
 8003f2e:	230b      	movs	r3, #11
 8003f30:	e0f3      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 11:
			if(tAll < PATIO2_HI_T){
 8003f32:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <patio2_compare_pos+0x534>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3a:	d201      	bcs.n	8003f40 <patio2_compare_pos+0x404>
				return PATIO2_FINISH_CORNER3;
 8003f3c:	230b      	movs	r3, #11
 8003f3e:	e0ec      	b.n	800411a <patio2_compare_pos+0x5de>
			}else if(calculate_weight_average(ultra2dis, 3)<DIS_MARGIN*5){
 8003f40:	2103      	movs	r1, #3
 8003f42:	4852      	ldr	r0, [pc, #328]	; (800408c <patio2_compare_pos+0x550>)
 8003f44:	f000 f98a 	bl	800425c <calculate_weight_average>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4951      	ldr	r1, [pc, #324]	; (8004090 <patio2_compare_pos+0x554>)
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fd f907 	bl	8001160 <__aeabi_fcmplt>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <patio2_compare_pos+0x426>
				tAll  =0;
 8003f58:	4b45      	ldr	r3, [pc, #276]	; (8004070 <patio2_compare_pos+0x534>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER3;
 8003f5e:	230b      	movs	r3, #11
 8003f60:	e0db      	b.n	800411a <patio2_compare_pos+0x5de>
			}else if(tAll < TIME_TIME){
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <patio2_compare_pos+0x534>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d801      	bhi.n	8003f72 <patio2_compare_pos+0x436>
				return PATIO2_FINISH_CORNER3;
 8003f6e:	230b      	movs	r3, #11
 8003f70:	e0d3      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 12;
 8003f72:	4b3e      	ldr	r3, [pc, #248]	; (800406c <patio2_compare_pos+0x530>)
 8003f74:	220c      	movs	r2, #12
 8003f76:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2Turn_I");
#endif
				tAll = 0;
 8003f78:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <patio2_compare_pos+0x534>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
				return PATIO2_TURN_CORNER4;
 8003f7e:	230c      	movs	r3, #12
 8003f80:	e0cb      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 12:
			if(zAngle > PATIO2_J_A + ANGLE_MARGIN){
 8003f82:	4b3c      	ldr	r3, [pc, #240]	; (8004074 <patio2_compare_pos+0x538>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	493c      	ldr	r1, [pc, #240]	; (8004078 <patio2_compare_pos+0x53c>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd f907 	bl	800119c <__aeabi_fcmpgt>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <patio2_compare_pos+0x45c>
				return PATIO2_TURN_CORNER4;
 8003f94:	230c      	movs	r3, #12
 8003f96:	e0c0      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 13;
 8003f98:	4b34      	ldr	r3, [pc, #208]	; (800406c <patio2_compare_pos+0x530>)
 8003f9a:	220d      	movs	r2, #13
 8003f9c:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2F_Turn_I");
#endif
				tAll = 0;
 8003f9e:	4b34      	ldr	r3, [pc, #208]	; (8004070 <patio2_compare_pos+0x534>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER4;
 8003fa4:	230d      	movs	r3, #13
 8003fa6:	e0b8      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 13:
			if(tAll < PATIO2_IJ_T){
 8003fa8:	4b31      	ldr	r3, [pc, #196]	; (8004070 <patio2_compare_pos+0x534>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f247 522f 	movw	r2, #29999	; 0x752f
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d801      	bhi.n	8003fb8 <patio2_compare_pos+0x47c>
				return PATIO2_FINISH_CORNER4;
 8003fb4:	230d      	movs	r3, #13
 8003fb6:	e0b0      	b.n	800411a <patio2_compare_pos+0x5de>
			}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 8003fb8:	2105      	movs	r1, #5
 8003fba:	4831      	ldr	r0, [pc, #196]	; (8004080 <patio2_compare_pos+0x544>)
 8003fbc:	f000 f94e 	bl	800425c <calculate_weight_average>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4930      	ldr	r1, [pc, #192]	; (8004084 <patio2_compare_pos+0x548>)
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd f8e9 	bl	800119c <__aeabi_fcmpgt>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <patio2_compare_pos+0x498>
				return PATIO2_FINISH_CORNER4;
 8003fd0:	230d      	movs	r3, #13
 8003fd2:	e0a2      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 14;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <patio2_compare_pos+0x530>)
 8003fd6:	220e      	movs	r2, #14
 8003fd8:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2Turn_J");
#endif
				tAll = 0;
 8003fda:	4b25      	ldr	r3, [pc, #148]	; (8004070 <patio2_compare_pos+0x534>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
//				HAL_TIM_IC_Stop_IT(&htim8, TIM_CHANNEL_2);
				return PATIO2_TURN_CORNER5;
 8003fe0:	230e      	movs	r3, #14
 8003fe2:	e09a      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 14:
			if(zAngle < PATIO2_K_A - ANGLE_MARGIN){
 8003fe4:	4b23      	ldr	r3, [pc, #140]	; (8004074 <patio2_compare_pos+0x538>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4927      	ldr	r1, [pc, #156]	; (8004088 <patio2_compare_pos+0x54c>)
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f8b8 	bl	8001160 <__aeabi_fcmplt>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <patio2_compare_pos+0x4be>
				return PATIO2_TURN_CORNER5;
 8003ff6:	230e      	movs	r3, #14
 8003ff8:	e08f      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 15;
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <patio2_compare_pos+0x530>)
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2F_Turn_J");
#endif
				tAll = 0;
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <patio2_compare_pos+0x534>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_CORNER5;
 8004006:	230f      	movs	r3, #15
 8004008:	e087      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 15:
			if(tAll < PATIO2_JK_T){
 800400a:	4b19      	ldr	r3, [pc, #100]	; (8004070 <patio2_compare_pos+0x534>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8004012:	4293      	cmp	r3, r2
 8004014:	d801      	bhi.n	800401a <patio2_compare_pos+0x4de>
				return PATIO2_FINISH_CORNER5;
 8004016:	230f      	movs	r3, #15
 8004018:	e07f      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 16;
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <patio2_compare_pos+0x530>)
 800401c:	2210      	movs	r2, #16
 800401e:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2Arr_Bas");
#endif
				tAll = 0;
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <patio2_compare_pos+0x534>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
				return PATIO2_ARRIVE_BASKET;
 8004026:	2310      	movs	r3, #16
 8004028:	e077      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 16:
			if(finishBasketFlag == 0){
 800402a:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <patio2_compare_pos+0x558>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <patio2_compare_pos+0x4fa>
				return PATIO2_ARRIVE_BASKET;
 8004032:	2310      	movs	r3, #16
 8004034:	e071      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 17;
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <patio2_compare_pos+0x530>)
 8004038:	2211      	movs	r2, #17
 800403a:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2Throw");
#endif
				tAll = 0;
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <patio2_compare_pos+0x534>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_BASKET;
 8004042:	2311      	movs	r3, #17
 8004044:	e069      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 17:
			if(zAngle < PATIO2_L_A - ANGLE_MARGIN){
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <patio2_compare_pos+0x538>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4913      	ldr	r1, [pc, #76]	; (8004098 <patio2_compare_pos+0x55c>)
 800404c:	4618      	mov	r0, r3
 800404e:	f7fd f887 	bl	8001160 <__aeabi_fcmplt>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <patio2_compare_pos+0x520>
				return PATIO2_TURN_CORNER6;
 8004058:	2311      	movs	r3, #17
 800405a:	e05e      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 18;
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <patio2_compare_pos+0x530>)
 800405e:	2212      	movs	r2, #18
 8004060:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2F_Turn_K");
#endif
				tAll = 0;
 8004062:	4b03      	ldr	r3, [pc, #12]	; (8004070 <patio2_compare_pos+0x534>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
//				HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
				return PATIO2_FINISH_CORNER6;
 8004068:	2312      	movs	r3, #18
 800406a:	e056      	b.n	800411a <patio2_compare_pos+0x5de>
 800406c:	20000291 	.word	0x20000291
 8004070:	2000028c 	.word	0x2000028c
 8004074:	20000288 	.word	0x20000288
 8004078:	41400000 	.word	0x41400000
 800407c:	20000292 	.word	0x20000292
 8004080:	20000000 	.word	0x20000000
 8004084:	41a00000 	.word	0x41a00000
 8004088:	429c0000 	.word	0x429c0000
 800408c:	20000014 	.word	0x20000014
 8004090:	42c80000 	.word	0x42c80000
 8004094:	20000293 	.word	0x20000293
 8004098:	43280000 	.word	0x43280000
			}
		case 18:
			if(tAll < PATIO2_KL_T){
 800409c:	4b20      	ldr	r3, [pc, #128]	; (8004120 <patio2_compare_pos+0x5e4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d801      	bhi.n	80040ac <patio2_compare_pos+0x570>
				return PATIO2_FINISH_CORNER6;
 80040a8:	2312      	movs	r3, #18
 80040aa:	e036      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 19;
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <patio2_compare_pos+0x5e8>)
 80040ae:	2213      	movs	r2, #19
 80040b0:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2Trans");
#endif
				tAll = 0;
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <patio2_compare_pos+0x5e4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
				return PATIO2_TRANS_INFO;
 80040b8:	2313      	movs	r3, #19
 80040ba:	e02e      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 19:
			if(finishTransFlag == 0){
 80040bc:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <patio2_compare_pos+0x5ec>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <patio2_compare_pos+0x58c>
				return PATIO2_TRANS_INFO;
 80040c4:	2313      	movs	r3, #19
 80040c6:	e028      	b.n	800411a <patio2_compare_pos+0x5de>
			}else{
				patio2Tasks = 20;
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <patio2_compare_pos+0x5e8>)
 80040ca:	2214      	movs	r2, #20
 80040cc:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2F_Trans");
#endif
				tAll = 0;
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <patio2_compare_pos+0x5e4>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_TRANS;
 80040d4:	2314      	movs	r3, #20
 80040d6:	e020      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 20:
			if(tAll < PATIO2_LM_T){
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <patio2_compare_pos+0x5e4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d801      	bhi.n	80040e8 <patio2_compare_pos+0x5ac>
				return PATIO2_FINISH_TRANS;
 80040e4:	2314      	movs	r3, #20
 80040e6:	e018      	b.n	800411a <patio2_compare_pos+0x5de>
			}else if(calculate_weight_average(ultra1dis, 5)>DIS_MARGIN){
 80040e8:	2105      	movs	r1, #5
 80040ea:	4810      	ldr	r0, [pc, #64]	; (800412c <patio2_compare_pos+0x5f0>)
 80040ec:	f000 f8b6 	bl	800425c <calculate_weight_average>
 80040f0:	4603      	mov	r3, r0
 80040f2:	490f      	ldr	r1, [pc, #60]	; (8004130 <patio2_compare_pos+0x5f4>)
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fd f851 	bl	800119c <__aeabi_fcmpgt>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <patio2_compare_pos+0x5c8>
				return PATIO2_FINISH_TRANS;
 8004100:	2314      	movs	r3, #20
 8004102:	e00a      	b.n	800411a <patio2_compare_pos+0x5de>
			}
			else{
				patio2Tasks = 21;
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <patio2_compare_pos+0x5e8>)
 8004106:	2215      	movs	r2, #21
 8004108:	701a      	strb	r2, [r3, #0]
#ifdef MY_DEBUG_START
				start_info_debug("P2Finish");
#endif
				tAll = 0;
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <patio2_compare_pos+0x5e4>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
				return PATIO2_FINISH_TASK;
 8004110:	2315      	movs	r3, #21
 8004112:	e002      	b.n	800411a <patio2_compare_pos+0x5de>
			}
		case 21:
			return PATIO2_FINISH_TASK;
 8004114:	2315      	movs	r3, #21
 8004116:	e000      	b.n	800411a <patio2_compare_pos+0x5de>
	}

	return PATIO_NOTHING;
 8004118:	2363      	movs	r3, #99	; 0x63
}
 800411a:	4618      	mov	r0, r3
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000028c 	.word	0x2000028c
 8004124:	20000291 	.word	0x20000291
 8004128:	20000294 	.word	0x20000294
 800412c:	20000000 	.word	0x20000000
 8004130:	41a00000 	.word	0x41a00000

08004134 <patio2_need_pid_R>:

uint8_t patio2_need_pid_R(){
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
	switch(patio2_compare_pos()){
 8004138:	f7ff fd00 	bl	8003b3c <patio2_compare_pos>
 800413c:	4603      	mov	r3, r0
 800413e:	3b01      	subs	r3, #1
 8004140:	2b14      	cmp	r3, #20
 8004142:	d82f      	bhi.n	80041a4 <patio2_need_pid_R+0x70>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <patio2_need_pid_R+0x18>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	080041a1 	.word	0x080041a1
 8004150:	080041a5 	.word	0x080041a5
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080041a5 	.word	0x080041a5
 800415c:	080041a5 	.word	0x080041a5
 8004160:	080041a5 	.word	0x080041a5
 8004164:	080041a5 	.word	0x080041a5
 8004168:	080041a5 	.word	0x080041a5
 800416c:	080041a5 	.word	0x080041a5
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080041a5 	.word	0x080041a5
 8004178:	080041a5 	.word	0x080041a5
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041a5 	.word	0x080041a5
 8004188:	080041a1 	.word	0x080041a1
 800418c:	080041a5 	.word	0x080041a5
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041a1 	.word	0x080041a1
 8004198:	080041a5 	.word	0x080041a5
 800419c:	080041a1 	.word	0x080041a1
	case PATIO2_RECOGNISE:
	case PATIO2_ARRIVE_BASKET:
	case PATIO2_TRANS_INFO:
	case PATIO2_FINISH_TASK:
		return 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <patio2_need_pid_R+0x72>
	}

	return 1;
 80041a4:	2301      	movs	r3, #1
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop

080041ac <patio2_need_pid_L>:

uint8_t patio2_need_pid_L(){
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	switch(patio2_compare_pos()){
 80041b0:	f7ff fcc4 	bl	8003b3c <patio2_compare_pos>
 80041b4:	4603      	mov	r3, r0
 80041b6:	3b01      	subs	r3, #1
 80041b8:	2b14      	cmp	r3, #20
 80041ba:	d82f      	bhi.n	800421c <patio2_need_pid_L+0x70>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <patio2_need_pid_L+0x18>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	08004219 	.word	0x08004219
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	0800421d 	.word	0x0800421d
 80041d0:	0800421d 	.word	0x0800421d
 80041d4:	0800421d 	.word	0x0800421d
 80041d8:	0800421d 	.word	0x0800421d
 80041dc:	0800421d 	.word	0x0800421d
 80041e0:	0800421d 	.word	0x0800421d
 80041e4:	0800421d 	.word	0x0800421d
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	0800421d 	.word	0x0800421d
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	0800421d 	.word	0x0800421d
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	0800421d 	.word	0x0800421d
 8004200:	08004219 	.word	0x08004219
 8004204:	0800421d 	.word	0x0800421d
 8004208:	0800421d 	.word	0x0800421d
 800420c:	08004219 	.word	0x08004219
 8004210:	0800421d 	.word	0x0800421d
 8004214:	08004219 	.word	0x08004219
	case PATIO2_RECOGNISE:
	case PATIO2_ARRIVE_BASKET:
	case PATIO2_TRANS_INFO:
	case PATIO2_FINISH_TASK:
		return 0;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <patio2_need_pid_L+0x72>
	}

	return 1;
 800421c:	2301      	movs	r3, #1
}
 800421e:	4618      	mov	r0, r3
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop

08004224 <patio2_engine_open>:

void patio2_engine_open(){
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, ENGINE_OPEN_PULSE);
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <patio2_engine_open+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200004e4 	.word	0x200004e4

08004240 <patio2_engine_close>:

void patio2_engine_close(){
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, ENGINE_CLOSE_PULSE);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <patio2_engine_close+0x18>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800424c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200004e4 	.word	0x200004e4

0800425c <calculate_weight_average>:

float calculate_weight_average(float *buffer, uint8_t length){
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
	float average = 0;
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
//	float weight = 2/(float)((length+1)*length);
	for(int i=0;i<length;i++)
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	e00d      	b.n	8004290 <calculate_weight_average+0x34>
		average += buffer[i];
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4413      	add	r3, r2
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7fc fcc7 	bl	8000c14 <__addsf3>
 8004286:	4603      	mov	r3, r0
 8004288:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<length;i++)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3301      	adds	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	dbed      	blt.n	8004274 <calculate_weight_average+0x18>
	return average/length;
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fd6e 	bl	8000d7c <__aeabi_i2f>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4619      	mov	r1, r3
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7fc fe71 	bl	8000f8c <__aeabi_fdiv>
 80042aa:	4603      	mov	r3, r0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <fifo_queue>:

void fifo_queue(float* array, uint8_t length, float data){
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	460b      	mov	r3, r1
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i=0; i<length-1; i++){
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]
 80042c6:	e00d      	b.n	80042e4 <fifo_queue+0x30>
		array[i] = array[i+1];
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	3301      	adds	r3, #1
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	441a      	add	r2, r3
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	440b      	add	r3, r1
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<length-1; i++){
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	3301      	adds	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
 80042e4:	7dfa      	ldrb	r2, [r7, #23]
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	429a      	cmp	r2, r3
 80042ec:	dbec      	blt.n	80042c8 <fifo_queue+0x14>
	}
	array[length-1] = data;
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	3b01      	subs	r3, #1
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	601a      	str	r2, [r3, #0]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
	...

0800430c <read_time>:
void write_time(){
	uint8_t data[] = {0x00, 0x12, 0x21, 0x04, 0x13, 0x04, 0x23};
	HAL_I2C_Mem_Write(&hi2c2, ADDRESS_CLK, 0x00, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), 100);
}

void read_time(){
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b0cb      	sub	sp, #300	; 0x12c
 8004310:	af06      	add	r7, sp, #24
	uint8_t buffer[60]={0};
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004318:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800431c:	2238      	movs	r2, #56	; 0x38
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f008 fd2a 	bl	800cd7a <memset>
	char teamName[] = "CosmicCrusaders";
 8004326:	4b69      	ldr	r3, [pc, #420]	; (80044cc <read_time+0x1c0>)
 8004328:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800432c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800432e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char weekday[][10] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 8004332:	4a67      	ldr	r2, [pc, #412]	; (80044d0 <read_time+0x1c4>)
 8004334:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004338:	4611      	mov	r1, r2
 800433a:	2246      	movs	r2, #70	; 0x46
 800433c:	4618      	mov	r0, r3
 800433e:	f008 fd0e 	bl	800cd5e <memcpy>
	char memberName[] = "XiaChi\nZhanYuwei\nShiZongxin\nWangZijun\nGuBorui\nYuYanqi\nHuangJi\nSongJiabei\nLiuXinyu\nXiaYixuan\n\n";
 8004342:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004346:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800434a:	4a62      	ldr	r2, [pc, #392]	; (80044d4 <read_time+0x1c8>)
 800434c:	4618      	mov	r0, r3
 800434e:	4611      	mov	r1, r2
 8004350:	235e      	movs	r3, #94	; 0x5e
 8004352:	461a      	mov	r2, r3
 8004354:	f008 fd03 	bl	800cd5e <memcpy>
	HAL_I2C_Mem_Read(&hi2c2, ADDRESS_CLK, 0x00, I2C_MEMADD_SIZE_8BIT, buffer, 7, 100);
 8004358:	2364      	movs	r3, #100	; 0x64
 800435a:	9302      	str	r3, [sp, #8]
 800435c:	2307      	movs	r3, #7
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2301      	movs	r3, #1
 8004368:	2200      	movs	r2, #0
 800436a:	21d0      	movs	r1, #208	; 0xd0
 800436c:	485a      	ldr	r0, [pc, #360]	; (80044d8 <read_time+0x1cc>)
 800436e:	f002 fa35 	bl	80067dc <HAL_I2C_Mem_Read>
	int s, m, h, wd, d, mo, y;
	s = (buffer[0]>>4)*10 + (buffer[0]&0x0f);
 8004372:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	461a      	mov	r2, r3
 8004386:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	4413      	add	r3, r2
 8004390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	m = (buffer[1]>>4)*10 + (buffer[1]&0x0f);
 8004394:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	461a      	mov	r2, r3
 80043a8:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	4413      	add	r3, r2
 80043b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	h = ((buffer[2]>>5)&0x01)*20 + ((buffer[2]>>4)&0x01)*10 + (buffer[2]&0x0f);
 80043b6:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4619      	mov	r1, r3
 80043cc:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f003 0201 	and.w	r2, r3, #1
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	18ca      	adds	r2, r1, r3
 80043e2:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	4413      	add	r3, r2
 80043ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	wd = buffer[3];
 80043f0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80043f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	d = (buffer[4]>>4)*10 + (buffer[4]&0x0f);
 80043f8:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	461a      	mov	r2, r3
 800440c:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	4413      	add	r3, r2
 8004416:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	mo = (buffer[5]<<1>>5)*10 + (buffer[5]&0x0f);
 800441a:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	115a      	asrs	r2, r3, #5
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	461a      	mov	r2, r3
 800442c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	4413      	add	r3, r2
 8004436:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	y = (buffer[6]>>4)*10 + (buffer[6]&0x0f);
 800443a:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	461a      	mov	r2, r3
 800444e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	4413      	add	r3, r2
 8004458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	sprintf((char*)buffer, "%s\n20%02d-%02d-%02d\n%s\n%02d:%02d:%02d\n\n", teamName, y, mo, d, weekday[wd], h, m, s);
 800445c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004460:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	440b      	add	r3, r1
 800446e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004472:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004476:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800447a:	9205      	str	r2, [sp, #20]
 800447c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004480:	9204      	str	r2, [sp, #16]
 8004482:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004486:	9203      	str	r2, [sp, #12]
 8004488:	9302      	str	r3, [sp, #8]
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	460a      	mov	r2, r1
 800449c:	490f      	ldr	r1, [pc, #60]	; (80044dc <read_time+0x1d0>)
 800449e:	f009 f9e3 	bl	800d868 <siprintf>
	HAL_UART_Transmit(&huart5, buffer, 45, HAL_MAX_DELAY);
 80044a2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	222d      	movs	r2, #45	; 0x2d
 80044ac:	480c      	ldr	r0, [pc, #48]	; (80044e0 <read_time+0x1d4>)
 80044ae:	f005 f8f6 	bl	800969e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, (uint8_t*)memberName, 93, HAL_MAX_DELAY);
 80044b2:	4639      	mov	r1, r7
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	225d      	movs	r2, #93	; 0x5d
 80044ba:	4809      	ldr	r0, [pc, #36]	; (80044e0 <read_time+0x1d4>)
 80044bc:	f005 f8ef 	bl	800969e <HAL_UART_Transmit>
}
 80044c0:	bf00      	nop
 80044c2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	080113d4 	.word	0x080113d4
 80044d0:	080113e4 	.word	0x080113e4
 80044d4:	0801142c 	.word	0x0801142c
 80044d8:	20000324 	.word	0x20000324
 80044dc:	080113ac 	.word	0x080113ac
 80044e0:	200005b8 	.word	0x200005b8

080044e4 <stack_debug>:

void stack_debug(uint32_t leave){
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
#ifdef MY_DEBUG_STACK
	uint8_t buffer[20] = {0};
	sprintf((char*)buffer, "stack%02lu:%3lu\n\n", leave, uxTaskGetStackHighWaterMark(NULL));
	HAL_UART_Transmit(&huart5, buffer, 20, 20);
#endif
	return;
 80044ec:	bf00      	nop
}
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <decode_from_mv_p1>:

	sprintf(info, "%s has been started\n\n", buffer);
	HAL_UART_Transmit(&huart5, (uint8_t*)info, 50, 50);
}

void decode_from_mv_p1(uint8_t buffer[], int* rho, int* theta){
 80044f6:	b480      	push	{r7}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
	uint8_t my_index = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
	for(my_index=0; my_index<7; my_index++){
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
 800450a:	e048      	b.n	800459e <decode_from_mv_p1+0xa8>
		if(buffer[my_index]==0xaa && buffer[my_index+1]==0xbb && buffer[my_index+2]==0xcc && buffer[my_index+3]==0xdd){
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2baa      	cmp	r3, #170	; 0xaa
 8004516:	d13f      	bne.n	8004598 <decode_from_mv_p1+0xa2>
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	3301      	adds	r3, #1
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2bbb      	cmp	r3, #187	; 0xbb
 8004524:	d138      	bne.n	8004598 <decode_from_mv_p1+0xa2>
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	3302      	adds	r3, #2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2bcc      	cmp	r3, #204	; 0xcc
 8004532:	d131      	bne.n	8004598 <decode_from_mv_p1+0xa2>
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	3303      	adds	r3, #3
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2bdd      	cmp	r3, #221	; 0xdd
 8004540:	d12a      	bne.n	8004598 <decode_from_mv_p1+0xa2>
			if(buffer[my_index+15]==0xaa && buffer[my_index+14]==0xbb && buffer[my_index+13]==0xcc && buffer[my_index+12]==0xdd){
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	330f      	adds	r3, #15
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2baa      	cmp	r3, #170	; 0xaa
 800454e:	d123      	bne.n	8004598 <decode_from_mv_p1+0xa2>
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	330e      	adds	r3, #14
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2bbb      	cmp	r3, #187	; 0xbb
 800455c:	d11c      	bne.n	8004598 <decode_from_mv_p1+0xa2>
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	330d      	adds	r3, #13
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2bcc      	cmp	r3, #204	; 0xcc
 800456a:	d115      	bne.n	8004598 <decode_from_mv_p1+0xa2>
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	330c      	adds	r3, #12
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2bdd      	cmp	r3, #221	; 0xdd
 8004578:	d10e      	bne.n	8004598 <decode_from_mv_p1+0xa2>
				*rho = *(int*)&buffer[my_index+4];
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	3304      	adds	r3, #4
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	601a      	str	r2, [r3, #0]
				*theta = *(int*)&buffer[my_index+8];
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	3308      	adds	r3, #8
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
				return;
 8004596:	e005      	b.n	80045a4 <decode_from_mv_p1+0xae>
	for(my_index=0; my_index<7; my_index++){
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	3301      	adds	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b06      	cmp	r3, #6
 80045a2:	d9b3      	bls.n	800450c <decode_from_mv_p1+0x16>
			}
		}
	}
}
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_TIM_IC_CaptureCallback>:
		}
	}
}

//callback functions following
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	BaseType_t taskWoken = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
	if(htim == &htim2){
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a24      	ldr	r2, [pc, #144]	; (800464c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d119      	bne.n	80045f4 <HAL_TIM_IC_CaptureCallback+0x48>
		if(which_patio == PATIO_1)
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d108      	bne.n	80045da <HAL_TIM_IC_CaptureCallback+0x2e>
			vTaskNotifyGiveFromISR(patio1Ultra1AppHandle, &taskWoken);
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f107 020c 	add.w	r2, r7, #12
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f007 f9f2 	bl	800b9bc <vTaskNotifyGiveFromISR>
 80045d8:	e029      	b.n	800462e <HAL_TIM_IC_CaptureCallback+0x82>
		else if(which_patio == PATIO_2)
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d125      	bne.n	800462e <HAL_TIM_IC_CaptureCallback+0x82>
			vTaskNotifyGiveFromISR(patio2Ultra1AppHandle, &taskWoken);
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_TIM_IC_CaptureCallback+0xac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f107 020c 	add.w	r2, r7, #12
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f007 f9e5 	bl	800b9bc <vTaskNotifyGiveFromISR>
 80045f2:	e01c      	b.n	800462e <HAL_TIM_IC_CaptureCallback+0x82>
	}else if(htim == &htim8){
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d118      	bne.n	800462e <HAL_TIM_IC_CaptureCallback+0x82>
		if(which_patio == PATIO_1)
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d108      	bne.n	8004616 <HAL_TIM_IC_CaptureCallback+0x6a>
			vTaskNotifyGiveFromISR(patio1Ultra2AppHandle, &taskWoken);
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f107 020c 	add.w	r2, r7, #12
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f007 f9d4 	bl	800b9bc <vTaskNotifyGiveFromISR>
 8004614:	e00b      	b.n	800462e <HAL_TIM_IC_CaptureCallback+0x82>
		else if(which_patio == PATIO_2)
 8004616:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_TIM_IC_CaptureCallback+0x82>
			vTaskNotifyGiveFromISR(patio2Ultra2AppHandle, &taskWoken);
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f107 020c 	add.w	r2, r7, #12
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f007 f9c7 	bl	800b9bc <vTaskNotifyGiveFromISR>
	}
	portYIELD_FROM_ISR(taskWoken);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_TIM_IC_CaptureCallback+0x98>
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	2000040c 	.word	0x2000040c
 8004650:	20000254 	.word	0x20000254
 8004654:	200002ac 	.word	0x200002ac
 8004658:	200002c0 	.word	0x200002c0
 800465c:	2000052c 	.word	0x2000052c
 8004660:	200002b0 	.word	0x200002b0
 8004664:	200002cc 	.word	0x200002cc
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004672:	f107 0318 	add.w	r3, r7, #24
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004680:	4b3e      	ldr	r3, [pc, #248]	; (800477c <MX_GPIO_Init+0x110>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	4a3d      	ldr	r2, [pc, #244]	; (800477c <MX_GPIO_Init+0x110>)
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	6193      	str	r3, [r2, #24]
 800468c:	4b3b      	ldr	r3, [pc, #236]	; (800477c <MX_GPIO_Init+0x110>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004698:	4b38      	ldr	r3, [pc, #224]	; (800477c <MX_GPIO_Init+0x110>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	4a37      	ldr	r2, [pc, #220]	; (800477c <MX_GPIO_Init+0x110>)
 800469e:	f043 0310 	orr.w	r3, r3, #16
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b35      	ldr	r3, [pc, #212]	; (800477c <MX_GPIO_Init+0x110>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b0:	4b32      	ldr	r3, [pc, #200]	; (800477c <MX_GPIO_Init+0x110>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4a31      	ldr	r2, [pc, #196]	; (800477c <MX_GPIO_Init+0x110>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6193      	str	r3, [r2, #24]
 80046bc:	4b2f      	ldr	r3, [pc, #188]	; (800477c <MX_GPIO_Init+0x110>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046c8:	4b2c      	ldr	r3, [pc, #176]	; (800477c <MX_GPIO_Init+0x110>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4a2b      	ldr	r2, [pc, #172]	; (800477c <MX_GPIO_Init+0x110>)
 80046ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d2:	6193      	str	r3, [r2, #24]
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <MX_GPIO_Init+0x110>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e0:	4b26      	ldr	r3, [pc, #152]	; (800477c <MX_GPIO_Init+0x110>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	4a25      	ldr	r2, [pc, #148]	; (800477c <MX_GPIO_Init+0x110>)
 80046e6:	f043 0308 	orr.w	r3, r3, #8
 80046ea:	6193      	str	r3, [r2, #24]
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <MX_GPIO_Init+0x110>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <MX_GPIO_Init+0x110>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	; (800477c <MX_GPIO_Init+0x110>)
 80046fe:	f043 0320 	orr.w	r3, r3, #32
 8004702:	6193      	str	r3, [r2, #24]
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <MX_GPIO_Init+0x110>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, IN_1_Pin|IN_2_Pin|IN_3_Pin|IN_4_Pin, GPIO_PIN_RESET);
 8004710:	2200      	movs	r2, #0
 8004712:	211e      	movs	r1, #30
 8004714:	481a      	ldr	r0, [pc, #104]	; (8004780 <MX_GPIO_Init+0x114>)
 8004716:	f001 fe0a 	bl	800632e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Warning_GPIO_Port, Warning_Pin, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	2102      	movs	r1, #2
 800471e:	4819      	ldr	r0, [pc, #100]	; (8004784 <MX_GPIO_Init+0x118>)
 8004720:	f001 fe05 	bl	800632e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Selection_Pin;
 8004724:	2301      	movs	r3, #1
 8004726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800472c:	2302      	movs	r3, #2
 800472e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Selection_GPIO_Port, &GPIO_InitStruct);
 8004730:	f107 0318 	add.w	r3, r7, #24
 8004734:	4619      	mov	r1, r3
 8004736:	4812      	ldr	r0, [pc, #72]	; (8004780 <MX_GPIO_Init+0x114>)
 8004738:	f001 fc4e 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin|IN_3_Pin|IN_4_Pin;
 800473c:	231e      	movs	r3, #30
 800473e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004740:	2301      	movs	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004744:	2302      	movs	r3, #2
 8004746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004748:	2302      	movs	r3, #2
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800474c:	f107 0318 	add.w	r3, r7, #24
 8004750:	4619      	mov	r1, r3
 8004752:	480b      	ldr	r0, [pc, #44]	; (8004780 <MX_GPIO_Init+0x114>)
 8004754:	f001 fc40 	bl	8005fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Warning_Pin;
 8004758:	2302      	movs	r3, #2
 800475a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475c:	2301      	movs	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004764:	2302      	movs	r3, #2
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Warning_GPIO_Port, &GPIO_InitStruct);
 8004768:	f107 0318 	add.w	r3, r7, #24
 800476c:	4619      	mov	r1, r3
 800476e:	4805      	ldr	r0, [pc, #20]	; (8004784 <MX_GPIO_Init+0x118>)
 8004770:	f001 fc32 	bl	8005fd8 <HAL_GPIO_Init>

}
 8004774:	bf00      	nop
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000
 8004780:	40011c00 	.word	0x40011c00
 8004784:	40011000 	.word	0x40011000

08004788 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <MX_I2C1_Init+0x50>)
 800478e:	4a13      	ldr	r2, [pc, #76]	; (80047dc <MX_I2C1_Init+0x54>)
 8004790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <MX_I2C1_Init+0x50>)
 8004794:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <MX_I2C1_Init+0x58>)
 8004796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <MX_I2C1_Init+0x50>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047c4:	4804      	ldr	r0, [pc, #16]	; (80047d8 <MX_I2C1_Init+0x50>)
 80047c6:	f001 fdcb 	bl	8006360 <HAL_I2C_Init>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80047d0:	f000 f938 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	200002d0 	.word	0x200002d0
 80047dc:	40005400 	.word	0x40005400
 80047e0:	000186a0 	.word	0x000186a0

080047e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <MX_I2C2_Init+0x50>)
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <MX_I2C2_Init+0x54>)
 80047ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <MX_I2C2_Init+0x50>)
 80047f0:	4a12      	ldr	r2, [pc, #72]	; (800483c <MX_I2C2_Init+0x58>)
 80047f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <MX_I2C2_Init+0x50>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <MX_I2C2_Init+0x50>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <MX_I2C2_Init+0x50>)
 8004802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004806:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <MX_I2C2_Init+0x50>)
 800480a:	2200      	movs	r2, #0
 800480c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <MX_I2C2_Init+0x50>)
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <MX_I2C2_Init+0x50>)
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <MX_I2C2_Init+0x50>)
 800481c:	2200      	movs	r2, #0
 800481e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004820:	4804      	ldr	r0, [pc, #16]	; (8004834 <MX_I2C2_Init+0x50>)
 8004822:	f001 fd9d 	bl	8006360 <HAL_I2C_Init>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800482c:	f000 f90a 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000324 	.word	0x20000324
 8004838:	40005800 	.word	0x40005800
 800483c:	000186a0 	.word	0x000186a0

08004840 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 0318 	add.w	r3, r7, #24
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <HAL_I2C_MspInit+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d124      	bne.n	80048aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004860:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_I2C_MspInit+0xcc>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <HAL_I2C_MspInit+0xcc>)
 8004866:	f043 0308 	orr.w	r3, r3, #8
 800486a:	6193      	str	r3, [r2, #24]
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_I2C_MspInit+0xcc>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 8004878:	23c0      	movs	r3, #192	; 0xc0
 800487a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800487c:	2312      	movs	r3, #18
 800487e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004880:	2303      	movs	r3, #3
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004884:	f107 0318 	add.w	r3, r7, #24
 8004888:	4619      	mov	r1, r3
 800488a:	4821      	ldr	r0, [pc, #132]	; (8004910 <HAL_I2C_MspInit+0xd0>)
 800488c:	f001 fba4 	bl	8005fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_I2C_MspInit+0xcc>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <HAL_I2C_MspInit+0xcc>)
 8004896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800489a:	61d3      	str	r3, [r2, #28]
 800489c:	4b1b      	ldr	r3, [pc, #108]	; (800490c <HAL_I2C_MspInit+0xcc>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80048a8:	e029      	b.n	80048fe <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a19      	ldr	r2, [pc, #100]	; (8004914 <HAL_I2C_MspInit+0xd4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d124      	bne.n	80048fe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b4:	4b15      	ldr	r3, [pc, #84]	; (800490c <HAL_I2C_MspInit+0xcc>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4a14      	ldr	r2, [pc, #80]	; (800490c <HAL_I2C_MspInit+0xcc>)
 80048ba:	f043 0308 	orr.w	r3, r3, #8
 80048be:	6193      	str	r3, [r2, #24]
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <HAL_I2C_MspInit+0xcc>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_SCL_Pin|CLK_SDA_Pin;
 80048cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048d2:	2312      	movs	r3, #18
 80048d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048d6:	2303      	movs	r3, #3
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	f107 0318 	add.w	r3, r7, #24
 80048de:	4619      	mov	r1, r3
 80048e0:	480b      	ldr	r0, [pc, #44]	; (8004910 <HAL_I2C_MspInit+0xd0>)
 80048e2:	f001 fb79 	bl	8005fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_I2C_MspInit+0xcc>)
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_I2C_MspInit+0xcc>)
 80048ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048f0:	61d3      	str	r3, [r2, #28]
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_I2C_MspInit+0xcc>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
}
 80048fe:	bf00      	nop
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40005400 	.word	0x40005400
 800490c:	40021000 	.word	0x40021000
 8004910:	40010c00 	.word	0x40010c00
 8004914:	40005800 	.word	0x40005800

08004918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800491c:	f001 f802 	bl	8005924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004920:	f000 f821 	bl	8004966 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004924:	f7ff fea2 	bl	800466c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004928:	f7ff ff2e 	bl	8004788 <MX_I2C1_Init>
  MX_TIM1_Init();
 800492c:	f000 fa50 	bl	8004dd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004930:	f000 faa6 	bl	8004e80 <MX_TIM2_Init>
  MX_TIM4_Init();
 8004934:	f000 fb7e 	bl	8005034 <MX_TIM4_Init>
  MX_TIM5_Init();
 8004938:	f000 fbd0 	bl	80050dc <MX_TIM5_Init>
  MX_TIM8_Init();
 800493c:	f000 fc40 	bl	80051c0 <MX_TIM8_Init>
  MX_UART4_Init();
 8004940:	f000 fe7c 	bl	800563c <MX_UART4_Init>
  MX_UART5_Init();
 8004944:	f000 fea4 	bl	8005690 <MX_UART5_Init>
  MX_I2C2_Init();
 8004948:	f7ff ff4c 	bl	80047e4 <MX_I2C2_Init>
  MX_ADC1_Init();
 800494c:	f7fc fc56 	bl	80011fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8004950:	f000 fb16 	bl	8004f80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004954:	f000 fec6 	bl	80056e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004958:	f005 f8ae 	bl	8009ab8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800495c:	f7fc fcdc 	bl	8001318 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004960:	f005 f8dc 	bl	8009b1c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004964:	e7fe      	b.n	8004964 <main+0x4c>

08004966 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b096      	sub	sp, #88	; 0x58
 800496a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800496c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004970:	2228      	movs	r2, #40	; 0x28
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f008 fa00 	bl	800cd7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800497a:	f107 031c 	add.w	r3, r7, #28
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
 8004998:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800499a:	2301      	movs	r3, #1
 800499c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800499e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80049a4:	2300      	movs	r3, #0
 80049a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049a8:	2301      	movs	r3, #1
 80049aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ac:	2302      	movs	r3, #2
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80049b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80049ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 fccd 	bl	8007360 <HAL_RCC_OscConfig>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80049cc:	f000 f83a 	bl	8004a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049d0:	230f      	movs	r3, #15
 80049d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049d4:	2302      	movs	r3, #2
 80049d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049e2:	2300      	movs	r3, #0
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80049e6:	f107 031c 	add.w	r3, r7, #28
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f002 ff39 	bl	8007864 <HAL_RCC_ClockConfig>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <SystemClock_Config+0x96>
  {
    Error_Handler();
 80049f8:	f000 f824 	bl	8004a44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80049fc:	2302      	movs	r3, #2
 80049fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a04:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a06:	1d3b      	adds	r3, r7, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f003 f8f3 	bl	8007bf4 <HAL_RCCEx_PeriphCLKConfig>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004a14:	f000 f816 	bl	8004a44 <Error_Handler>
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3758      	adds	r7, #88	; 0x58
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a32:	f000 ff8d 	bl	8005950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40001000 	.word	0x40001000

08004a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a48:	b672      	cpsid	i
}
 8004a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a4c:	e7fe      	b.n	8004a4c <Error_Handler+0x8>
	...

08004a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a56:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <HAL_MspInit+0x4c>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <HAL_MspInit+0x4c>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6193      	str	r3, [r2, #24]
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <HAL_MspInit+0x4c>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_MspInit+0x4c>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_MspInit+0x4c>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a78:	61d3      	str	r3, [r2, #28]
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_MspInit+0x4c>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a86:	2200      	movs	r2, #0
 8004a88:	210f      	movs	r1, #15
 8004a8a:	f06f 0001 	mvn.w	r0, #1
 8004a8e:	f001 fa78 	bl	8005f82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08e      	sub	sp, #56	; 0x38
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_InitTick+0xe8>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4a33      	ldr	r2, [pc, #204]	; (8004b88 <HAL_InitTick+0xe8>)
 8004abc:	f043 0310 	orr.w	r3, r3, #16
 8004ac0:	61d3      	str	r3, [r2, #28]
 8004ac2:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <HAL_InitTick+0xe8>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ace:	f107 0210 	add.w	r2, r7, #16
 8004ad2:	f107 0314 	add.w	r3, r7, #20
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 f83d 	bl	8007b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f003 f80e 	bl	8007b08 <HAL_RCC_GetPCLK1Freq>
 8004aec:	6378      	str	r0, [r7, #52]	; 0x34
 8004aee:	e004      	b.n	8004afa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004af0:	f003 f80a 	bl	8007b08 <HAL_RCC_GetPCLK1Freq>
 8004af4:	4603      	mov	r3, r0
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	4a23      	ldr	r2, [pc, #140]	; (8004b8c <HAL_InitTick+0xec>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	0c9b      	lsrs	r3, r3, #18
 8004b04:	3b01      	subs	r3, #1
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004b08:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b0a:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <HAL_InitTick+0xf4>)
 8004b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004b2e:	4818      	ldr	r0, [pc, #96]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b30:	f003 f916 	bl	8007d60 <HAL_TIM_Base_Init>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11b      	bne.n	8004b7a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004b42:	4813      	ldr	r0, [pc, #76]	; (8004b90 <HAL_InitTick+0xf0>)
 8004b44:	f003 f9bc 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d111      	bne.n	8004b7a <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004b56:	2036      	movs	r0, #54	; 0x36
 8004b58:	f001 fa2f 	bl	8005fba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b0f      	cmp	r3, #15
 8004b60:	d808      	bhi.n	8004b74 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8004b62:	2200      	movs	r2, #0
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	2036      	movs	r0, #54	; 0x36
 8004b68:	f001 fa0b 	bl	8005f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <HAL_InitTick+0xf8>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e002      	b.n	8004b7a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3738      	adds	r7, #56	; 0x38
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	431bde83 	.word	0x431bde83
 8004b90:	20000378 	.word	0x20000378
 8004b94:	40001000 	.word	0x40001000
 8004b98:	2000002c 	.word	0x2000002c

08004b9c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_SuspendTick+0x1c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_SuspendTick+0x1c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	60da      	str	r2, [r3, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	20000378 	.word	0x20000378

08004bbc <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_ResumeTick+0x1c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <HAL_ResumeTick+0x1c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	60da      	str	r2, [r3, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	20000378 	.word	0x20000378

08004bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004be0:	e7fe      	b.n	8004be0 <NMI_Handler+0x4>

08004be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004be6:	e7fe      	b.n	8004be6 <HardFault_Handler+0x4>

08004be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bec:	e7fe      	b.n	8004bec <MemManage_Handler+0x4>

08004bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bf2:	e7fe      	b.n	8004bf2 <BusFault_Handler+0x4>

08004bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bf8:	e7fe      	b.n	8004bf8 <UsageFault_Handler+0x4>

08004bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
	...

08004c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <TIM2_IRQHandler+0x10>)
 8004c0e:	f003 fd55 	bl	80086bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2000040c 	.word	0x2000040c

08004c1c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <TIM8_CC_IRQHandler+0x10>)
 8004c22:	f003 fd4b 	bl	80086bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	2000052c 	.word	0x2000052c

08004c30 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c34:	4802      	ldr	r0, [pc, #8]	; (8004c40 <TIM6_IRQHandler+0x10>)
 8004c36:	f003 fd41 	bl	80086bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000378 	.word	0x20000378

08004c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
	return 1;
 8004c48:	2301      	movs	r3, #1
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <_kill>:

int _kill(int pid, int sig)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c5c:	f007 ff5c 	bl	800cb18 <__errno>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2216      	movs	r2, #22
 8004c64:	601a      	str	r2, [r3, #0]
	return -1;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_exit>:

void _exit (int status)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ffe7 	bl	8004c52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c84:	e7fe      	b.n	8004c84 <_exit+0x12>

08004c86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e00a      	b.n	8004cae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c98:	f3af 8000 	nop.w
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	60ba      	str	r2, [r7, #8]
 8004ca4:	b2ca      	uxtb	r2, r1
 8004ca6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	3301      	adds	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	dbf0      	blt.n	8004c98 <_read+0x12>
	}

return len;
 8004cb6:	687b      	ldr	r3, [r7, #4]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e009      	b.n	8004ce6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	60ba      	str	r2, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	dbf1      	blt.n	8004cd2 <_write+0x12>
	}
	return len;
 8004cee:	687b      	ldr	r3, [r7, #4]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <_close>:

int _close(int file)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	return -1;
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <_isatty>:

int _isatty(int file)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	return 1;
 8004d34:	2301      	movs	r3, #1
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d60:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <_sbrk+0x5c>)
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <_sbrk+0x60>)
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <_sbrk+0x64>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <_sbrk+0x64>)
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <_sbrk+0x68>)
 8004d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <_sbrk+0x64>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d207      	bcs.n	8004d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d88:	f007 fec6 	bl	800cb18 <__errno>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	220c      	movs	r2, #12
 8004d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e009      	b.n	8004dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <_sbrk+0x64>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <_sbrk+0x64>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <_sbrk+0x64>)
 8004da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20010000 	.word	0x20010000
 8004db8:	00000400 	.word	0x00000400
 8004dbc:	200003c0 	.word	0x200003c0
 8004dc0:	20007940 	.word	0x20007940

08004dc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dd6:	f107 030c 	add.w	r3, r7, #12
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	f007 ffcb 	bl	800cd7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004dee:	4a23      	ldr	r2, [pc, #140]	; (8004e7c <MX_TIM1_Init+0xac>)
 8004df0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004df2:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e30:	2301      	movs	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004e3c:	f107 030c 	add.w	r3, r7, #12
 8004e40:	4619      	mov	r1, r3
 8004e42:	480d      	ldr	r0, [pc, #52]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004e44:	f003 fb0a 	bl	800845c <HAL_TIM_Encoder_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004e4e:	f7ff fdf9 	bl	8004a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4806      	ldr	r0, [pc, #24]	; (8004e78 <MX_TIM1_Init+0xa8>)
 8004e60:	f004 fb52 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8004e6a:	f7ff fdeb 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004e6e:	bf00      	nop
 8004e70:	3730      	adds	r7, #48	; 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200003c4 	.word	0x200003c4
 8004e7c:	40012c00 	.word	0x40012c00

08004e80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004e86:	f107 031c 	add.w	r3, r7, #28
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	60da      	str	r2, [r3, #12]
 8004e94:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004eac:	4b33      	ldr	r3, [pc, #204]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8004eb4:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004eb6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ebc:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14999;
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004ec4:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eca:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004ed6:	4829      	ldr	r0, [pc, #164]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004ed8:	f003 f95c 	bl	8008194 <HAL_TIM_IC_Init>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8004ee2:	f7ff fdaf 	bl	8004a44 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004eea:	2350      	movs	r3, #80	; 0x50
 8004eec:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004efa:	f107 031c 	add.w	r3, r7, #28
 8004efe:	4619      	mov	r1, r3
 8004f00:	481e      	ldr	r0, [pc, #120]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004f02:	f003 fe35 	bl	8008b70 <HAL_TIM_SlaveConfigSynchro>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004f0c:	f7ff fd9a 	bl	8004a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f14:	2301      	movs	r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	2200      	movs	r2, #0
 8004f26:	4619      	mov	r1, r3
 8004f28:	4814      	ldr	r0, [pc, #80]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004f2a:	f003 fccf 	bl	80088cc <HAL_TIM_IC_ConfigChannel>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8004f34:	f7ff fd86 	bl	8004a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	2204      	movs	r2, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	480c      	ldr	r0, [pc, #48]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004f4a:	f003 fcbf 	bl	80088cc <HAL_TIM_IC_ConfigChannel>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004f54:	f7ff fd76 	bl	8004a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	4619      	mov	r1, r3
 8004f64:	4805      	ldr	r0, [pc, #20]	; (8004f7c <MX_TIM2_Init+0xfc>)
 8004f66:	f004 facf 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8004f70:	f7ff fd68 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f74:	bf00      	nop
 8004f76:	3730      	adds	r7, #48	; 0x30
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	2000040c 	.word	0x2000040c

08004f80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f86:	f107 0320 	add.w	r3, r7, #32
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	605a      	str	r2, [r3, #4]
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	611a      	str	r2, [r3, #16]
 8004f9e:	615a      	str	r2, [r3, #20]
 8004fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <MX_TIM3_Init+0xac>)
 8004fa4:	4a22      	ldr	r2, [pc, #136]	; (8005030 <MX_TIM3_Init+0xb0>)
 8004fa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8004fa8:	4b20      	ldr	r3, [pc, #128]	; (800502c <MX_TIM3_Init+0xac>)
 8004faa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	; (800502c <MX_TIM3_Init+0xac>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	; (800502c <MX_TIM3_Init+0xac>)
 8004fb8:	f241 3287 	movw	r2, #4999	; 0x1387
 8004fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	; (800502c <MX_TIM3_Init+0xac>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fc4:	4b19      	ldr	r3, [pc, #100]	; (800502c <MX_TIM3_Init+0xac>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004fca:	4818      	ldr	r0, [pc, #96]	; (800502c <MX_TIM3_Init+0xac>)
 8004fcc:	f002 ffd8 	bl	8007f80 <HAL_TIM_PWM_Init>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004fd6:	f7ff fd35 	bl	8004a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004fe2:	f107 0320 	add.w	r3, r7, #32
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4810      	ldr	r0, [pc, #64]	; (800502c <MX_TIM3_Init+0xac>)
 8004fea:	f004 fa8d 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004ff4:	f7ff fd26 	bl	8004a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ff8:	2360      	movs	r3, #96	; 0x60
 8004ffa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	2204      	movs	r2, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4807      	ldr	r0, [pc, #28]	; (800502c <MX_TIM3_Init+0xac>)
 8005010:	f003 fcf0 	bl	80089f4 <HAL_TIM_PWM_ConfigChannel>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800501a:	f7ff fd13 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800501e:	4803      	ldr	r0, [pc, #12]	; (800502c <MX_TIM3_Init+0xac>)
 8005020:	f000 faa4 	bl	800556c <HAL_TIM_MspPostInit>

}
 8005024:	bf00      	nop
 8005026:	3728      	adds	r7, #40	; 0x28
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000454 	.word	0x20000454
 8005030:	40000400 	.word	0x40000400

08005034 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800503a:	f107 030c 	add.w	r3, r7, #12
 800503e:	2224      	movs	r2, #36	; 0x24
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f007 fe99 	bl	800cd7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <MX_TIM4_Init+0xa0>)
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <MX_TIM4_Init+0xa4>)
 8005054:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005056:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <MX_TIM4_Init+0xa0>)
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <MX_TIM4_Init+0xa0>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <MX_TIM4_Init+0xa0>)
 8005064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005068:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <MX_TIM4_Init+0xa0>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005070:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <MX_TIM4_Init+0xa0>)
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005076:	2303      	movs	r3, #3
 8005078:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800507e:	2301      	movs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800508a:	2300      	movs	r3, #0
 800508c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800508e:	2301      	movs	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005092:	2300      	movs	r3, #0
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	4619      	mov	r1, r3
 80050a0:	480c      	ldr	r0, [pc, #48]	; (80050d4 <MX_TIM4_Init+0xa0>)
 80050a2:	f003 f9db 	bl	800845c <HAL_TIM_Encoder_Init>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80050ac:	f7ff fcca 	bl	8004a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050b0:	2300      	movs	r3, #0
 80050b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4805      	ldr	r0, [pc, #20]	; (80050d4 <MX_TIM4_Init+0xa0>)
 80050be:	f004 fa23 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80050c8:	f7ff fcbc 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80050cc:	bf00      	nop
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	2000049c 	.word	0x2000049c
 80050d8:	40000800 	.word	0x40000800

080050dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050e2:	f107 0320 	add.w	r3, r7, #32
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	605a      	str	r2, [r3, #4]
 80050f4:	609a      	str	r2, [r3, #8]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	611a      	str	r2, [r3, #16]
 80050fa:	615a      	str	r2, [r3, #20]
 80050fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80050fe:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005100:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <MX_TIM5_Init+0xe0>)
 8005102:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8005104:	4b2c      	ldr	r3, [pc, #176]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005106:	2247      	movs	r2, #71	; 0x47
 8005108:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <MX_TIM5_Init+0xdc>)
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8005110:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005112:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005116:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <MX_TIM5_Init+0xdc>)
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005124:	4824      	ldr	r0, [pc, #144]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005126:	f002 ff2b 	bl	8007f80 <HAL_TIM_PWM_Init>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8005130:	f7ff fc88 	bl	8004a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005134:	2300      	movs	r3, #0
 8005136:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800513c:	f107 0320 	add.w	r3, r7, #32
 8005140:	4619      	mov	r1, r3
 8005142:	481d      	ldr	r0, [pc, #116]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005144:	f004 f9e0 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800514e:	f7ff fc79 	bl	8004a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005152:	2360      	movs	r3, #96	; 0x60
 8005154:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	2200      	movs	r2, #0
 8005166:	4619      	mov	r1, r3
 8005168:	4813      	ldr	r0, [pc, #76]	; (80051b8 <MX_TIM5_Init+0xdc>)
 800516a:	f003 fc43 	bl	80089f4 <HAL_TIM_PWM_ConfigChannel>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8005174:	f7ff fc66 	bl	8004a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	2204      	movs	r2, #4
 800517c:	4619      	mov	r1, r3
 800517e:	480e      	ldr	r0, [pc, #56]	; (80051b8 <MX_TIM5_Init+0xdc>)
 8005180:	f003 fc38 	bl	80089f4 <HAL_TIM_PWM_ConfigChannel>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800518a:	f7ff fc5b 	bl	8004a44 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 800518e:	2332      	movs	r3, #50	; 0x32
 8005190:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	2208      	movs	r2, #8
 8005196:	4619      	mov	r1, r3
 8005198:	4807      	ldr	r0, [pc, #28]	; (80051b8 <MX_TIM5_Init+0xdc>)
 800519a:	f003 fc2b 	bl	80089f4 <HAL_TIM_PWM_ConfigChannel>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_TIM5_Init+0xcc>
  {
    Error_Handler();
 80051a4:	f7ff fc4e 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80051a8:	4803      	ldr	r0, [pc, #12]	; (80051b8 <MX_TIM5_Init+0xdc>)
 80051aa:	f000 f9df 	bl	800556c <HAL_TIM_MspPostInit>

}
 80051ae:	bf00      	nop
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200004e4 	.word	0x200004e4
 80051bc:	40000c00 	.word	0x40000c00

080051c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80051c6:	f107 031c 	add.w	r3, r7, #28
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	605a      	str	r2, [r3, #4]
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80051ec:	4b34      	ldr	r3, [pc, #208]	; (80052c0 <MX_TIM8_Init+0x100>)
 80051ee:	4a35      	ldr	r2, [pc, #212]	; (80052c4 <MX_TIM8_Init+0x104>)
 80051f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 719;
 80051f2:	4b33      	ldr	r3, [pc, #204]	; (80052c0 <MX_TIM8_Init+0x100>)
 80051f4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80051f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <MX_TIM8_Init+0x100>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 14999;
 8005200:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <MX_TIM8_Init+0x100>)
 8005202:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005206:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005208:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <MX_TIM8_Init+0x100>)
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800520e:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <MX_TIM8_Init+0x100>)
 8005210:	2200      	movs	r2, #0
 8005212:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <MX_TIM8_Init+0x100>)
 8005216:	2200      	movs	r2, #0
 8005218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800521a:	4829      	ldr	r0, [pc, #164]	; (80052c0 <MX_TIM8_Init+0x100>)
 800521c:	f002 ffba 	bl	8008194 <HAL_TIM_IC_Init>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8005226:	f7ff fc0d 	bl	8004a44 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800522a:	2304      	movs	r3, #4
 800522c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800522e:	2350      	movs	r3, #80	; 0x50
 8005230:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800523e:	f107 031c 	add.w	r3, r7, #28
 8005242:	4619      	mov	r1, r3
 8005244:	481e      	ldr	r0, [pc, #120]	; (80052c0 <MX_TIM8_Init+0x100>)
 8005246:	f003 fc93 	bl	8008b70 <HAL_TIM_SlaveConfigSynchro>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8005250:	f7ff fbf8 	bl	8004a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005258:	2301      	movs	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	2200      	movs	r2, #0
 800526a:	4619      	mov	r1, r3
 800526c:	4814      	ldr	r0, [pc, #80]	; (80052c0 <MX_TIM8_Init+0x100>)
 800526e:	f003 fb2d 	bl	80088cc <HAL_TIM_IC_ConfigChannel>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8005278:	f7ff fbe4 	bl	8004a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800527c:	2302      	movs	r3, #2
 800527e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005280:	2302      	movs	r3, #2
 8005282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	2204      	movs	r2, #4
 800528a:	4619      	mov	r1, r3
 800528c:	480c      	ldr	r0, [pc, #48]	; (80052c0 <MX_TIM8_Init+0x100>)
 800528e:	f003 fb1d 	bl	80088cc <HAL_TIM_IC_ConfigChannel>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8005298:	f7ff fbd4 	bl	8004a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800529c:	2300      	movs	r3, #0
 800529e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4805      	ldr	r0, [pc, #20]	; (80052c0 <MX_TIM8_Init+0x100>)
 80052aa:	f004 f92d 	bl	8009508 <HAL_TIMEx_MasterConfigSynchronization>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80052b4:	f7ff fbc6 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80052b8:	bf00      	nop
 80052ba:	3730      	adds	r7, #48	; 0x30
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	2000052c 	.word	0x2000052c
 80052c4:	40013400 	.word	0x40013400

080052c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	; 0x30
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d0:	f107 0318 	add.w	r3, r7, #24
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a3b      	ldr	r2, [pc, #236]	; (80053d0 <HAL_TIM_Encoder_MspInit+0x108>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d137      	bne.n	8005358 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	4a39      	ldr	r2, [pc, #228]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80052ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052f2:	6193      	str	r3, [r2, #24]
 80052f4:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005300:	4b34      	ldr	r3, [pc, #208]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4a33      	ldr	r2, [pc, #204]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530a:	6193      	str	r3, [r2, #24]
 800530c:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_R_A_Pin|Encoder_R_B_Pin;
 8005318:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800531c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005326:	f107 0318 	add.w	r3, r7, #24
 800532a:	4619      	mov	r1, r3
 800532c:	482a      	ldr	r0, [pc, #168]	; (80053d8 <HAL_TIM_Encoder_MspInit+0x110>)
 800532e:	f000 fe53 	bl	8005fd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8005332:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <HAL_TIM_Encoder_MspInit+0x114>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_TIM_Encoder_MspInit+0x114>)
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005356:	e037      	b.n	80053c8 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM4)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <HAL_TIM_Encoder_MspInit+0x118>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d132      	bne.n	80053c8 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005368:	f043 0304 	orr.w	r3, r3, #4
 800536c:	61d3      	str	r3, [r2, #28]
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800537a:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005380:	f043 0320 	orr.w	r3, r3, #32
 8005384:	6193      	str	r3, [r2, #24]
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_L_A_Pin|Encoder_L_B_Pin;
 8005392:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053a0:	f107 0318 	add.w	r3, r7, #24
 80053a4:	4619      	mov	r1, r3
 80053a6:	480f      	ldr	r0, [pc, #60]	; (80053e4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80053a8:	f000 fe16 	bl	8005fd8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_TIM_Encoder_MspInit+0x114>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c2:	4a06      	ldr	r2, [pc, #24]	; (80053dc <HAL_TIM_Encoder_MspInit+0x114>)
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	6053      	str	r3, [r2, #4]
}
 80053c8:	bf00      	nop
 80053ca:	3730      	adds	r7, #48	; 0x30
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40011800 	.word	0x40011800
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40011400 	.word	0x40011400

080053e8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	; 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f0:	f107 031c 	add.w	r3, r7, #28
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d13f      	bne.n	8005488 <HAL_TIM_IC_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005408:	4b3a      	ldr	r3, [pc, #232]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4a39      	ldr	r2, [pc, #228]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	61d3      	str	r3, [r2, #28]
 8005414:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005420:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4a33      	ldr	r2, [pc, #204]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	6193      	str	r3, [r2, #24]
 800542c:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Ultra_1_Echo_Pin;
 8005438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800543e:	2300      	movs	r3, #0
 8005440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ultra_1_Echo_GPIO_Port, &GPIO_InitStruct);
 8005446:	f107 031c 	add.w	r3, r7, #28
 800544a:	4619      	mov	r1, r3
 800544c:	482a      	ldr	r0, [pc, #168]	; (80054f8 <HAL_TIM_IC_MspInit+0x110>)
 800544e:	f000 fdc3 	bl	8005fd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005452:	4b2a      	ldr	r3, [pc, #168]	; (80054fc <HAL_TIM_IC_MspInit+0x114>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <HAL_TIM_IC_MspInit+0x114>)
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005476:	2200      	movs	r2, #0
 8005478:	2105      	movs	r1, #5
 800547a:	201c      	movs	r0, #28
 800547c:	f000 fd81 	bl	8005f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005480:	201c      	movs	r0, #28
 8005482:	f000 fd9a 	bl	8005fba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005486:	e030      	b.n	80054ea <HAL_TIM_IC_MspInit+0x102>
  else if(tim_icHandle->Instance==TIM8)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_TIM_IC_MspInit+0x118>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d12b      	bne.n	80054ea <HAL_TIM_IC_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005492:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 8005498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800549c:	6193      	str	r3, [r2, #24]
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 80054b0:	f043 0310 	orr.w	r3, r3, #16
 80054b4:	6193      	str	r3, [r2, #24]
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <HAL_TIM_IC_MspInit+0x10c>)
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Ultra_2_Echo_Pin;
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054c6:	2300      	movs	r3, #0
 80054c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ultra_2_Echo_GPIO_Port, &GPIO_InitStruct);
 80054ce:	f107 031c 	add.w	r3, r7, #28
 80054d2:	4619      	mov	r1, r3
 80054d4:	480b      	ldr	r0, [pc, #44]	; (8005504 <HAL_TIM_IC_MspInit+0x11c>)
 80054d6:	f000 fd7f 	bl	8005fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80054da:	2200      	movs	r2, #0
 80054dc:	2105      	movs	r1, #5
 80054de:	202e      	movs	r0, #46	; 0x2e
 80054e0:	f000 fd4f 	bl	8005f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80054e4:	202e      	movs	r0, #46	; 0x2e
 80054e6:	f000 fd68 	bl	8005fba <HAL_NVIC_EnableIRQ>
}
 80054ea:	bf00      	nop
 80054ec:	3730      	adds	r7, #48	; 0x30
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40010800 	.word	0x40010800
 80054fc:	40010000 	.word	0x40010000
 8005500:	40013400 	.word	0x40013400
 8005504:	40011000 	.word	0x40011000

08005508 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <HAL_TIM_PWM_MspInit+0x58>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d10c      	bne.n	8005534 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_TIM_PWM_MspInit+0x5c>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	4a11      	ldr	r2, [pc, #68]	; (8005564 <HAL_TIM_PWM_MspInit+0x5c>)
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	61d3      	str	r3, [r2, #28]
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <HAL_TIM_PWM_MspInit+0x5c>)
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005532:	e010      	b.n	8005556 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM5)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <HAL_TIM_PWM_MspInit+0x60>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d10b      	bne.n	8005556 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_TIM_PWM_MspInit+0x5c>)
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	4a08      	ldr	r2, [pc, #32]	; (8005564 <HAL_TIM_PWM_MspInit+0x5c>)
 8005544:	f043 0308 	orr.w	r3, r3, #8
 8005548:	61d3      	str	r3, [r2, #28]
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_TIM_PWM_MspInit+0x5c>)
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	40000400 	.word	0x40000400
 8005564:	40021000 	.word	0x40021000
 8005568:	40000c00 	.word	0x40000c00

0800556c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a27      	ldr	r2, [pc, #156]	; (8005624 <HAL_TIM_MspPostInit+0xb8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d12a      	bne.n	80055e2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800558c:	4b26      	ldr	r3, [pc, #152]	; (8005628 <HAL_TIM_MspPostInit+0xbc>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_TIM_MspPostInit+0xbc>)
 8005592:	f043 0308 	orr.w	r3, r3, #8
 8005596:	6193      	str	r3, [r2, #24]
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HAL_TIM_MspPostInit+0xbc>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Ultra_Trig_Pin;
 80055a4:	2320      	movs	r3, #32
 80055a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a8:	2302      	movs	r3, #2
 80055aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ac:	2302      	movs	r3, #2
 80055ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Ultra_Trig_GPIO_Port, &GPIO_InitStruct);
 80055b0:	f107 0314 	add.w	r3, r7, #20
 80055b4:	4619      	mov	r1, r3
 80055b6:	481d      	ldr	r0, [pc, #116]	; (800562c <HAL_TIM_MspPostInit+0xc0>)
 80055b8:	f000 fd0e 	bl	8005fd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80055bc:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <HAL_TIM_MspPostInit+0xc4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	4a15      	ldr	r2, [pc, #84]	; (8005630 <HAL_TIM_MspPostInit+0xc4>)
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80055e0:	e01c      	b.n	800561c <HAL_TIM_MspPostInit+0xb0>
  else if(timHandle->Instance==TIM5)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a13      	ldr	r2, [pc, #76]	; (8005634 <HAL_TIM_MspPostInit+0xc8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d117      	bne.n	800561c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <HAL_TIM_MspPostInit+0xbc>)
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <HAL_TIM_MspPostInit+0xbc>)
 80055f2:	f043 0304 	orr.w	r3, r3, #4
 80055f6:	6193      	str	r3, [r2, #24]
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_TIM_MspPostInit+0xbc>)
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EB_Pin|EA_Pin|Egine_Pin;
 8005604:	2307      	movs	r3, #7
 8005606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005608:	2302      	movs	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560c:	2302      	movs	r3, #2
 800560e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	4619      	mov	r1, r3
 8005616:	4808      	ldr	r0, [pc, #32]	; (8005638 <HAL_TIM_MspPostInit+0xcc>)
 8005618:	f000 fcde 	bl	8005fd8 <HAL_GPIO_Init>
}
 800561c:	bf00      	nop
 800561e:	3728      	adds	r7, #40	; 0x28
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40000400 	.word	0x40000400
 8005628:	40021000 	.word	0x40021000
 800562c:	40010c00 	.word	0x40010c00
 8005630:	40010000 	.word	0x40010000
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40010800 	.word	0x40010800

0800563c <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <MX_UART4_Init+0x4c>)
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <MX_UART4_Init+0x50>)
 8005644:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <MX_UART4_Init+0x4c>)
 8005648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800564c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800564e:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <MX_UART4_Init+0x4c>)
 8005650:	2200      	movs	r2, #0
 8005652:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <MX_UART4_Init+0x4c>)
 8005656:	2200      	movs	r2, #0
 8005658:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <MX_UART4_Init+0x4c>)
 800565c:	2200      	movs	r2, #0
 800565e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <MX_UART4_Init+0x4c>)
 8005662:	220c      	movs	r2, #12
 8005664:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <MX_UART4_Init+0x4c>)
 8005668:	2200      	movs	r2, #0
 800566a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <MX_UART4_Init+0x4c>)
 800566e:	2200      	movs	r2, #0
 8005670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005672:	4805      	ldr	r0, [pc, #20]	; (8005688 <MX_UART4_Init+0x4c>)
 8005674:	f003 ffc6 	bl	8009604 <HAL_UART_Init>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800567e:	f7ff f9e1 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000574 	.word	0x20000574
 800568c:	40004c00 	.word	0x40004c00

08005690 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <MX_UART5_Init+0x4c>)
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <MX_UART5_Init+0x50>)
 8005698:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <MX_UART5_Init+0x4c>)
 800569c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <MX_UART5_Init+0x4c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <MX_UART5_Init+0x4c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <MX_UART5_Init+0x4c>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <MX_UART5_Init+0x4c>)
 80056b6:	220c      	movs	r2, #12
 80056b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <MX_UART5_Init+0x4c>)
 80056bc:	2200      	movs	r2, #0
 80056be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <MX_UART5_Init+0x4c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80056c6:	4805      	ldr	r0, [pc, #20]	; (80056dc <MX_UART5_Init+0x4c>)
 80056c8:	f003 ff9c 	bl	8009604 <HAL_UART_Init>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80056d2:	f7ff f9b7 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200005b8 	.word	0x200005b8
 80056e0:	40005000 	.word	0x40005000

080056e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <MX_USART1_UART_Init+0x50>)
 80056ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 80056f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 8005704:	2200      	movs	r2, #0
 8005706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 800570a:	220c      	movs	r2, #12
 800570c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 8005710:	2200      	movs	r2, #0
 8005712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 8005716:	2200      	movs	r2, #0
 8005718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <MX_USART1_UART_Init+0x4c>)
 800571c:	f003 ff72 	bl	8009604 <HAL_UART_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005726:	f7ff f98d 	bl	8004a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200005fc 	.word	0x200005fc
 8005734:	40013800 	.word	0x40013800

08005738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5a      	ldr	r2, [pc, #360]	; (80058bc <HAL_UART_MspInit+0x184>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d132      	bne.n	80057be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005758:	4b59      	ldr	r3, [pc, #356]	; (80058c0 <HAL_UART_MspInit+0x188>)
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	4a58      	ldr	r2, [pc, #352]	; (80058c0 <HAL_UART_MspInit+0x188>)
 800575e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005762:	61d3      	str	r3, [r2, #28]
 8005764:	4b56      	ldr	r3, [pc, #344]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005770:	4b53      	ldr	r3, [pc, #332]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4a52      	ldr	r2, [pc, #328]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005776:	f043 0310 	orr.w	r3, r3, #16
 800577a:	6193      	str	r3, [r2, #24]
 800577c:	4b50      	ldr	r3, [pc, #320]	; (80058c0 <HAL_UART_MspInit+0x188>)
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Com_TX_Pin;
 8005788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578e:	2302      	movs	r3, #2
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005792:	2303      	movs	r3, #3
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Com_TX_GPIO_Port, &GPIO_InitStruct);
 8005796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800579a:	4619      	mov	r1, r3
 800579c:	4849      	ldr	r0, [pc, #292]	; (80058c4 <HAL_UART_MspInit+0x18c>)
 800579e:	f000 fc1b 	bl	8005fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Com_RX_Pin;
 80057a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(Com_RX_GPIO_Port, &GPIO_InitStruct);
 80057b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057b4:	4619      	mov	r1, r3
 80057b6:	4843      	ldr	r0, [pc, #268]	; (80058c4 <HAL_UART_MspInit+0x18c>)
 80057b8:	f000 fc0e 	bl	8005fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80057bc:	e079      	b.n	80058b2 <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==UART5)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <HAL_UART_MspInit+0x190>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d13d      	bne.n	8005844 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80057c8:	4b3d      	ldr	r3, [pc, #244]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4a3c      	ldr	r2, [pc, #240]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	61d3      	str	r3, [r2, #28]
 80057d4:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057e0:	4b37      	ldr	r3, [pc, #220]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	4a36      	ldr	r2, [pc, #216]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057e6:	f043 0310 	orr.w	r3, r3, #16
 80057ea:	6193      	str	r3, [r2, #24]
 80057ec:	4b34      	ldr	r3, [pc, #208]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057f8:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4a30      	ldr	r2, [pc, #192]	; (80058c0 <HAL_UART_MspInit+0x188>)
 80057fe:	f043 0320 	orr.w	r3, r3, #32
 8005802:	6193      	str	r3, [r2, #24]
 8005804:	4b2e      	ldr	r3, [pc, #184]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Info_TX_Pin;
 8005810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005816:	2302      	movs	r3, #2
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800581a:	2303      	movs	r3, #3
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Info_TX_GPIO_Port, &GPIO_InitStruct);
 800581e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005822:	4619      	mov	r1, r3
 8005824:	4827      	ldr	r0, [pc, #156]	; (80058c4 <HAL_UART_MspInit+0x18c>)
 8005826:	f000 fbd7 	bl	8005fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Info_RX_Pin;
 800582a:	2304      	movs	r3, #4
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800582e:	2300      	movs	r3, #0
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005832:	2300      	movs	r3, #0
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(Info_RX_GPIO_Port, &GPIO_InitStruct);
 8005836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800583a:	4619      	mov	r1, r3
 800583c:	4823      	ldr	r0, [pc, #140]	; (80058cc <HAL_UART_MspInit+0x194>)
 800583e:	f000 fbcb 	bl	8005fd8 <HAL_GPIO_Init>
}
 8005842:	e036      	b.n	80058b2 <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==USART1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_UART_MspInit+0x198>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d131      	bne.n	80058b2 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800584e:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005858:	6193      	str	r3, [r2, #24]
 800585a:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <HAL_UART_MspInit+0x188>)
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005866:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <HAL_UART_MspInit+0x188>)
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	6193      	str	r3, [r2, #24]
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <HAL_UART_MspInit+0x188>)
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800587e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005884:	2302      	movs	r3, #2
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005888:	2303      	movs	r3, #3
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800588c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005890:	4619      	mov	r1, r3
 8005892:	4810      	ldr	r0, [pc, #64]	; (80058d4 <HAL_UART_MspInit+0x19c>)
 8005894:	f000 fba0 	bl	8005fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800589e:	2300      	movs	r3, #0
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058aa:	4619      	mov	r1, r3
 80058ac:	4809      	ldr	r0, [pc, #36]	; (80058d4 <HAL_UART_MspInit+0x19c>)
 80058ae:	f000 fb93 	bl	8005fd8 <HAL_GPIO_Init>
}
 80058b2:	bf00      	nop
 80058b4:	3738      	adds	r7, #56	; 0x38
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40004c00 	.word	0x40004c00
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40011000 	.word	0x40011000
 80058c8:	40005000 	.word	0x40005000
 80058cc:	40011400 	.word	0x40011400
 80058d0:	40013800 	.word	0x40013800
 80058d4:	40010800 	.word	0x40010800

080058d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058d8:	480c      	ldr	r0, [pc, #48]	; (800590c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058da:	490d      	ldr	r1, [pc, #52]	; (8005910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058e0:	e002      	b.n	80058e8 <LoopCopyDataInit>

080058e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058e6:	3304      	adds	r3, #4

080058e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058ec:	d3f9      	bcc.n	80058e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058f0:	4c0a      	ldr	r4, [pc, #40]	; (800591c <LoopFillZerobss+0x22>)
  movs r3, #0
 80058f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058f4:	e001      	b.n	80058fa <LoopFillZerobss>

080058f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058f8:	3204      	adds	r2, #4

080058fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058fc:	d3fb      	bcc.n	80058f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058fe:	f7ff fa61 	bl	8004dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005902:	f007 fa05 	bl	800cd10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005906:	f7ff f807 	bl	8004918 <main>
  bx lr
 800590a:	4770      	bx	lr
  ldr r0, =_sdata
 800590c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005910:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005914:	08011ca8 	.word	0x08011ca8
  ldr r2, =_sbss
 8005918:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800591c:	20007940 	.word	0x20007940

08005920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005920:	e7fe      	b.n	8005920 <ADC1_2_IRQHandler>
	...

08005924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <HAL_Init+0x28>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_Init+0x28>)
 800592e:	f043 0310 	orr.w	r3, r3, #16
 8005932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005934:	2003      	movs	r0, #3
 8005936:	f000 fb19 	bl	8005f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800593a:	200f      	movs	r0, #15
 800593c:	f7ff f8b0 	bl	8004aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005940:	f7ff f886 	bl	8004a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40022000 	.word	0x40022000

08005950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_IncTick+0x1c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_IncTick+0x20>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4413      	add	r3, r2
 8005960:	4a03      	ldr	r2, [pc, #12]	; (8005970 <HAL_IncTick+0x20>)
 8005962:	6013      	str	r3, [r2, #0]
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	20000030 	.word	0x20000030
 8005970:	20000640 	.word	0x20000640

08005974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  return uwTick;
 8005978:	4b02      	ldr	r3, [pc, #8]	; (8005984 <HAL_GetTick+0x10>)
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr
 8005984:	20000640 	.word	0x20000640

08005988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005990:	f7ff fff0 	bl	8005974 <HAL_GetTick>
 8005994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d005      	beq.n	80059ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059a2:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <HAL_Delay+0x44>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059ae:	bf00      	nop
 80059b0:	f7ff ffe0 	bl	8005974 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d8f7      	bhi.n	80059b0 <HAL_Delay+0x28>
  {
  }
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000030 	.word	0x20000030

080059d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0ce      	b.n	8005b90 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fb fc32 	bl	8001278 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f9bd 	bl	8005d94 <ADC_ConversionStop_Disable>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 80a9 	bne.w	8005b7e <HAL_ADC_Init+0x1ae>
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 80a5 	bne.w	8005b7e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a3c:	f023 0302 	bic.w	r3, r3, #2
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4951      	ldr	r1, [pc, #324]	; (8005b98 <HAL_ADC_Init+0x1c8>)
 8005a52:	428b      	cmp	r3, r1
 8005a54:	d10a      	bne.n	8005a6c <HAL_ADC_Init+0x9c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a5e:	d002      	beq.n	8005a66 <HAL_ADC_Init+0x96>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	e004      	b.n	8005a70 <HAL_ADC_Init+0xa0>
 8005a66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a6a:	e001      	b.n	8005a70 <HAL_ADC_Init+0xa0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7b1b      	ldrb	r3, [r3, #12]
 8005a76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005a78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a88:	d003      	beq.n	8005a92 <HAL_ADC_Init+0xc2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_ADC_Init+0xc8>
 8005a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a96:	e000      	b.n	8005a9a <HAL_ADC_Init+0xca>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7d1b      	ldrb	r3, [r3, #20]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d119      	bne.n	8005adc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7b1b      	ldrb	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	035a      	lsls	r2, r3, #13
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e00b      	b.n	8005adc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f043 0201 	orr.w	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <HAL_ADC_Init+0x1cc>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0c:	d003      	beq.n	8005b16 <HAL_ADC_Init+0x146>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d104      	bne.n	8005b20 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	051b      	lsls	r3, r3, #20
 8005b1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <HAL_ADC_Init+0x1d0>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d10b      	bne.n	8005b5c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b5a:	e018      	b.n	8005b8e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f023 0312 	bic.w	r3, r3, #18
 8005b64:	f043 0210 	orr.w	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005b7c:	e007      	b.n	8005b8e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f043 0210 	orr.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40013c00 	.word	0x40013c00
 8005b9c:	ffe1f7fd 	.word	0xffe1f7fd
 8005ba0:	ff1f0efe 	.word	0xff1f0efe

08005ba4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x20>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e0dc      	b.n	8005d7e <HAL_ADC_ConfigChannel+0x1da>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d81c      	bhi.n	8005c0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	3b05      	subs	r3, #5
 8005be6:	221f      	movs	r2, #31
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	4019      	ands	r1, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3b05      	subs	r3, #5
 8005c00:	fa00 f203 	lsl.w	r2, r0, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	635a      	str	r2, [r3, #52]	; 0x34
 8005c0c:	e03c      	b.n	8005c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	d81c      	bhi.n	8005c50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	3b23      	subs	r3, #35	; 0x23
 8005c28:	221f      	movs	r2, #31
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	4019      	ands	r1, r3
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	3b23      	subs	r3, #35	; 0x23
 8005c42:	fa00 f203 	lsl.w	r2, r0, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c4e:	e01b      	b.n	8005c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	3b41      	subs	r3, #65	; 0x41
 8005c62:	221f      	movs	r2, #31
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	4019      	ands	r1, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	3b41      	subs	r3, #65	; 0x41
 8005c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b09      	cmp	r3, #9
 8005c8e:	d91c      	bls.n	8005cca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68d9      	ldr	r1, [r3, #12]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3b1e      	subs	r3, #30
 8005ca2:	2207      	movs	r2, #7
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	4019      	ands	r1, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6898      	ldr	r0, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	3b1e      	subs	r3, #30
 8005cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]
 8005cc8:	e019      	b.n	8005cfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6919      	ldr	r1, [r3, #16]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	2207      	movs	r2, #7
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	4019      	ands	r1, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6898      	ldr	r0, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d003      	beq.n	8005d0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d0a:	2b11      	cmp	r3, #17
 8005d0c:	d132      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <HAL_ADC_ConfigChannel+0x1e4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d125      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d126      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005d34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d11a      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <HAL_ADC_ConfigChannel+0x1e8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <HAL_ADC_ConfigChannel+0x1ec>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	0c9a      	lsrs	r2, r3, #18
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d54:	e002      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f9      	bne.n	8005d56 <HAL_ADC_ConfigChannel+0x1b2>
 8005d62:	e007      	b.n	8005d74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	40012400 	.word	0x40012400
 8005d8c:	20000028 	.word	0x20000028
 8005d90:	431bde83 	.word	0x431bde83

08005d94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d12e      	bne.n	8005e0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005dbe:	f7ff fdd9 	bl	8005974 <HAL_GetTick>
 8005dc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005dc4:	e01b      	b.n	8005dfe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005dc6:	f7ff fdd5 	bl	8005974 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d914      	bls.n	8005dfe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10d      	bne.n	8005dfe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f043 0210 	orr.w	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e007      	b.n	8005e0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d0dc      	beq.n	8005dc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <__NVIC_SetPriorityGrouping+0x44>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e34:	4013      	ands	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e4a:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <__NVIC_SetPriorityGrouping+0x44>)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	60d3      	str	r3, [r2, #12]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <__NVIC_GetPriorityGrouping+0x18>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	0a1b      	lsrs	r3, r3, #8
 8005e6a:	f003 0307 	and.w	r3, r3, #7
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	e000ed00 	.word	0xe000ed00

08005e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	db0b      	blt.n	8005ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	f003 021f 	and.w	r2, r3, #31
 8005e94:	4906      	ldr	r1, [pc, #24]	; (8005eb0 <__NVIC_EnableIRQ+0x34>)
 8005e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	e000e100 	.word	0xe000e100

08005eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	db0a      	blt.n	8005ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	490c      	ldr	r1, [pc, #48]	; (8005f00 <__NVIC_SetPriority+0x4c>)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	0112      	lsls	r2, r2, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005edc:	e00a      	b.n	8005ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4908      	ldr	r1, [pc, #32]	; (8005f04 <__NVIC_SetPriority+0x50>)
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	3b04      	subs	r3, #4
 8005eec:	0112      	lsls	r2, r2, #4
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	761a      	strb	r2, [r3, #24]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000e100 	.word	0xe000e100
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b089      	sub	sp, #36	; 0x24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f1c3 0307 	rsb	r3, r3, #7
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	bf28      	it	cs
 8005f26:	2304      	movcs	r3, #4
 8005f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d902      	bls.n	8005f38 <NVIC_EncodePriority+0x30>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3b03      	subs	r3, #3
 8005f36:	e000      	b.n	8005f3a <NVIC_EncodePriority+0x32>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f50:	f04f 31ff 	mov.w	r1, #4294967295
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	43d9      	mvns	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f60:	4313      	orrs	r3, r2
         );
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff4f 	bl	8005e18 <__NVIC_SetPriorityGrouping>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	4603      	mov	r3, r0
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f94:	f7ff ff64 	bl	8005e60 <__NVIC_GetPriorityGrouping>
 8005f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f7ff ffb2 	bl	8005f08 <NVIC_EncodePriority>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff ff81 	bl	8005eb4 <__NVIC_SetPriority>
}
 8005fb2:	bf00      	nop
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff ff57 	bl	8005e7c <__NVIC_EnableIRQ>
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b08b      	sub	sp, #44	; 0x2c
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fea:	e179      	b.n	80062e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fec:	2201      	movs	r2, #1
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	429a      	cmp	r2, r3
 8006006:	f040 8168 	bne.w	80062da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4a96      	ldr	r2, [pc, #600]	; (8006268 <HAL_GPIO_Init+0x290>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d05e      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006014:	4a94      	ldr	r2, [pc, #592]	; (8006268 <HAL_GPIO_Init+0x290>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d875      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 800601a:	4a94      	ldr	r2, [pc, #592]	; (800626c <HAL_GPIO_Init+0x294>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d058      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006020:	4a92      	ldr	r2, [pc, #584]	; (800626c <HAL_GPIO_Init+0x294>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d86f      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 8006026:	4a92      	ldr	r2, [pc, #584]	; (8006270 <HAL_GPIO_Init+0x298>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d052      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 800602c:	4a90      	ldr	r2, [pc, #576]	; (8006270 <HAL_GPIO_Init+0x298>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d869      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 8006032:	4a90      	ldr	r2, [pc, #576]	; (8006274 <HAL_GPIO_Init+0x29c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04c      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006038:	4a8e      	ldr	r2, [pc, #568]	; (8006274 <HAL_GPIO_Init+0x29c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d863      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 800603e:	4a8e      	ldr	r2, [pc, #568]	; (8006278 <HAL_GPIO_Init+0x2a0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d046      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
 8006044:	4a8c      	ldr	r2, [pc, #560]	; (8006278 <HAL_GPIO_Init+0x2a0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d85d      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 800604a:	2b12      	cmp	r3, #18
 800604c:	d82a      	bhi.n	80060a4 <HAL_GPIO_Init+0xcc>
 800604e:	2b12      	cmp	r3, #18
 8006050:	d859      	bhi.n	8006106 <HAL_GPIO_Init+0x12e>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_GPIO_Init+0x80>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	080060d3 	.word	0x080060d3
 800605c:	080060ad 	.word	0x080060ad
 8006060:	080060bf 	.word	0x080060bf
 8006064:	08006101 	.word	0x08006101
 8006068:	08006107 	.word	0x08006107
 800606c:	08006107 	.word	0x08006107
 8006070:	08006107 	.word	0x08006107
 8006074:	08006107 	.word	0x08006107
 8006078:	08006107 	.word	0x08006107
 800607c:	08006107 	.word	0x08006107
 8006080:	08006107 	.word	0x08006107
 8006084:	08006107 	.word	0x08006107
 8006088:	08006107 	.word	0x08006107
 800608c:	08006107 	.word	0x08006107
 8006090:	08006107 	.word	0x08006107
 8006094:	08006107 	.word	0x08006107
 8006098:	08006107 	.word	0x08006107
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	4a75      	ldr	r2, [pc, #468]	; (800627c <HAL_GPIO_Init+0x2a4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80060aa:	e02c      	b.n	8006106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	623b      	str	r3, [r7, #32]
          break;
 80060b2:	e029      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	3304      	adds	r3, #4
 80060ba:	623b      	str	r3, [r7, #32]
          break;
 80060bc:	e024      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	3308      	adds	r3, #8
 80060c4:	623b      	str	r3, [r7, #32]
          break;
 80060c6:	e01f      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	330c      	adds	r3, #12
 80060ce:	623b      	str	r3, [r7, #32]
          break;
 80060d0:	e01a      	b.n	8006108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060da:	2304      	movs	r3, #4
 80060dc:	623b      	str	r3, [r7, #32]
          break;
 80060de:	e013      	b.n	8006108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060e8:	2308      	movs	r3, #8
 80060ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	611a      	str	r2, [r3, #16]
          break;
 80060f2:	e009      	b.n	8006108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060f4:	2308      	movs	r3, #8
 80060f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	615a      	str	r2, [r3, #20]
          break;
 80060fe:	e003      	b.n	8006108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
          break;
 8006104:	e000      	b.n	8006108 <HAL_GPIO_Init+0x130>
          break;
 8006106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2bff      	cmp	r3, #255	; 0xff
 800610c:	d801      	bhi.n	8006112 <HAL_GPIO_Init+0x13a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	e001      	b.n	8006116 <HAL_GPIO_Init+0x13e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2bff      	cmp	r3, #255	; 0xff
 800611c:	d802      	bhi.n	8006124 <HAL_GPIO_Init+0x14c>
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	e002      	b.n	800612a <HAL_GPIO_Init+0x152>
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	3b08      	subs	r3, #8
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	210f      	movs	r1, #15
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	401a      	ands	r2, r3
 800613c:	6a39      	ldr	r1, [r7, #32]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	fa01 f303 	lsl.w	r3, r1, r3
 8006144:	431a      	orrs	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80c1 	beq.w	80062da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006158:	4b49      	ldr	r3, [pc, #292]	; (8006280 <HAL_GPIO_Init+0x2a8>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	4a48      	ldr	r2, [pc, #288]	; (8006280 <HAL_GPIO_Init+0x2a8>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	6193      	str	r3, [r2, #24]
 8006164:	4b46      	ldr	r3, [pc, #280]	; (8006280 <HAL_GPIO_Init+0x2a8>)
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006170:	4a44      	ldr	r2, [pc, #272]	; (8006284 <HAL_GPIO_Init+0x2ac>)
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	3302      	adds	r3, #2
 8006178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	220f      	movs	r2, #15
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <HAL_GPIO_Init+0x2b0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d01f      	beq.n	80061dc <HAL_GPIO_Init+0x204>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <HAL_GPIO_Init+0x2b4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d019      	beq.n	80061d8 <HAL_GPIO_Init+0x200>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <HAL_GPIO_Init+0x2b8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <HAL_GPIO_Init+0x1fc>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a39      	ldr	r2, [pc, #228]	; (8006294 <HAL_GPIO_Init+0x2bc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00d      	beq.n	80061d0 <HAL_GPIO_Init+0x1f8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a38      	ldr	r2, [pc, #224]	; (8006298 <HAL_GPIO_Init+0x2c0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <HAL_GPIO_Init+0x1f4>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <HAL_GPIO_Init+0x2c4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_GPIO_Init+0x1f0>
 80061c4:	2305      	movs	r3, #5
 80061c6:	e00a      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061c8:	2306      	movs	r3, #6
 80061ca:	e008      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061cc:	2304      	movs	r3, #4
 80061ce:	e006      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061d0:	2303      	movs	r3, #3
 80061d2:	e004      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e002      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <HAL_GPIO_Init+0x206>
 80061dc:	2300      	movs	r3, #0
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	f002 0203 	and.w	r2, r2, #3
 80061e4:	0092      	lsls	r2, r2, #2
 80061e6:	4093      	lsls	r3, r2
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80061ee:	4925      	ldr	r1, [pc, #148]	; (8006284 <HAL_GPIO_Init+0x2ac>)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	3302      	adds	r3, #2
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006208:	4b25      	ldr	r3, [pc, #148]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	4924      	ldr	r1, [pc, #144]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	4313      	orrs	r3, r2
 8006212:	600b      	str	r3, [r1, #0]
 8006214:	e006      	b.n	8006224 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006216:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	43db      	mvns	r3, r3
 800621e:	4920      	ldr	r1, [pc, #128]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006220:	4013      	ands	r3, r2
 8006222:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d006      	beq.n	800623e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	491a      	ldr	r1, [pc, #104]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
 800623c:	e006      	b.n	800624c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800623e:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	43db      	mvns	r3, r3
 8006246:	4916      	ldr	r1, [pc, #88]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 8006248:	4013      	ands	r3, r2
 800624a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d025      	beq.n	80062a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	4910      	ldr	r1, [pc, #64]	; (80062a0 <HAL_GPIO_Init+0x2c8>)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4313      	orrs	r3, r2
 8006262:	608b      	str	r3, [r1, #8]
 8006264:	e025      	b.n	80062b2 <HAL_GPIO_Init+0x2da>
 8006266:	bf00      	nop
 8006268:	10320000 	.word	0x10320000
 800626c:	10310000 	.word	0x10310000
 8006270:	10220000 	.word	0x10220000
 8006274:	10210000 	.word	0x10210000
 8006278:	10120000 	.word	0x10120000
 800627c:	10110000 	.word	0x10110000
 8006280:	40021000 	.word	0x40021000
 8006284:	40010000 	.word	0x40010000
 8006288:	40010800 	.word	0x40010800
 800628c:	40010c00 	.word	0x40010c00
 8006290:	40011000 	.word	0x40011000
 8006294:	40011400 	.word	0x40011400
 8006298:	40011800 	.word	0x40011800
 800629c:	40011c00 	.word	0x40011c00
 80062a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80062a4:	4b15      	ldr	r3, [pc, #84]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	4913      	ldr	r1, [pc, #76]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	490e      	ldr	r1, [pc, #56]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60cb      	str	r3, [r1, #12]
 80062ca:	e006      	b.n	80062da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	4909      	ldr	r1, [pc, #36]	; (80062fc <HAL_GPIO_Init+0x324>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	3301      	adds	r3, #1
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f ae7e 	bne.w	8005fec <HAL_GPIO_Init+0x14>
  }
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	372c      	adds	r7, #44	; 0x2c
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	40010400 	.word	0x40010400

08006300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
 800631c:	e001      	b.n	8006322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006322:	7bfb      	ldrb	r3, [r7, #15]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	807b      	strh	r3, [r7, #2]
 800633a:	4613      	mov	r3, r2
 800633c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800633e:	787b      	ldrb	r3, [r7, #1]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006344:	887a      	ldrh	r2, [r7, #2]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800634a:	e003      	b.n	8006354 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800634c:	887b      	ldrh	r3, [r7, #2]
 800634e:	041a      	lsls	r2, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	611a      	str	r2, [r3, #16]
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
	...

08006360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e12b      	b.n	80065ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fe fa5a 	bl	8004840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063c4:	f001 fba0 	bl	8007b08 <HAL_RCC_GetPCLK1Freq>
 80063c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4a81      	ldr	r2, [pc, #516]	; (80065d4 <HAL_I2C_Init+0x274>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d807      	bhi.n	80063e4 <HAL_I2C_Init+0x84>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a80      	ldr	r2, [pc, #512]	; (80065d8 <HAL_I2C_Init+0x278>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	bf94      	ite	ls
 80063dc:	2301      	movls	r3, #1
 80063de:	2300      	movhi	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	e006      	b.n	80063f2 <HAL_I2C_Init+0x92>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4a7d      	ldr	r2, [pc, #500]	; (80065dc <HAL_I2C_Init+0x27c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	bf94      	ite	ls
 80063ec:	2301      	movls	r3, #1
 80063ee:	2300      	movhi	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e0e7      	b.n	80065ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a78      	ldr	r2, [pc, #480]	; (80065e0 <HAL_I2C_Init+0x280>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	0c9b      	lsrs	r3, r3, #18
 8006404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a6a      	ldr	r2, [pc, #424]	; (80065d4 <HAL_I2C_Init+0x274>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d802      	bhi.n	8006434 <HAL_I2C_Init+0xd4>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	3301      	adds	r3, #1
 8006432:	e009      	b.n	8006448 <HAL_I2C_Init+0xe8>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	4a69      	ldr	r2, [pc, #420]	; (80065e4 <HAL_I2C_Init+0x284>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	3301      	adds	r3, #1
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	430b      	orrs	r3, r1
 800644e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800645a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	495c      	ldr	r1, [pc, #368]	; (80065d4 <HAL_I2C_Init+0x274>)
 8006464:	428b      	cmp	r3, r1
 8006466:	d819      	bhi.n	800649c <HAL_I2C_Init+0x13c>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1e59      	subs	r1, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	fbb1 f3f3 	udiv	r3, r1, r3
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800647c:	400b      	ands	r3, r1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <HAL_I2C_Init+0x138>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1e59      	subs	r1, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006490:	3301      	adds	r3, #1
 8006492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006496:	e051      	b.n	800653c <HAL_I2C_Init+0x1dc>
 8006498:	2304      	movs	r3, #4
 800649a:	e04f      	b.n	800653c <HAL_I2C_Init+0x1dc>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d111      	bne.n	80064c8 <HAL_I2C_Init+0x168>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1e58      	subs	r0, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6859      	ldr	r1, [r3, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	440b      	add	r3, r1
 80064b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064b6:	3301      	adds	r3, #1
 80064b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	e012      	b.n	80064ee <HAL_I2C_Init+0x18e>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1e58      	subs	r0, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	0099      	lsls	r1, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	fbb0 f3f3 	udiv	r3, r0, r3
 80064de:	3301      	adds	r3, #1
 80064e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Init+0x196>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e022      	b.n	800653c <HAL_I2C_Init+0x1dc>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10e      	bne.n	800651c <HAL_I2C_Init+0x1bc>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1e58      	subs	r0, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6859      	ldr	r1, [r3, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	440b      	add	r3, r1
 800650c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006510:	3301      	adds	r3, #1
 8006512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	e00f      	b.n	800653c <HAL_I2C_Init+0x1dc>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	1e58      	subs	r0, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	0099      	lsls	r1, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006532:	3301      	adds	r3, #1
 8006534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	6809      	ldr	r1, [r1, #0]
 8006540:	4313      	orrs	r3, r2
 8006542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800656a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6911      	ldr	r1, [r2, #16]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68d2      	ldr	r2, [r2, #12]
 8006576:	4311      	orrs	r1, r2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	430b      	orrs	r3, r1
 800657e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	000186a0 	.word	0x000186a0
 80065d8:	001e847f 	.word	0x001e847f
 80065dc:	003d08ff 	.word	0x003d08ff
 80065e0:	431bde83 	.word	0x431bde83
 80065e4:	10624dd3 	.word	0x10624dd3

080065e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	817b      	strh	r3, [r7, #10]
 80065fa:	460b      	mov	r3, r1
 80065fc:	813b      	strh	r3, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006602:	f7ff f9b7 	bl	8005974 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b20      	cmp	r3, #32
 8006612:	f040 80d9 	bne.w	80067c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2319      	movs	r3, #25
 800661c:	2201      	movs	r2, #1
 800661e:	496d      	ldr	r1, [pc, #436]	; (80067d4 <HAL_I2C_Mem_Write+0x1ec>)
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fcc1 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
 800662e:	e0cc      	b.n	80067ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_I2C_Mem_Write+0x56>
 800663a:	2302      	movs	r3, #2
 800663c:	e0c5      	b.n	80067ca <HAL_I2C_Mem_Write+0x1e2>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d007      	beq.n	8006664 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2221      	movs	r2, #33	; 0x21
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2240      	movs	r2, #64	; 0x40
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a4d      	ldr	r2, [pc, #308]	; (80067d8 <HAL_I2C_Mem_Write+0x1f0>)
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066a6:	88f8      	ldrh	r0, [r7, #6]
 80066a8:	893a      	ldrh	r2, [r7, #8]
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4603      	mov	r3, r0
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 faf8 	bl	8006cac <I2C_RequestMemoryWrite>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d052      	beq.n	8006768 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e081      	b.n	80067ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fd42 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d107      	bne.n	80066ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e06b      	b.n	80067ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	781a      	ldrb	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b04      	cmp	r3, #4
 800672e:	d11b      	bne.n	8006768 <HAL_I2C_Mem_Write+0x180>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d017      	beq.n	8006768 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1aa      	bne.n	80066c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fd2e 	bl	80071d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	2b04      	cmp	r3, #4
 8006786:	d107      	bne.n	8006798 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006796:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e016      	b.n	80067ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e000      	b.n	80067ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	00100002 	.word	0x00100002
 80067d8:	ffff0000 	.word	0xffff0000

080067dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	; 0x30
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	817b      	strh	r3, [r7, #10]
 80067ee:	460b      	mov	r3, r1
 80067f0:	813b      	strh	r3, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067fa:	f7ff f8bb 	bl	8005974 <HAL_GetTick>
 80067fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b20      	cmp	r3, #32
 800680a:	f040 8244 	bne.w	8006c96 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2319      	movs	r3, #25
 8006814:	2201      	movs	r2, #1
 8006816:	4982      	ldr	r1, [pc, #520]	; (8006a20 <HAL_I2C_Mem_Read+0x244>)
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fbc5 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
 8006826:	e237      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_I2C_Mem_Read+0x5a>
 8006832:	2302      	movs	r3, #2
 8006834:	e230      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d007      	beq.n	800685c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800686a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2222      	movs	r2, #34	; 0x22
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2240      	movs	r2, #64	; 0x40
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800688c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4a62      	ldr	r2, [pc, #392]	; (8006a24 <HAL_I2C_Mem_Read+0x248>)
 800689c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800689e:	88f8      	ldrh	r0, [r7, #6]
 80068a0:	893a      	ldrh	r2, [r7, #8]
 80068a2:	8979      	ldrh	r1, [r7, #10]
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4603      	mov	r3, r0
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fa92 	bl	8006dd8 <I2C_RequestMemoryRead>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e1ec      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d113      	bne.n	80068ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e1c0      	b.n	8006c70 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d11e      	bne.n	8006934 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006906:	b672      	cpsid	i
}
 8006908:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690a:	2300      	movs	r3, #0
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800692e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006930:	b662      	cpsie	i
}
 8006932:	e035      	b.n	80069a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006938:	2b02      	cmp	r3, #2
 800693a:	d11e      	bne.n	800697a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800694c:	b672      	cpsid	i
}
 800694e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006974:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006976:	b662      	cpsie	i
}
 8006978:	e012      	b.n	80069a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006988:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800698a:	2300      	movs	r3, #0
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80069a0:	e166      	b.n	8006c70 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	f200 811f 	bhi.w	8006bea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d123      	bne.n	80069fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fc4d 	bl	8007258 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e167      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069fa:	e139      	b.n	8006c70 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d152      	bne.n	8006aaa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4906      	ldr	r1, [pc, #24]	; (8006a28 <HAL_I2C_Mem_Read+0x24c>)
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 faca 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d008      	beq.n	8006a2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e13c      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
 8006a1e:	bf00      	nop
 8006a20:	00100002 	.word	0x00100002
 8006a24:	ffff0000 	.word	0xffff0000
 8006a28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006a2c:	b672      	cpsid	i
}
 8006a2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006a72:	b662      	cpsie	i
}
 8006a74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aa8:	e0e2      	b.n	8006c70 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	497b      	ldr	r1, [pc, #492]	; (8006ca0 <HAL_I2C_Mem_Read+0x4c4>)
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fa77 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0e9      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ad4:	b672      	cpsid	i
}
 8006ad6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b0a:	4b66      	ldr	r3, [pc, #408]	; (8006ca4 <HAL_I2C_Mem_Read+0x4c8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	08db      	lsrs	r3, r3, #3
 8006b10:	4a65      	ldr	r2, [pc, #404]	; (8006ca8 <HAL_I2C_Mem_Read+0x4cc>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	0a1a      	lsrs	r2, r3, #8
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	00da      	lsls	r2, r3, #3
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d118      	bne.n	8006b62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006b52:	b662      	cpsie	i
}
 8006b54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e09a      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d1d9      	bne.n	8006b24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006bb2:	b662      	cpsie	i
}
 8006bb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006be8:	e042      	b.n	8006c70 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fb32 	bl	8007258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e04c      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d118      	bne.n	8006c70 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f47f ae94 	bne.w	80069a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e000      	b.n	8006c98 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006c96:	2302      	movs	r3, #2
  }
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3728      	adds	r7, #40	; 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	00010004 	.word	0x00010004
 8006ca4:	20000028 	.word	0x20000028
 8006ca8:	14f8b589 	.word	0x14f8b589

08006cac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	817b      	strh	r3, [r7, #10]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	813b      	strh	r3, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f960 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfc:	d103      	bne.n	8006d06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e05f      	b.n	8006dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d0a:	897b      	ldrh	r3, [r7, #10]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	6a3a      	ldr	r2, [r7, #32]
 8006d1e:	492d      	ldr	r1, [pc, #180]	; (8006dd4 <I2C_RequestMemoryWrite+0x128>)
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f998 	bl	8007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e04c      	b.n	8006dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d48:	6a39      	ldr	r1, [r7, #32]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fa02 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d107      	bne.n	8006d6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e02b      	b.n	8006dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d105      	bne.n	8006d84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d78:	893b      	ldrh	r3, [r7, #8]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	611a      	str	r2, [r3, #16]
 8006d82:	e021      	b.n	8006dc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d84:	893b      	ldrh	r3, [r7, #8]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d94:	6a39      	ldr	r1, [r7, #32]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f9dc 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00d      	beq.n	8006dbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d107      	bne.n	8006dba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e005      	b.n	8006dca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dbe:	893b      	ldrh	r3, [r7, #8]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	00010002 	.word	0x00010002

08006dd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	4608      	mov	r0, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	461a      	mov	r2, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	817b      	strh	r3, [r7, #10]
 8006dea:	460b      	mov	r3, r1
 8006dec:	813b      	strh	r3, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f8c2 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e38:	d103      	bne.n	8006e42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e0aa      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	6a3a      	ldr	r2, [r7, #32]
 8006e5a:	4952      	ldr	r1, [pc, #328]	; (8006fa4 <I2C_RequestMemoryRead+0x1cc>)
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f8fa 	bl	8007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e097      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	6a39      	ldr	r1, [r7, #32]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f964 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d107      	bne.n	8006eaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e076      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	611a      	str	r2, [r3, #16]
 8006ebe:	e021      	b.n	8006f04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed0:	6a39      	ldr	r1, [r7, #32]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f93e 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d107      	bne.n	8006ef6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e050      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	6a39      	ldr	r1, [r7, #32]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f923 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d107      	bne.n	8006f2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e035      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 f82b 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00d      	beq.n	8006f74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f66:	d103      	bne.n	8006f70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e013      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f74:	897b      	ldrh	r3, [r7, #10]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f043 0301 	orr.w	r3, r3, #1
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	4906      	ldr	r1, [pc, #24]	; (8006fa4 <I2C_RequestMemoryRead+0x1cc>)
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f863 	bl	8007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	00010002 	.word	0x00010002

08006fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb8:	e025      	b.n	8007006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d021      	beq.n	8007006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fe fcd7 	bl	8005974 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d116      	bne.n	8007006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e023      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10d      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	43da      	mvns	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4013      	ands	r3, r2
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	e00c      	b.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	43da      	mvns	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0b6      	beq.n	8006fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007064:	e051      	b.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007074:	d123      	bne.n	80070be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800708e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e046      	b.n	800714c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d021      	beq.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c6:	f7fe fc55 	bl	8005974 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d116      	bne.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f043 0220 	orr.w	r2, r3, #32
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e020      	b.n	800714c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d10c      	bne.n	800712e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	43da      	mvns	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e00b      	b.n	8007146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	43da      	mvns	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d18d      	bne.n	8007066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007160:	e02d      	b.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f8ce 	bl	8007304 <I2C_IsAcknowledgeFailed>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e02d      	b.n	80071ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d021      	beq.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717a:	f7fe fbfb 	bl	8005974 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	d302      	bcc.n	8007190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d116      	bne.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f043 0220 	orr.w	r2, r3, #32
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e007      	b.n	80071ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c8:	2b80      	cmp	r3, #128	; 0x80
 80071ca:	d1ca      	bne.n	8007162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071e2:	e02d      	b.n	8007240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f88d 	bl	8007304 <I2C_IsAcknowledgeFailed>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e02d      	b.n	8007250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d021      	beq.n	8007240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fc:	f7fe fbba 	bl	8005974 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d116      	bne.n	8007240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	f043 0220 	orr.w	r2, r3, #32
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e007      	b.n	8007250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b04      	cmp	r3, #4
 800724c:	d1ca      	bne.n	80071e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007264:	e042      	b.n	80072ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b10      	cmp	r3, #16
 8007272:	d119      	bne.n	80072a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f06f 0210 	mvn.w	r2, #16
 800727c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e029      	b.n	80072fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a8:	f7fe fb64 	bl	8005974 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d302      	bcc.n	80072be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d116      	bne.n	80072ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e007      	b.n	80072fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	d1b5      	bne.n	8007266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731a:	d11b      	bne.n	8007354 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007324:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	f043 0204 	orr.w	r2, r3, #4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr

08007360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e272      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8087 	beq.w	800748e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007380:	4b92      	ldr	r3, [pc, #584]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b04      	cmp	r3, #4
 800738a:	d00c      	beq.n	80073a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800738c:	4b8f      	ldr	r3, [pc, #572]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f003 030c 	and.w	r3, r3, #12
 8007394:	2b08      	cmp	r3, #8
 8007396:	d112      	bne.n	80073be <HAL_RCC_OscConfig+0x5e>
 8007398:	4b8c      	ldr	r3, [pc, #560]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a4:	d10b      	bne.n	80073be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a6:	4b89      	ldr	r3, [pc, #548]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d06c      	beq.n	800748c <HAL_RCC_OscConfig+0x12c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d168      	bne.n	800748c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e24c      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c6:	d106      	bne.n	80073d6 <HAL_RCC_OscConfig+0x76>
 80073c8:	4b80      	ldr	r3, [pc, #512]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7f      	ldr	r2, [pc, #508]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e02e      	b.n	8007434 <HAL_RCC_OscConfig+0xd4>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCC_OscConfig+0x98>
 80073de:	4b7b      	ldr	r3, [pc, #492]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a7a      	ldr	r2, [pc, #488]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	4b78      	ldr	r3, [pc, #480]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a77      	ldr	r2, [pc, #476]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80073f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	e01d      	b.n	8007434 <HAL_RCC_OscConfig+0xd4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007400:	d10c      	bne.n	800741c <HAL_RCC_OscConfig+0xbc>
 8007402:	4b72      	ldr	r3, [pc, #456]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a71      	ldr	r2, [pc, #452]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	4b6f      	ldr	r3, [pc, #444]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a6e      	ldr	r2, [pc, #440]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	e00b      	b.n	8007434 <HAL_RCC_OscConfig+0xd4>
 800741c:	4b6b      	ldr	r3, [pc, #428]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a6a      	ldr	r2, [pc, #424]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	4b68      	ldr	r3, [pc, #416]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a67      	ldr	r2, [pc, #412]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 800742e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d013      	beq.n	8007464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743c:	f7fe fa9a 	bl	8005974 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007444:	f7fe fa96 	bl	8005974 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	; 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e200      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007456:	4b5d      	ldr	r3, [pc, #372]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0xe4>
 8007462:	e014      	b.n	800748e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007464:	f7fe fa86 	bl	8005974 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800746c:	f7fe fa82 	bl	8005974 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b64      	cmp	r3, #100	; 0x64
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e1ec      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800747e:	4b53      	ldr	r3, [pc, #332]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x10c>
 800748a:	e000      	b.n	800748e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800748c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d063      	beq.n	8007562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800749a:	4b4c      	ldr	r3, [pc, #304]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f003 030c 	and.w	r3, r3, #12
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00b      	beq.n	80074be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80074a6:	4b49      	ldr	r3, [pc, #292]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f003 030c 	and.w	r3, r3, #12
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d11c      	bne.n	80074ec <HAL_RCC_OscConfig+0x18c>
 80074b2:	4b46      	ldr	r3, [pc, #280]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d116      	bne.n	80074ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074be:	4b43      	ldr	r3, [pc, #268]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_RCC_OscConfig+0x176>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d001      	beq.n	80074d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e1c0      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d6:	4b3d      	ldr	r3, [pc, #244]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	4939      	ldr	r1, [pc, #228]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ea:	e03a      	b.n	8007562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d020      	beq.n	8007536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074f4:	4b36      	ldr	r3, [pc, #216]	; (80075d0 <HAL_RCC_OscConfig+0x270>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074fa:	f7fe fa3b 	bl	8005974 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007502:	f7fe fa37 	bl	8005974 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e1a1      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007514:	4b2d      	ldr	r3, [pc, #180]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0f0      	beq.n	8007502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007520:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4927      	ldr	r1, [pc, #156]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007530:	4313      	orrs	r3, r2
 8007532:	600b      	str	r3, [r1, #0]
 8007534:	e015      	b.n	8007562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007536:	4b26      	ldr	r3, [pc, #152]	; (80075d0 <HAL_RCC_OscConfig+0x270>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753c:	f7fe fa1a 	bl	8005974 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007544:	f7fe fa16 	bl	8005974 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e180      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007556:	4b1d      	ldr	r3, [pc, #116]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d03a      	beq.n	80075e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d019      	beq.n	80075aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007576:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <HAL_RCC_OscConfig+0x274>)
 8007578:	2201      	movs	r2, #1
 800757a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800757c:	f7fe f9fa 	bl	8005974 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007584:	f7fe f9f6 	bl	8005974 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e160      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007596:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <HAL_RCC_OscConfig+0x26c>)
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f0      	beq.n	8007584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80075a2:	2001      	movs	r0, #1
 80075a4:	f000 fb08 	bl	8007bb8 <RCC_Delay>
 80075a8:	e01c      	b.n	80075e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <HAL_RCC_OscConfig+0x274>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075b0:	f7fe f9e0 	bl	8005974 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075b6:	e00f      	b.n	80075d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b8:	f7fe f9dc 	bl	8005974 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d908      	bls.n	80075d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e146      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
 80075ca:	bf00      	nop
 80075cc:	40021000 	.word	0x40021000
 80075d0:	42420000 	.word	0x42420000
 80075d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075d8:	4b92      	ldr	r3, [pc, #584]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e9      	bne.n	80075b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80a6 	beq.w	800773e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075f2:	2300      	movs	r3, #0
 80075f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075f6:	4b8b      	ldr	r3, [pc, #556]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10d      	bne.n	800761e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007602:	4b88      	ldr	r3, [pc, #544]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	4a87      	ldr	r2, [pc, #540]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760c:	61d3      	str	r3, [r2, #28]
 800760e:	4b85      	ldr	r3, [pc, #532]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800761a:	2301      	movs	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800761e:	4b82      	ldr	r3, [pc, #520]	; (8007828 <HAL_RCC_OscConfig+0x4c8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	2b00      	cmp	r3, #0
 8007628:	d118      	bne.n	800765c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800762a:	4b7f      	ldr	r3, [pc, #508]	; (8007828 <HAL_RCC_OscConfig+0x4c8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a7e      	ldr	r2, [pc, #504]	; (8007828 <HAL_RCC_OscConfig+0x4c8>)
 8007630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007636:	f7fe f99d 	bl	8005974 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800763e:	f7fe f999 	bl	8005974 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b64      	cmp	r3, #100	; 0x64
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e103      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007650:	4b75      	ldr	r3, [pc, #468]	; (8007828 <HAL_RCC_OscConfig+0x4c8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d106      	bne.n	8007672 <HAL_RCC_OscConfig+0x312>
 8007664:	4b6f      	ldr	r3, [pc, #444]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	4a6e      	ldr	r2, [pc, #440]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	6213      	str	r3, [r2, #32]
 8007670:	e02d      	b.n	80076ce <HAL_RCC_OscConfig+0x36e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10c      	bne.n	8007694 <HAL_RCC_OscConfig+0x334>
 800767a:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	4a69      	ldr	r2, [pc, #420]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	6213      	str	r3, [r2, #32]
 8007686:	4b67      	ldr	r3, [pc, #412]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	4a66      	ldr	r2, [pc, #408]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800768c:	f023 0304 	bic.w	r3, r3, #4
 8007690:	6213      	str	r3, [r2, #32]
 8007692:	e01c      	b.n	80076ce <HAL_RCC_OscConfig+0x36e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b05      	cmp	r3, #5
 800769a:	d10c      	bne.n	80076b6 <HAL_RCC_OscConfig+0x356>
 800769c:	4b61      	ldr	r3, [pc, #388]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	4a60      	ldr	r2, [pc, #384]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076a2:	f043 0304 	orr.w	r3, r3, #4
 80076a6:	6213      	str	r3, [r2, #32]
 80076a8:	4b5e      	ldr	r3, [pc, #376]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	4a5d      	ldr	r2, [pc, #372]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	6213      	str	r3, [r2, #32]
 80076b4:	e00b      	b.n	80076ce <HAL_RCC_OscConfig+0x36e>
 80076b6:	4b5b      	ldr	r3, [pc, #364]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	4a5a      	ldr	r2, [pc, #360]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	6213      	str	r3, [r2, #32]
 80076c2:	4b58      	ldr	r3, [pc, #352]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	4a57      	ldr	r2, [pc, #348]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076c8:	f023 0304 	bic.w	r3, r3, #4
 80076cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d015      	beq.n	8007702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076d6:	f7fe f94d 	bl	8005974 <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076dc:	e00a      	b.n	80076f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076de:	f7fe f949 	bl	8005974 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e0b1      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f4:	4b4b      	ldr	r3, [pc, #300]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0ee      	beq.n	80076de <HAL_RCC_OscConfig+0x37e>
 8007700:	e014      	b.n	800772c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007702:	f7fe f937 	bl	8005974 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007708:	e00a      	b.n	8007720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800770a:	f7fe f933 	bl	8005974 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	f241 3288 	movw	r2, #5000	; 0x1388
 8007718:	4293      	cmp	r3, r2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e09b      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007720:	4b40      	ldr	r3, [pc, #256]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1ee      	bne.n	800770a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d105      	bne.n	800773e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007732:	4b3c      	ldr	r3, [pc, #240]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	4a3b      	ldr	r2, [pc, #236]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800773c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8087 	beq.w	8007856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007748:	4b36      	ldr	r3, [pc, #216]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f003 030c 	and.w	r3, r3, #12
 8007750:	2b08      	cmp	r3, #8
 8007752:	d061      	beq.n	8007818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d146      	bne.n	80077ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800775c:	4b33      	ldr	r3, [pc, #204]	; (800782c <HAL_RCC_OscConfig+0x4cc>)
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007762:	f7fe f907 	bl	8005974 <HAL_GetTick>
 8007766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800776a:	f7fe f903 	bl	8005974 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e06d      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800777c:	4b29      	ldr	r3, [pc, #164]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1f0      	bne.n	800776a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007790:	d108      	bne.n	80077a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007792:	4b24      	ldr	r3, [pc, #144]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	4921      	ldr	r1, [pc, #132]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077a4:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a19      	ldr	r1, [r3, #32]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	430b      	orrs	r3, r1
 80077b6:	491b      	ldr	r1, [pc, #108]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <HAL_RCC_OscConfig+0x4cc>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c2:	f7fe f8d7 	bl	8005974 <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ca:	f7fe f8d3 	bl	8005974 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e03d      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x46a>
 80077e8:	e035      	b.n	8007856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ea:	4b10      	ldr	r3, [pc, #64]	; (800782c <HAL_RCC_OscConfig+0x4cc>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f0:	f7fe f8c0 	bl	8005974 <HAL_GetTick>
 80077f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077f6:	e008      	b.n	800780a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077f8:	f7fe f8bc 	bl	8005974 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d901      	bls.n	800780a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e026      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800780a:	4b06      	ldr	r3, [pc, #24]	; (8007824 <HAL_RCC_OscConfig+0x4c4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f0      	bne.n	80077f8 <HAL_RCC_OscConfig+0x498>
 8007816:	e01e      	b.n	8007856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d107      	bne.n	8007830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e019      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
 8007824:	40021000 	.word	0x40021000
 8007828:	40007000 	.word	0x40007000
 800782c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCC_OscConfig+0x500>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	429a      	cmp	r2, r3
 8007842:	d106      	bne.n	8007852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800784e:	429a      	cmp	r2, r3
 8007850:	d001      	beq.n	8007856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40021000 	.word	0x40021000

08007864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e0d0      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007878:	4b6a      	ldr	r3, [pc, #424]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d910      	bls.n	80078a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007886:	4b67      	ldr	r3, [pc, #412]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f023 0207 	bic.w	r2, r3, #7
 800788e:	4965      	ldr	r1, [pc, #404]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007896:	4b63      	ldr	r3, [pc, #396]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d001      	beq.n	80078a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0b8      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d020      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078c0:	4b59      	ldr	r3, [pc, #356]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a58      	ldr	r2, [pc, #352]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80078c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80078ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078d8:	4b53      	ldr	r3, [pc, #332]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a52      	ldr	r2, [pc, #328]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80078de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80078e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e4:	4b50      	ldr	r3, [pc, #320]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	494d      	ldr	r1, [pc, #308]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d040      	beq.n	8007984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d107      	bne.n	800791a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800790a:	4b47      	ldr	r3, [pc, #284]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d115      	bne.n	8007942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e07f      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d107      	bne.n	8007932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007922:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e073      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007932:	4b3d      	ldr	r3, [pc, #244]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e06b      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007942:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f023 0203 	bic.w	r2, r3, #3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4936      	ldr	r1, [pc, #216]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 8007950:	4313      	orrs	r3, r2
 8007952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007954:	f7fe f80e 	bl	8005974 <HAL_GetTick>
 8007958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800795a:	e00a      	b.n	8007972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800795c:	f7fe f80a 	bl	8005974 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	f241 3288 	movw	r2, #5000	; 0x1388
 800796a:	4293      	cmp	r3, r2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e053      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f003 020c 	and.w	r2, r3, #12
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	429a      	cmp	r2, r3
 8007982:	d1eb      	bne.n	800795c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d210      	bcs.n	80079b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007992:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f023 0207 	bic.w	r2, r3, #7
 800799a:	4922      	ldr	r1, [pc, #136]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	4313      	orrs	r3, r2
 80079a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <HAL_RCC_ClockConfig+0x1c0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e032      	b.n	8007a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d008      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c0:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4916      	ldr	r1, [pc, #88]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	490e      	ldr	r1, [pc, #56]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079f2:	f000 f821 	bl	8007a38 <HAL_RCC_GetSysClockFreq>
 80079f6:	4602      	mov	r2, r0
 80079f8:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <HAL_RCC_ClockConfig+0x1c4>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	490a      	ldr	r1, [pc, #40]	; (8007a2c <HAL_RCC_ClockConfig+0x1c8>)
 8007a04:	5ccb      	ldrb	r3, [r1, r3]
 8007a06:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0a:	4a09      	ldr	r2, [pc, #36]	; (8007a30 <HAL_RCC_ClockConfig+0x1cc>)
 8007a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <HAL_RCC_ClockConfig+0x1d0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd f844 	bl	8004aa0 <HAL_InitTick>

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40022000 	.word	0x40022000
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	080116a0 	.word	0x080116a0
 8007a30:	20000028 	.word	0x20000028
 8007a34:	2000002c 	.word	0x2000002c

08007a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a38:	b490      	push	{r4, r7}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007a3e:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <HAL_RCC_GetSysClockFreq+0xac>)
 8007a40:	1d3c      	adds	r4, r7, #4
 8007a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007a48:	f240 2301 	movw	r3, #513	; 0x201
 8007a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	2300      	movs	r3, #0
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007a62:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f003 030c 	and.w	r3, r3, #12
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d002      	beq.n	8007a78 <HAL_RCC_GetSysClockFreq+0x40>
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d003      	beq.n	8007a7e <HAL_RCC_GetSysClockFreq+0x46>
 8007a76:	e02b      	b.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a78:	4b1c      	ldr	r3, [pc, #112]	; (8007aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8007a7a:	623b      	str	r3, [r7, #32]
      break;
 8007a7c:	e02b      	b.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	0c9b      	lsrs	r3, r3, #18
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	3328      	adds	r3, #40	; 0x28
 8007a88:	443b      	add	r3, r7
 8007a8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007a8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d012      	beq.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	0c5b      	lsrs	r3, r3, #17
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	3328      	adds	r3, #40	; 0x28
 8007aa6:	443b      	add	r3, r7
 8007aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4a0e      	ldr	r2, [pc, #56]	; (8007aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8007ab2:	fb03 f202 	mul.w	r2, r3, r2
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
 8007abe:	e004      	b.n	8007aca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ac4:	fb02 f303 	mul.w	r3, r2, r3
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	623b      	str	r3, [r7, #32]
      break;
 8007ace:	e002      	b.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007ad0:	4b06      	ldr	r3, [pc, #24]	; (8007aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8007ad2:	623b      	str	r3, [r7, #32]
      break;
 8007ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc90      	pop	{r4, r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	080114a4 	.word	0x080114a4
 8007ae8:	40021000 	.word	0x40021000
 8007aec:	007a1200 	.word	0x007a1200
 8007af0:	003d0900 	.word	0x003d0900

08007af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8007afa:	681b      	ldr	r3, [r3, #0]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr
 8007b04:	20000028 	.word	0x20000028

08007b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b0c:	f7ff fff2 	bl	8007af4 <HAL_RCC_GetHCLKFreq>
 8007b10:	4602      	mov	r2, r0
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	4903      	ldr	r1, [pc, #12]	; (8007b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b1e:	5ccb      	ldrb	r3, [r1, r3]
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	080116b0 	.word	0x080116b0

08007b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b34:	f7ff ffde 	bl	8007af4 <HAL_RCC_GetHCLKFreq>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	0adb      	lsrs	r3, r3, #11
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	4903      	ldr	r1, [pc, #12]	; (8007b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b46:	5ccb      	ldrb	r3, [r1, r3]
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40021000 	.word	0x40021000
 8007b54:	080116b0 	.word	0x080116b0

08007b58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	220f      	movs	r2, #15
 8007b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_RCC_GetClockConfig+0x58>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f003 0203 	and.w	r2, r3, #3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b74:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <HAL_RCC_GetClockConfig+0x58>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <HAL_RCC_GetClockConfig+0x58>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007b8c:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <HAL_RCC_GetClockConfig+0x58>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	08db      	lsrs	r3, r3, #3
 8007b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0207 	and.w	r2, r3, #7
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr
 8007bb0:	40021000 	.word	0x40021000
 8007bb4:	40022000 	.word	0x40022000

08007bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <RCC_Delay+0x34>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <RCC_Delay+0x38>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	0a5b      	lsrs	r3, r3, #9
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007bd4:	bf00      	nop
  }
  while (Delay --);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	1e5a      	subs	r2, r3, #1
 8007bda:	60fa      	str	r2, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1f9      	bne.n	8007bd4 <RCC_Delay+0x1c>
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	20000028 	.word	0x20000028
 8007bf0:	10624dd3 	.word	0x10624dd3

08007bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d07d      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007c10:	2300      	movs	r3, #0
 8007c12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c14:	4b4f      	ldr	r3, [pc, #316]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10d      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c20:	4b4c      	ldr	r3, [pc, #304]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	4a4b      	ldr	r2, [pc, #300]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	61d3      	str	r3, [r2, #28]
 8007c2c:	4b49      	ldr	r3, [pc, #292]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c3c:	4b46      	ldr	r3, [pc, #280]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d118      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c48:	4b43      	ldr	r3, [pc, #268]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a42      	ldr	r2, [pc, #264]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c54:	f7fd fe8e 	bl	8005974 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5a:	e008      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5c:	f7fd fe8a 	bl	8005974 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b64      	cmp	r3, #100	; 0x64
 8007c68:	d901      	bls.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e06d      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c6e:	4b3a      	ldr	r3, [pc, #232]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f0      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c7a:	4b36      	ldr	r3, [pc, #216]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d02e      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d027      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c98:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ca2:	4b2e      	ldr	r3, [pc, #184]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ca8:	4b2c      	ldr	r3, [pc, #176]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007cae:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d014      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cbe:	f7fd fe59 	bl	8005974 <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc4:	e00a      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc6:	f7fd fe55 	bl	8005974 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e036      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0ee      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ce8:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4917      	ldr	r1, [pc, #92]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d105      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d00:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d18:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	490b      	ldr	r1, [pc, #44]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0310 	and.w	r3, r3, #16
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d008      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	4904      	ldr	r1, [pc, #16]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40021000 	.word	0x40021000
 8007d58:	40007000 	.word	0x40007000
 8007d5c:	42420440 	.word	0x42420440

08007d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e041      	b.n	8007df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f839 	bl	8007dfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f000 ff44 	bl	8008c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr

08007e10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d001      	beq.n	8007e28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e03c      	b.n	8007ea2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <HAL_TIM_Base_Start+0x9c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_TIM_Base_Start+0x5c>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <HAL_TIM_Base_Start+0xa0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_TIM_Base_Start+0x5c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4c:	d00e      	beq.n	8007e6c <HAL_TIM_Base_Start+0x5c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_TIM_Base_Start+0xa4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_TIM_Base_Start+0x5c>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <HAL_TIM_Base_Start+0xa8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIM_Base_Start+0x5c>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <HAL_TIM_Base_Start+0xac>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d111      	bne.n	8007e90 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d010      	beq.n	8007ea0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0201 	orr.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	e007      	b.n	8007ea0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40013400 	.word	0x40013400
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40000c00 	.word	0x40000c00

08007ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d001      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e044      	b.n	8007f62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1d      	ldr	r2, [pc, #116]	; (8007f6c <HAL_TIM_Base_Start_IT+0xac>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d018      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0x6c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1c      	ldr	r2, [pc, #112]	; (8007f70 <HAL_TIM_Base_Start_IT+0xb0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d013      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0x6c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0c:	d00e      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0x6c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a18      	ldr	r2, [pc, #96]	; (8007f74 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d009      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0x6c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a16      	ldr	r2, [pc, #88]	; (8007f78 <HAL_TIM_Base_Start_IT+0xb8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0x6c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a15      	ldr	r2, [pc, #84]	; (8007f7c <HAL_TIM_Base_Start_IT+0xbc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d111      	bne.n	8007f50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d010      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0201 	orr.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4e:	e007      	b.n	8007f60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	40013400 	.word	0x40013400
 8007f74:	40000400 	.word	0x40000400
 8007f78:	40000800 	.word	0x40000800
 8007f7c:	40000c00 	.word	0x40000c00

08007f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e041      	b.n	8008016 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fd faae 	bl	8005508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f000 fe34 	bl	8008c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <HAL_TIM_PWM_Start+0x24>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	e022      	b.n	800808a <HAL_TIM_PWM_Start+0x6a>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d109      	bne.n	800805e <HAL_TIM_PWM_Start+0x3e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b01      	cmp	r3, #1
 8008054:	bf14      	ite	ne
 8008056:	2301      	movne	r3, #1
 8008058:	2300      	moveq	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	e015      	b.n	800808a <HAL_TIM_PWM_Start+0x6a>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b08      	cmp	r3, #8
 8008062:	d109      	bne.n	8008078 <HAL_TIM_PWM_Start+0x58>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	bf14      	ite	ne
 8008070:	2301      	movne	r3, #1
 8008072:	2300      	moveq	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	e008      	b.n	800808a <HAL_TIM_PWM_Start+0x6a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b01      	cmp	r3, #1
 8008082:	bf14      	ite	ne
 8008084:	2301      	movne	r3, #1
 8008086:	2300      	moveq	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e072      	b.n	8008178 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_PWM_Start+0x82>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a0:	e013      	b.n	80080ca <HAL_TIM_PWM_Start+0xaa>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d104      	bne.n	80080b2 <HAL_TIM_PWM_Start+0x92>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080b0:	e00b      	b.n	80080ca <HAL_TIM_PWM_Start+0xaa>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d104      	bne.n	80080c2 <HAL_TIM_PWM_Start+0xa2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080c0:	e003      	b.n	80080ca <HAL_TIM_PWM_Start+0xaa>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2202      	movs	r2, #2
 80080c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2201      	movs	r2, #1
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 f9f3 	bl	80094be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a28      	ldr	r2, [pc, #160]	; (8008180 <HAL_TIM_PWM_Start+0x160>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d004      	beq.n	80080ec <HAL_TIM_PWM_Start+0xcc>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a27      	ldr	r2, [pc, #156]	; (8008184 <HAL_TIM_PWM_Start+0x164>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d101      	bne.n	80080f0 <HAL_TIM_PWM_Start+0xd0>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <HAL_TIM_PWM_Start+0xd2>
 80080f0:	2300      	movs	r3, #0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008104:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1d      	ldr	r2, [pc, #116]	; (8008180 <HAL_TIM_PWM_Start+0x160>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d018      	beq.n	8008142 <HAL_TIM_PWM_Start+0x122>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <HAL_TIM_PWM_Start+0x164>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <HAL_TIM_PWM_Start+0x122>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008122:	d00e      	beq.n	8008142 <HAL_TIM_PWM_Start+0x122>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <HAL_TIM_PWM_Start+0x168>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d009      	beq.n	8008142 <HAL_TIM_PWM_Start+0x122>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a16      	ldr	r2, [pc, #88]	; (800818c <HAL_TIM_PWM_Start+0x16c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d004      	beq.n	8008142 <HAL_TIM_PWM_Start+0x122>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a14      	ldr	r2, [pc, #80]	; (8008190 <HAL_TIM_PWM_Start+0x170>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d111      	bne.n	8008166 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b06      	cmp	r3, #6
 8008152:	d010      	beq.n	8008176 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008164:	e007      	b.n	8008176 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0201 	orr.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40013400 	.word	0x40013400
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00

08008194 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e041      	b.n	800822a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fd f914 	bl	80053e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f000 fd2a 	bl	8008c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <HAL_TIM_IC_Start_IT+0x1a>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e013      	b.n	8008276 <HAL_TIM_IC_Start_IT+0x42>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d104      	bne.n	800825e <HAL_TIM_IC_Start_IT+0x2a>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800825a:	b2db      	uxtb	r3, r3
 800825c:	e00b      	b.n	8008276 <HAL_TIM_IC_Start_IT+0x42>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d104      	bne.n	800826e <HAL_TIM_IC_Start_IT+0x3a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800826a:	b2db      	uxtb	r3, r3
 800826c:	e003      	b.n	8008276 <HAL_TIM_IC_Start_IT+0x42>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008274:	b2db      	uxtb	r3, r3
 8008276:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d104      	bne.n	8008288 <HAL_TIM_IC_Start_IT+0x54>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008284:	b2db      	uxtb	r3, r3
 8008286:	e013      	b.n	80082b0 <HAL_TIM_IC_Start_IT+0x7c>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b04      	cmp	r3, #4
 800828c:	d104      	bne.n	8008298 <HAL_TIM_IC_Start_IT+0x64>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008294:	b2db      	uxtb	r3, r3
 8008296:	e00b      	b.n	80082b0 <HAL_TIM_IC_Start_IT+0x7c>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b08      	cmp	r3, #8
 800829c:	d104      	bne.n	80082a8 <HAL_TIM_IC_Start_IT+0x74>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	e003      	b.n	80082b0 <HAL_TIM_IC_Start_IT+0x7c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d102      	bne.n	80082be <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d001      	beq.n	80082c2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e0bd      	b.n	800843e <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_IC_Start_IT+0x9e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d0:	e013      	b.n	80082fa <HAL_TIM_IC_Start_IT+0xc6>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d104      	bne.n	80082e2 <HAL_TIM_IC_Start_IT+0xae>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e0:	e00b      	b.n	80082fa <HAL_TIM_IC_Start_IT+0xc6>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d104      	bne.n	80082f2 <HAL_TIM_IC_Start_IT+0xbe>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082f0:	e003      	b.n	80082fa <HAL_TIM_IC_Start_IT+0xc6>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <HAL_TIM_IC_Start_IT+0xd6>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008308:	e013      	b.n	8008332 <HAL_TIM_IC_Start_IT+0xfe>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b04      	cmp	r3, #4
 800830e:	d104      	bne.n	800831a <HAL_TIM_IC_Start_IT+0xe6>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008318:	e00b      	b.n	8008332 <HAL_TIM_IC_Start_IT+0xfe>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b08      	cmp	r3, #8
 800831e:	d104      	bne.n	800832a <HAL_TIM_IC_Start_IT+0xf6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008328:	e003      	b.n	8008332 <HAL_TIM_IC_Start_IT+0xfe>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b0c      	cmp	r3, #12
 8008336:	d841      	bhi.n	80083bc <HAL_TIM_IC_Start_IT+0x188>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <HAL_TIM_IC_Start_IT+0x10c>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008375 	.word	0x08008375
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083bd 	.word	0x080083bd
 800834c:	080083bd 	.word	0x080083bd
 8008350:	08008387 	.word	0x08008387
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	08008399 	.word	0x08008399
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083bd 	.word	0x080083bd
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083ab 	.word	0x080083ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0202 	orr.w	r2, r2, #2
 8008382:	60da      	str	r2, [r3, #12]
      break;
 8008384:	e01b      	b.n	80083be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0204 	orr.w	r2, r2, #4
 8008394:	60da      	str	r2, [r3, #12]
      break;
 8008396:	e012      	b.n	80083be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	60da      	str	r2, [r3, #12]
      break;
 80083a8:	e009      	b.n	80083be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0210 	orr.w	r2, r2, #16
 80083b8:	60da      	str	r2, [r3, #12]
      break;
 80083ba:	e000      	b.n	80083be <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80083bc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2201      	movs	r2, #1
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 f879 	bl	80094be <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a1d      	ldr	r2, [pc, #116]	; (8008448 <HAL_TIM_IC_Start_IT+0x214>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d018      	beq.n	8008408 <HAL_TIM_IC_Start_IT+0x1d4>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a1c      	ldr	r2, [pc, #112]	; (800844c <HAL_TIM_IC_Start_IT+0x218>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d013      	beq.n	8008408 <HAL_TIM_IC_Start_IT+0x1d4>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e8:	d00e      	beq.n	8008408 <HAL_TIM_IC_Start_IT+0x1d4>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a18      	ldr	r2, [pc, #96]	; (8008450 <HAL_TIM_IC_Start_IT+0x21c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d009      	beq.n	8008408 <HAL_TIM_IC_Start_IT+0x1d4>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a16      	ldr	r2, [pc, #88]	; (8008454 <HAL_TIM_IC_Start_IT+0x220>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <HAL_TIM_IC_Start_IT+0x1d4>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a15      	ldr	r2, [pc, #84]	; (8008458 <HAL_TIM_IC_Start_IT+0x224>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d111      	bne.n	800842c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b06      	cmp	r3, #6
 8008418:	d010      	beq.n	800843c <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f042 0201 	orr.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842a:	e007      	b.n	800843c <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40012c00 	.word	0x40012c00
 800844c:	40013400 	.word	0x40013400
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00

0800845c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e093      	b.n	8008598 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d106      	bne.n	800848a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fc ff1f 	bl	80052c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a0:	f023 0307 	bic.w	r3, r3, #7
 80084a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f000 fbbb 	bl	8008c2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	4313      	orrs	r3, r2
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80084fc:	f023 030c 	bic.w	r3, r3, #12
 8008500:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800850c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	4313      	orrs	r3, r2
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4313      	orrs	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	011a      	lsls	r2, r3, #4
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	031b      	lsls	r3, r3, #12
 800852c:	4313      	orrs	r3, r2
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	4313      	orrs	r3, r2
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d110      	bne.n	80085f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d102      	bne.n	80085dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80085d6:	7b7b      	ldrb	r3, [r7, #13]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d001      	beq.n	80085e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e069      	b.n	80086b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f0:	e031      	b.n	8008656 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d110      	bne.n	800861a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d102      	bne.n	8008604 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085fe:	7b3b      	ldrb	r3, [r7, #12]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d001      	beq.n	8008608 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e055      	b.n	80086b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008618:	e01d      	b.n	8008656 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d108      	bne.n	8008632 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d105      	bne.n	8008632 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008626:	7b7b      	ldrb	r3, [r7, #13]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d102      	bne.n	8008632 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800862c:	7b3b      	ldrb	r3, [r7, #12]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d001      	beq.n	8008636 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e03e      	b.n	80086b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2202      	movs	r2, #2
 8008642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <HAL_TIM_Encoder_Start+0xc4>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b04      	cmp	r3, #4
 8008660:	d008      	beq.n	8008674 <HAL_TIM_Encoder_Start+0xd4>
 8008662:	e00f      	b.n	8008684 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2201      	movs	r2, #1
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f000 ff26 	bl	80094be <TIM_CCxChannelCmd>
      break;
 8008672:	e016      	b.n	80086a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2201      	movs	r2, #1
 800867a:	2104      	movs	r1, #4
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ff1e 	bl	80094be <TIM_CCxChannelCmd>
      break;
 8008682:	e00e      	b.n	80086a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2201      	movs	r2, #1
 800868a:	2100      	movs	r1, #0
 800868c:	4618      	mov	r0, r3
 800868e:	f000 ff16 	bl	80094be <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	2104      	movs	r1, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f000 ff0f 	bl	80094be <TIM_CCxChannelCmd>
      break;
 80086a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0201 	orr.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d122      	bne.n	8008718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d11b      	bne.n	8008718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f06f 0202 	mvn.w	r2, #2
 80086e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fb ff54 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
 8008704:	e005      	b.n	8008712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fa74 	bl	8008bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa7a 	bl	8008c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b04      	cmp	r3, #4
 8008724:	d122      	bne.n	800876c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b04      	cmp	r3, #4
 8008732:	d11b      	bne.n	800876c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0204 	mvn.w	r2, #4
 800873c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2202      	movs	r2, #2
 8008742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fb ff2a 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
 8008758:	e005      	b.n	8008766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa4a 	bl	8008bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa50 	bl	8008c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b08      	cmp	r3, #8
 8008778:	d122      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b08      	cmp	r3, #8
 8008786:	d11b      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f06f 0208 	mvn.w	r2, #8
 8008790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2204      	movs	r2, #4
 8008796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fb ff00 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
 80087ac:	e005      	b.n	80087ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa20 	bl	8008bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa26 	bl	8008c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0310 	and.w	r3, r3, #16
 80087ca:	2b10      	cmp	r3, #16
 80087cc:	d122      	bne.n	8008814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b10      	cmp	r3, #16
 80087da:	d11b      	bne.n	8008814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f06f 0210 	mvn.w	r2, #16
 80087e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2208      	movs	r2, #8
 80087ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fb fed6 	bl	80045ac <HAL_TIM_IC_CaptureCallback>
 8008800:	e005      	b.n	800880e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9f6 	bl	8008bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9fc 	bl	8008c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b01      	cmp	r3, #1
 8008820:	d10e      	bne.n	8008840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b01      	cmp	r3, #1
 800882e:	d107      	bne.n	8008840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f06f 0201 	mvn.w	r2, #1
 8008838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fc f8f0 	bl	8004a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b80      	cmp	r3, #128	; 0x80
 800884c:	d10e      	bne.n	800886c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008858:	2b80      	cmp	r3, #128	; 0x80
 800885a:	d107      	bne.n	800886c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fec3 	bl	80095f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d10e      	bne.n	8008898 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008884:	2b40      	cmp	r3, #64	; 0x40
 8008886:	d107      	bne.n	8008898 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9c0 	bl	8008c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d10e      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	d107      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f06f 0220 	mvn.w	r2, #32
 80088bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fe8e 	bl	80095e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e082      	b.n	80089ec <HAL_TIM_IC_ConfigChannel+0x120>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	6819      	ldr	r1, [r3, #0]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f000 fc46 	bl	8009194 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 020c 	bic.w	r2, r2, #12
 8008916:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6999      	ldr	r1, [r3, #24]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	619a      	str	r2, [r3, #24]
 800892a:	e05a      	b.n	80089e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b04      	cmp	r3, #4
 8008930:	d11c      	bne.n	800896c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6819      	ldr	r1, [r3, #0]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f000 fcbb 	bl	80092bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699a      	ldr	r2, [r3, #24]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008954:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6999      	ldr	r1, [r3, #24]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	021a      	lsls	r2, r3, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	619a      	str	r2, [r3, #24]
 800896a:	e03a      	b.n	80089e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d11b      	bne.n	80089aa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f000 fd06 	bl	8009392 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 020c 	bic.w	r2, r2, #12
 8008994:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69d9      	ldr	r1, [r3, #28]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	61da      	str	r2, [r3, #28]
 80089a8:	e01b      	b.n	80089e2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f000 fd25 	bl	8009408 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80089cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69d9      	ldr	r1, [r3, #28]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	021a      	lsls	r2, r3, #8
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e0ac      	b.n	8008b68 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b0c      	cmp	r3, #12
 8008a1a:	f200 809f 	bhi.w	8008b5c <HAL_TIM_PWM_ConfigChannel+0x168>
 8008a1e:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a59 	.word	0x08008a59
 8008a28:	08008b5d 	.word	0x08008b5d
 8008a2c:	08008b5d 	.word	0x08008b5d
 8008a30:	08008b5d 	.word	0x08008b5d
 8008a34:	08008a99 	.word	0x08008a99
 8008a38:	08008b5d 	.word	0x08008b5d
 8008a3c:	08008b5d 	.word	0x08008b5d
 8008a40:	08008b5d 	.word	0x08008b5d
 8008a44:	08008adb 	.word	0x08008adb
 8008a48:	08008b5d 	.word	0x08008b5d
 8008a4c:	08008b5d 	.word	0x08008b5d
 8008a50:	08008b5d 	.word	0x08008b5d
 8008a54:	08008b1b 	.word	0x08008b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f95e 	bl	8008d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0208 	orr.w	r2, r2, #8
 8008a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0204 	bic.w	r2, r2, #4
 8008a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6999      	ldr	r1, [r3, #24]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	619a      	str	r2, [r3, #24]
      break;
 8008a96:	e062      	b.n	8008b5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f9ae 	bl	8008e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6999      	ldr	r1, [r3, #24]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	619a      	str	r2, [r3, #24]
      break;
 8008ad8:	e041      	b.n	8008b5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 fa01 	bl	8008ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0208 	orr.w	r2, r2, #8
 8008af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0204 	bic.w	r2, r2, #4
 8008b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69d9      	ldr	r1, [r3, #28]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	61da      	str	r2, [r3, #28]
      break;
 8008b18:	e021      	b.n	8008b5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fa55 	bl	8008fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69d9      	ldr	r1, [r3, #28]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	021a      	lsls	r2, r3, #8
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	61da      	str	r2, [r3, #28]
      break;
 8008b5a:	e000      	b.n	8008b5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e031      	b.n	8008bec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa6c 	bl	8009078 <TIM_SlaveTimer_SetConfig>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e018      	b.n	8008bec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bd8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr
	...

08008c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a33      	ldr	r2, [pc, #204]	; (8008d0c <TIM_Base_SetConfig+0xe0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d013      	beq.n	8008c6c <TIM_Base_SetConfig+0x40>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a32      	ldr	r2, [pc, #200]	; (8008d10 <TIM_Base_SetConfig+0xe4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00f      	beq.n	8008c6c <TIM_Base_SetConfig+0x40>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c52:	d00b      	beq.n	8008c6c <TIM_Base_SetConfig+0x40>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a2f      	ldr	r2, [pc, #188]	; (8008d14 <TIM_Base_SetConfig+0xe8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d007      	beq.n	8008c6c <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a2e      	ldr	r2, [pc, #184]	; (8008d18 <TIM_Base_SetConfig+0xec>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a2d      	ldr	r2, [pc, #180]	; (8008d1c <TIM_Base_SetConfig+0xf0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d108      	bne.n	8008c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a22      	ldr	r2, [pc, #136]	; (8008d0c <TIM_Base_SetConfig+0xe0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <TIM_Base_SetConfig+0x82>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a21      	ldr	r2, [pc, #132]	; (8008d10 <TIM_Base_SetConfig+0xe4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <TIM_Base_SetConfig+0x82>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c94:	d00b      	beq.n	8008cae <TIM_Base_SetConfig+0x82>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <TIM_Base_SetConfig+0xe8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <TIM_Base_SetConfig+0x82>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	; (8008d18 <TIM_Base_SetConfig+0xec>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <TIM_Base_SetConfig+0x82>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a1c      	ldr	r2, [pc, #112]	; (8008d1c <TIM_Base_SetConfig+0xf0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d108      	bne.n	8008cc0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <TIM_Base_SetConfig+0xe0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0xc8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <TIM_Base_SetConfig+0xe4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d103      	bne.n	8008cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	615a      	str	r2, [r3, #20]
}
 8008d02:	bf00      	nop
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	40012c00 	.word	0x40012c00
 8008d10:	40013400 	.word	0x40013400
 8008d14:	40000400 	.word	0x40000400
 8008d18:	40000800 	.word	0x40000800
 8008d1c:	40000c00 	.word	0x40000c00

08008d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f023 0201 	bic.w	r2, r3, #1
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f023 0302 	bic.w	r3, r3, #2
 8008d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a20      	ldr	r2, [pc, #128]	; (8008df8 <TIM_OC1_SetConfig+0xd8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_OC1_SetConfig+0x64>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a1f      	ldr	r2, [pc, #124]	; (8008dfc <TIM_OC1_SetConfig+0xdc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10c      	bne.n	8008d9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0308 	bic.w	r3, r3, #8
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 0304 	bic.w	r3, r3, #4
 8008d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <TIM_OC1_SetConfig+0xd8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d003      	beq.n	8008dae <TIM_OC1_SetConfig+0x8e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a14      	ldr	r2, [pc, #80]	; (8008dfc <TIM_OC1_SetConfig+0xdc>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d111      	bne.n	8008dd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	621a      	str	r2, [r3, #32]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bc80      	pop	{r7}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40013400 	.word	0x40013400

08008e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	f023 0210 	bic.w	r2, r3, #16
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	021b      	lsls	r3, r3, #8
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f023 0320 	bic.w	r3, r3, #32
 8008e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a21      	ldr	r2, [pc, #132]	; (8008ee0 <TIM_OC2_SetConfig+0xe0>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d003      	beq.n	8008e68 <TIM_OC2_SetConfig+0x68>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a20      	ldr	r2, [pc, #128]	; (8008ee4 <TIM_OC2_SetConfig+0xe4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d10d      	bne.n	8008e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a16      	ldr	r2, [pc, #88]	; (8008ee0 <TIM_OC2_SetConfig+0xe0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_OC2_SetConfig+0x94>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a15      	ldr	r2, [pc, #84]	; (8008ee4 <TIM_OC2_SetConfig+0xe4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d113      	bne.n	8008ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40013400 	.word	0x40013400

08008ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a21      	ldr	r2, [pc, #132]	; (8008fc8 <TIM_OC3_SetConfig+0xe0>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d003      	beq.n	8008f4e <TIM_OC3_SetConfig+0x66>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a20      	ldr	r2, [pc, #128]	; (8008fcc <TIM_OC3_SetConfig+0xe4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d10d      	bne.n	8008f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a16      	ldr	r2, [pc, #88]	; (8008fc8 <TIM_OC3_SetConfig+0xe0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC3_SetConfig+0x92>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a15      	ldr	r2, [pc, #84]	; (8008fcc <TIM_OC3_SetConfig+0xe4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d113      	bne.n	8008fa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	621a      	str	r2, [r3, #32]
}
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40012c00 	.word	0x40012c00
 8008fcc:	40013400 	.word	0x40013400

08008fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800901a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	031b      	lsls	r3, r3, #12
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	4313      	orrs	r3, r2
 8009026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a11      	ldr	r2, [pc, #68]	; (8009070 <TIM_OC4_SetConfig+0xa0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d003      	beq.n	8009038 <TIM_OC4_SetConfig+0x68>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a10      	ldr	r2, [pc, #64]	; (8009074 <TIM_OC4_SetConfig+0xa4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d109      	bne.n	800904c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800903e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	019b      	lsls	r3, r3, #6
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	621a      	str	r2, [r3, #32]
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr
 8009070:	40012c00 	.word	0x40012c00
 8009074:	40013400 	.word	0x40013400

08009078 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009090:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b70      	cmp	r3, #112	; 0x70
 80090bc:	d01a      	beq.n	80090f4 <TIM_SlaveTimer_SetConfig+0x7c>
 80090be:	2b70      	cmp	r3, #112	; 0x70
 80090c0:	d860      	bhi.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
 80090c2:	2b60      	cmp	r3, #96	; 0x60
 80090c4:	d054      	beq.n	8009170 <TIM_SlaveTimer_SetConfig+0xf8>
 80090c6:	2b60      	cmp	r3, #96	; 0x60
 80090c8:	d85c      	bhi.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
 80090ca:	2b50      	cmp	r3, #80	; 0x50
 80090cc:	d046      	beq.n	800915c <TIM_SlaveTimer_SetConfig+0xe4>
 80090ce:	2b50      	cmp	r3, #80	; 0x50
 80090d0:	d858      	bhi.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d019      	beq.n	800910a <TIM_SlaveTimer_SetConfig+0x92>
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d854      	bhi.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
 80090da:	2b30      	cmp	r3, #48	; 0x30
 80090dc:	d054      	beq.n	8009188 <TIM_SlaveTimer_SetConfig+0x110>
 80090de:	2b30      	cmp	r3, #48	; 0x30
 80090e0:	d850      	bhi.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d050      	beq.n	8009188 <TIM_SlaveTimer_SetConfig+0x110>
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	d84c      	bhi.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d04c      	beq.n	8009188 <TIM_SlaveTimer_SetConfig+0x110>
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	d04a      	beq.n	8009188 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80090f2:	e047      	b.n	8009184 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68d9      	ldr	r1, [r3, #12]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f000 f9bc 	bl	8009480 <TIM_ETR_SetConfig>
      break;
 8009108:	e03f      	b.n	800918a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b05      	cmp	r3, #5
 8009110:	d101      	bne.n	8009116 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e03a      	b.n	800918c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6a1a      	ldr	r2, [r3, #32]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0201 	bic.w	r2, r2, #1
 800912c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800913c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	621a      	str	r2, [r3, #32]
      break;
 800915a:	e016      	b.n	800918a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	6899      	ldr	r1, [r3, #8]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	461a      	mov	r2, r3
 800916a:	f000 f879 	bl	8009260 <TIM_TI1_ConfigInputStage>
      break;
 800916e:	e00c      	b.n	800918a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6899      	ldr	r1, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	461a      	mov	r2, r3
 800917e:	f000 f8d9 	bl	8009334 <TIM_TI2_ConfigInputStage>
      break;
 8009182:	e002      	b.n	800918a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009184:	bf00      	nop
 8009186:	e000      	b.n	800918a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8009188:	bf00      	nop
  }
  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4a23      	ldr	r2, [pc, #140]	; (800924c <TIM_TI1_SetConfig+0xb8>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <TIM_TI1_SetConfig+0x56>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4a22      	ldr	r2, [pc, #136]	; (8009250 <TIM_TI1_SetConfig+0xbc>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00f      	beq.n	80091ea <TIM_TI1_SetConfig+0x56>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d0:	d00b      	beq.n	80091ea <TIM_TI1_SetConfig+0x56>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4a1f      	ldr	r2, [pc, #124]	; (8009254 <TIM_TI1_SetConfig+0xc0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d007      	beq.n	80091ea <TIM_TI1_SetConfig+0x56>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <TIM_TI1_SetConfig+0xc4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d003      	beq.n	80091ea <TIM_TI1_SetConfig+0x56>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4a1d      	ldr	r2, [pc, #116]	; (800925c <TIM_TI1_SetConfig+0xc8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d101      	bne.n	80091ee <TIM_TI1_SetConfig+0x5a>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <TIM_TI1_SetConfig+0x5c>
 80091ee:	2300      	movs	r3, #0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f023 0303 	bic.w	r3, r3, #3
 80091fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e003      	b.n	800920e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f043 0301 	orr.w	r3, r3, #1
 800920c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	b2db      	uxtb	r3, r3
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f023 030a 	bic.w	r3, r3, #10
 8009228:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f003 030a 	and.w	r3, r3, #10
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr
 800924c:	40012c00 	.word	0x40012c00
 8009250:	40013400 	.word	0x40013400
 8009254:	40000400 	.word	0x40000400
 8009258:	40000800 	.word	0x40000800
 800925c:	40000c00 	.word	0x40000c00

08009260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f023 0201 	bic.w	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800928a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f023 030a 	bic.w	r3, r3, #10
 800929c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr

080092bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f023 0210 	bic.w	r2, r3, #16
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	031b      	lsls	r3, r3, #12
 8009300:	b29b      	uxth	r3, r3
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800930e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4313      	orrs	r3, r2
 800931c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	621a      	str	r2, [r3, #32]
}
 800932a:	bf00      	nop
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	f023 0210 	bic.w	r2, r3, #16
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800935e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	031b      	lsls	r3, r3, #12
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	621a      	str	r2, [r3, #32]
}
 8009388:	bf00      	nop
 800938a:	371c      	adds	r7, #28
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr

08009392 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009434:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4313      	orrs	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	031b      	lsls	r3, r3, #12
 800944c:	b29b      	uxth	r3, r3
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	4313      	orrs	r3, r2
 8009452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800945a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	031b      	lsls	r3, r3, #12
 8009460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	621a      	str	r2, [r3, #32]
}
 8009476:	bf00      	nop
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	bc80      	pop	{r7}
 800947e:	4770      	bx	lr

08009480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800949a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	021a      	lsls	r2, r3, #8
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	609a      	str	r2, [r3, #8]
}
 80094b4:	bf00      	nop
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc80      	pop	{r7}
 80094bc:	4770      	bx	lr

080094be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	2201      	movs	r2, #1
 80094d2:	fa02 f303 	lsl.w	r3, r2, r3
 80094d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a1a      	ldr	r2, [r3, #32]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	43db      	mvns	r3, r3
 80094e0:	401a      	ands	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6a1a      	ldr	r2, [r3, #32]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f003 031f 	and.w	r3, r3, #31
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	fa01 f303 	lsl.w	r3, r1, r3
 80094f6:	431a      	orrs	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	621a      	str	r2, [r3, #32]
}
 80094fc:	bf00      	nop
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr
	...

08009508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800951c:	2302      	movs	r3, #2
 800951e:	e050      	b.n	80095c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a1b      	ldr	r2, [pc, #108]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d018      	beq.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a19      	ldr	r2, [pc, #100]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d013      	beq.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009576:	d00e      	beq.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a15      	ldr	r2, [pc, #84]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d009      	beq.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a14      	ldr	r2, [pc, #80]	; (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d004      	beq.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a12      	ldr	r2, [pc, #72]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d10c      	bne.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800959c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr
 80095cc:	40012c00 	.word	0x40012c00
 80095d0:	40013400 	.word	0x40013400
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00

080095e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bc80      	pop	{r7}
 80095f0:	4770      	bx	lr

080095f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr

08009604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e03f      	b.n	8009696 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7fc f884 	bl	8005738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2224      	movs	r2, #36	; 0x24
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f9a7 	bl	800999c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800965c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	695a      	ldr	r2, [r3, #20]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800966c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800967c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b08a      	sub	sp, #40	; 0x28
 80096a2:	af02      	add	r7, sp, #8
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	603b      	str	r3, [r7, #0]
 80096aa:	4613      	mov	r3, r2
 80096ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d17c      	bne.n	80097b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <HAL_UART_Transmit+0x2c>
 80096c4:	88fb      	ldrh	r3, [r7, #6]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e075      	b.n	80097ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_UART_Transmit+0x3e>
 80096d8:	2302      	movs	r3, #2
 80096da:	e06e      	b.n	80097ba <HAL_UART_Transmit+0x11c>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2221      	movs	r2, #33	; 0x21
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096f2:	f7fc f93f 	bl	8005974 <HAL_GetTick>
 80096f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	88fa      	ldrh	r2, [r7, #6]
 8009702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970c:	d108      	bne.n	8009720 <HAL_UART_Transmit+0x82>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	e003      	b.n	8009728 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009724:	2300      	movs	r3, #0
 8009726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009730:	e02a      	b.n	8009788 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2200      	movs	r2, #0
 800973a:	2180      	movs	r1, #128	; 0x80
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f8e2 	bl	8009906 <UART_WaitOnFlagUntilTimeout>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e036      	b.n	80097ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10b      	bne.n	800976a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	3302      	adds	r3, #2
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	e007      	b.n	800977a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	3301      	adds	r3, #1
 8009778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800978c:	b29b      	uxth	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1cf      	bne.n	8009732 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2200      	movs	r2, #0
 800979a:	2140      	movs	r1, #64	; 0x40
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f8b2 	bl	8009906 <UART_WaitOnFlagUntilTimeout>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e006      	b.n	80097ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	e000      	b.n	80097ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80097b8:	2302      	movs	r3, #2
  }
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b08a      	sub	sp, #40	; 0x28
 80097c6:	af02      	add	r7, sp, #8
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b20      	cmp	r3, #32
 80097e0:	f040 808c 	bne.w	80098fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <HAL_UART_Receive+0x2e>
 80097ea:	88fb      	ldrh	r3, [r7, #6]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e084      	b.n	80098fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d101      	bne.n	8009802 <HAL_UART_Receive+0x40>
 80097fe:	2302      	movs	r3, #2
 8009800:	e07d      	b.n	80098fe <HAL_UART_Receive+0x13c>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2222      	movs	r2, #34	; 0x22
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800981e:	f7fc f8a9 	bl	8005974 <HAL_GetTick>
 8009822:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	88fa      	ldrh	r2, [r7, #6]
 800982e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009838:	d108      	bne.n	800984c <HAL_UART_Receive+0x8a>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	e003      	b.n	8009854 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800985c:	e043      	b.n	80098e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2200      	movs	r2, #0
 8009866:	2120      	movs	r1, #32
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f84c 	bl	8009906 <UART_WaitOnFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e042      	b.n	80098fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10c      	bne.n	8009898 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	b29a      	uxth	r2, r3
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	3302      	adds	r3, #2
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	e01f      	b.n	80098d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a0:	d007      	beq.n	80098b2 <HAL_UART_Receive+0xf0>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <HAL_UART_Receive+0xfe>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d106      	bne.n	80098c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	e008      	b.n	80098d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	3301      	adds	r3, #1
 80098d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	3b01      	subs	r3, #1
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1b6      	bne.n	800985e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e000      	b.n	80098fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80098fc:	2302      	movs	r3, #2
  }
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	603b      	str	r3, [r7, #0]
 8009912:	4613      	mov	r3, r2
 8009914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009916:	e02c      	b.n	8009972 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991e:	d028      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d007      	beq.n	8009936 <UART_WaitOnFlagUntilTimeout+0x30>
 8009926:	f7fc f825 	bl	8005974 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	429a      	cmp	r2, r3
 8009934:	d21d      	bcs.n	8009972 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009944:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	695a      	ldr	r2, [r3, #20]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0201 	bic.w	r2, r2, #1
 8009954:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2220      	movs	r2, #32
 800995a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e00f      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4013      	ands	r3, r2
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d0c3      	beq.n	8009918 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80099d6:	f023 030c 	bic.w	r3, r3, #12
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	6812      	ldr	r2, [r2, #0]
 80099de:	68b9      	ldr	r1, [r7, #8]
 80099e0:	430b      	orrs	r3, r1
 80099e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699a      	ldr	r2, [r3, #24]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a2c      	ldr	r2, [pc, #176]	; (8009ab0 <UART_SetConfig+0x114>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d103      	bne.n	8009a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a04:	f7fe f894 	bl	8007b30 <HAL_RCC_GetPCLK2Freq>
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	e002      	b.n	8009a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a0c:	f7fe f87c 	bl	8007b08 <HAL_RCC_GetPCLK1Freq>
 8009a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	009a      	lsls	r2, r3, #2
 8009a1c:	441a      	add	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a28:	4a22      	ldr	r2, [pc, #136]	; (8009ab4 <UART_SetConfig+0x118>)
 8009a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2e:	095b      	lsrs	r3, r3, #5
 8009a30:	0119      	lsls	r1, r3, #4
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009a      	lsls	r2, r3, #2
 8009a3c:	441a      	add	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a48:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <UART_SetConfig+0x118>)
 8009a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8009a4e:	095b      	lsrs	r3, r3, #5
 8009a50:	2064      	movs	r0, #100	; 0x64
 8009a52:	fb00 f303 	mul.w	r3, r0, r3
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	3332      	adds	r3, #50	; 0x32
 8009a5c:	4a15      	ldr	r2, [pc, #84]	; (8009ab4 <UART_SetConfig+0x118>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	095b      	lsrs	r3, r3, #5
 8009a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a68:	4419      	add	r1, r3
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009a      	lsls	r2, r3, #2
 8009a74:	441a      	add	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a80:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <UART_SetConfig+0x118>)
 8009a82:	fba3 0302 	umull	r0, r3, r3, r2
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	2064      	movs	r0, #100	; 0x64
 8009a8a:	fb00 f303 	mul.w	r3, r0, r3
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	3332      	adds	r3, #50	; 0x32
 8009a94:	4a07      	ldr	r2, [pc, #28]	; (8009ab4 <UART_SetConfig+0x118>)
 8009a96:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	f003 020f 	and.w	r2, r3, #15
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	440a      	add	r2, r1
 8009aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009aa8:	bf00      	nop
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	40013800 	.word	0x40013800
 8009ab4:	51eb851f 	.word	0x51eb851f

08009ab8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009abe:	f3ef 8305 	mrs	r3, IPSR
 8009ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10f      	bne.n	8009aea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aca:	f3ef 8310 	mrs	r3, PRIMASK
 8009ace:	607b      	str	r3, [r7, #4]
  return(result);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <osKernelInitialize+0x32>
 8009ad6:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <osKernelInitialize+0x60>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d109      	bne.n	8009af2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ade:	f3ef 8311 	mrs	r3, BASEPRI
 8009ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009aea:	f06f 0305 	mvn.w	r3, #5
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e00c      	b.n	8009b0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <osKernelInitialize+0x60>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009afa:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <osKernelInitialize+0x60>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e002      	b.n	8009b0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr
 8009b18:	20000644 	.word	0x20000644

08009b1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b22:	f3ef 8305 	mrs	r3, IPSR
 8009b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10f      	bne.n	8009b4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b32:	607b      	str	r3, [r7, #4]
  return(result);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <osKernelStart+0x32>
 8009b3a:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <osKernelStart+0x64>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d109      	bne.n	8009b56 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b42:	f3ef 8311 	mrs	r3, BASEPRI
 8009b46:	603b      	str	r3, [r7, #0]
  return(result);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009b4e:	f06f 0305 	mvn.w	r3, #5
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e00e      	b.n	8009b74 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b56:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <osKernelStart+0x64>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d107      	bne.n	8009b6e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009b5e:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <osKernelStart+0x64>)
 8009b60:	2202      	movs	r2, #2
 8009b62:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009b64:	f001 f890 	bl	800ac88 <vTaskStartScheduler>
      stat = osOK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	e002      	b.n	8009b74 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b74:	68fb      	ldr	r3, [r7, #12]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000644 	.word	0x20000644

08009b84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b092      	sub	sp, #72	; 0x48
 8009b88:	af04      	add	r7, sp, #16
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b94:	f3ef 8305 	mrs	r3, IPSR
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 8094 	bne.w	8009cca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ba6:	623b      	str	r3, [r7, #32]
  return(result);
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f040 808d 	bne.w	8009cca <osThreadNew+0x146>
 8009bb0:	4b48      	ldr	r3, [pc, #288]	; (8009cd4 <osThreadNew+0x150>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d106      	bne.n	8009bc6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8009bbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 8082 	bne.w	8009cca <osThreadNew+0x146>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d07e      	beq.n	8009cca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009bd0:	2318      	movs	r3, #24
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009bd8:	f107 031b 	add.w	r3, r7, #27
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009bde:	f04f 33ff 	mov.w	r3, #4294967295
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d045      	beq.n	8009c76 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <osThreadNew+0x74>
        name = attr->name;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d008      	beq.n	8009c1e <osThreadNew+0x9a>
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	2b38      	cmp	r3, #56	; 0x38
 8009c10:	d805      	bhi.n	8009c1e <osThreadNew+0x9a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <osThreadNew+0x9e>
        return (NULL);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e054      	b.n	8009ccc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	089b      	lsrs	r3, r3, #2
 8009c30:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00e      	beq.n	8009c58 <osThreadNew+0xd4>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	2bc3      	cmp	r3, #195	; 0xc3
 8009c40:	d90a      	bls.n	8009c58 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d006      	beq.n	8009c58 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <osThreadNew+0xd4>
        mem = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c56:	e010      	b.n	8009c7a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10c      	bne.n	8009c7a <osThreadNew+0xf6>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d108      	bne.n	8009c7a <osThreadNew+0xf6>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <osThreadNew+0xf6>
          mem = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c74:	e001      	b.n	8009c7a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d110      	bne.n	8009ca2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c88:	9202      	str	r2, [sp, #8]
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 fe12 	bl	800a8c0 <xTaskCreateStatic>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e013      	b.n	8009cca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d110      	bne.n	8009cca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	f107 0314 	add.w	r3, r7, #20
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 fe5c 	bl	800a978 <xTaskCreate>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d001      	beq.n	8009cca <osThreadNew+0x146>
          hTask = NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009cca:	697b      	ldr	r3, [r7, #20]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3738      	adds	r7, #56	; 0x38
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20000644 	.word	0x20000644

08009cd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce0:	f3ef 8305 	mrs	r3, IPSR
 8009ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8009ce6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10f      	bne.n	8009d0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cec:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d109      	bne.n	8009d0c <osDelay+0x34>
 8009cf8:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <osDelay+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d109      	bne.n	8009d14 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d00:	f3ef 8311 	mrs	r3, BASEPRI
 8009d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <osDelay+0x3c>
    stat = osErrorISR;
 8009d0c:	f06f 0305 	mvn.w	r3, #5
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	e007      	b.n	8009d24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 ff7e 	bl	800ac20 <vTaskDelay>
    }
  }

  return (stat);
 8009d24:	697b      	ldr	r3, [r7, #20]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000644 	.word	0x20000644

08009d34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <vApplicationGetIdleTaskMemory+0x28>)
 8009d44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4a05      	ldr	r2, [pc, #20]	; (8009d60 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2280      	movs	r2, #128	; 0x80
 8009d50:	601a      	str	r2, [r3, #0]
}
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr
 8009d5c:	20000648 	.word	0x20000648
 8009d60:	2000070c 	.word	0x2000070c

08009d64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a07      	ldr	r2, [pc, #28]	; (8009d90 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4a06      	ldr	r2, [pc, #24]	; (8009d94 <vApplicationGetTimerTaskMemory+0x30>)
 8009d7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d82:	601a      	str	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	2000090c 	.word	0x2000090c
 8009d94:	200009d0 	.word	0x200009d0

08009d98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f103 0208 	add.w	r2, r3, #8
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295
 8009db0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f103 0208 	add.w	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f103 0208 	add.w	r2, r3, #8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr

08009dd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr

08009dee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4a:	d103      	bne.n	8009e54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	e00c      	b.n	8009e6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3308      	adds	r3, #8
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e002      	b.n	8009e62 <vListInsert+0x2e>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d2f6      	bcs.n	8009e5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	601a      	str	r2, [r3, #0]
}
 8009e9a:	bf00      	nop
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr

08009ea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6892      	ldr	r2, [r2, #8]
 8009eba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6852      	ldr	r2, [r2, #4]
 8009ec4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d103      	bne.n	8009ed8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	1e5a      	subs	r2, r3, #1
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bc80      	pop	{r7}
 8009ef4:	4770      	bx	lr
	...

08009ef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f22:	f002 fa3b 	bl	800c39c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	68f9      	ldr	r1, [r7, #12]
 8009f30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f32:	fb01 f303 	mul.w	r3, r1, r3
 8009f36:	441a      	add	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f52:	3b01      	subs	r3, #1
 8009f54:	68f9      	ldr	r1, [r7, #12]
 8009f56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f58:	fb01 f303 	mul.w	r3, r1, r3
 8009f5c:	441a      	add	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	22ff      	movs	r2, #255	; 0xff
 8009f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d114      	bne.n	8009fa2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01a      	beq.n	8009fb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3310      	adds	r3, #16
 8009f84:	4618      	mov	r0, r3
 8009f86:	f001 f977 	bl	800b278 <xTaskRemoveFromEventList>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d012      	beq.n	8009fb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f90:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <xQueueGenericReset+0xcc>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	e009      	b.n	8009fb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3310      	adds	r3, #16
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fef6 	bl	8009d98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3324      	adds	r3, #36	; 0x24
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7ff fef1 	bl	8009d98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fb6:	f002 fa21 	bl	800c3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fba:	2301      	movs	r3, #1
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	e000ed04 	.word	0xe000ed04

08009fc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08e      	sub	sp, #56	; 0x38
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <xQueueGenericCreateStatic+0x52>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <xQueueGenericCreateStatic+0x56>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e000      	b.n	800a020 <xQueueGenericCreateStatic+0x58>
 800a01e:	2300      	movs	r3, #0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	623b      	str	r3, [r7, #32]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <xQueueGenericCreateStatic+0x7e>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <xQueueGenericCreateStatic+0x82>
 800a046:	2301      	movs	r3, #1
 800a048:	e000      	b.n	800a04c <xQueueGenericCreateStatic+0x84>
 800a04a:	2300      	movs	r3, #0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	61fb      	str	r3, [r7, #28]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a066:	2350      	movs	r3, #80	; 0x50
 800a068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b50      	cmp	r3, #80	; 0x50
 800a06e:	d00a      	beq.n	800a086 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	61bb      	str	r3, [r7, #24]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00d      	beq.n	800a0ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a098:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f805 	bl	800a0b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3730      	adds	r7, #48	; 0x30
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d103      	bne.n	800a0d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	e002      	b.n	800a0d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	69b8      	ldr	r0, [r7, #24]
 800a0e8:	f7ff ff06 	bl	8009ef8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08e      	sub	sp, #56	; 0x38
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a10a:	2300      	movs	r3, #0
 800a10c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <xQueueGenericSend+0x32>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d103      	bne.n	800a13c <xQueueGenericSend+0x40>
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <xQueueGenericSend+0x44>
 800a13c:	2301      	movs	r3, #1
 800a13e:	e000      	b.n	800a142 <xQueueGenericSend+0x46>
 800a140:	2300      	movs	r3, #0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <xQueueGenericSend+0x60>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a158:	bf00      	nop
 800a15a:	e7fe      	b.n	800a15a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d103      	bne.n	800a16a <xQueueGenericSend+0x6e>
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a166:	2b01      	cmp	r3, #1
 800a168:	d101      	bne.n	800a16e <xQueueGenericSend+0x72>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <xQueueGenericSend+0x74>
 800a16e:	2300      	movs	r3, #0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <xQueueGenericSend+0x8e>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	623b      	str	r3, [r7, #32]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a18a:	f001 fa93 	bl	800b6b4 <xTaskGetSchedulerState>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <xQueueGenericSend+0x9e>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <xQueueGenericSend+0xa2>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <xQueueGenericSend+0xa4>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10a      	bne.n	800a1ba <xQueueGenericSend+0xbe>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	61fb      	str	r3, [r7, #28]
}
 800a1b6:	bf00      	nop
 800a1b8:	e7fe      	b.n	800a1b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1ba:	f002 f8ef 	bl	800c39c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d302      	bcc.n	800a1d0 <xQueueGenericSend+0xd4>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d129      	bne.n	800a224 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	68b9      	ldr	r1, [r7, #8]
 800a1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d6:	f000 fa07 	bl	800a5e8 <prvCopyDataToQueue>
 800a1da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d010      	beq.n	800a206 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	3324      	adds	r3, #36	; 0x24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 f845 	bl	800b278 <xTaskRemoveFromEventList>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d013      	beq.n	800a21c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1f4:	4b3f      	ldr	r3, [pc, #252]	; (800a2f4 <xQueueGenericSend+0x1f8>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	e00a      	b.n	800a21c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d007      	beq.n	800a21c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a20c:	4b39      	ldr	r3, [pc, #228]	; (800a2f4 <xQueueGenericSend+0x1f8>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a21c:	f002 f8ee 	bl	800c3fc <vPortExitCritical>
				return pdPASS;
 800a220:	2301      	movs	r3, #1
 800a222:	e063      	b.n	800a2ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d103      	bne.n	800a232 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a22a:	f002 f8e7 	bl	800c3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	e05c      	b.n	800a2ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a234:	2b00      	cmp	r3, #0
 800a236:	d106      	bne.n	800a246 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a238:	f107 0314 	add.w	r3, r7, #20
 800a23c:	4618      	mov	r0, r3
 800a23e:	f001 f881 	bl	800b344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a242:	2301      	movs	r3, #1
 800a244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a246:	f002 f8d9 	bl	800c3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a24a:	f000 fd8d 	bl	800ad68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a24e:	f002 f8a5 	bl	800c39c <vPortEnterCritical>
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25e:	d103      	bne.n	800a268 <xQueueGenericSend+0x16c>
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a26e:	b25b      	sxtb	r3, r3
 800a270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a274:	d103      	bne.n	800a27e <xQueueGenericSend+0x182>
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a27e:	f002 f8bd 	bl	800c3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a282:	1d3a      	adds	r2, r7, #4
 800a284:	f107 0314 	add.w	r3, r7, #20
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 f870 	bl	800b370 <xTaskCheckForTimeOut>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d124      	bne.n	800a2e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a298:	f000 fa9e 	bl	800a7d8 <prvIsQueueFull>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d018      	beq.n	800a2d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	3310      	adds	r3, #16
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 ff94 	bl	800b1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b2:	f000 fa29 	bl	800a708 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2b6:	f000 fd9b 	bl	800adf0 <xTaskResumeAll>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f47f af7c 	bne.w	800a1ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2c2:	4b0c      	ldr	r3, [pc, #48]	; (800a2f4 <xQueueGenericSend+0x1f8>)
 800a2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	e772      	b.n	800a1ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2d6:	f000 fa17 	bl	800a708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2da:	f000 fd89 	bl	800adf0 <xTaskResumeAll>
 800a2de:	e76c      	b.n	800a1ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2e2:	f000 fa11 	bl	800a708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2e6:	f000 fd83 	bl	800adf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2ea:	2300      	movs	r3, #0
		}
	}
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3738      	adds	r7, #56	; 0x38
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08e      	sub	sp, #56	; 0x38
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10a      	bne.n	800a326 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <xQueueGenericSendFromISR+0x3c>
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <xQueueGenericSendFromISR+0x40>
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <xQueueGenericSendFromISR+0x42>
 800a338:	2300      	movs	r3, #0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	623b      	str	r3, [r7, #32]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d103      	bne.n	800a362 <xQueueGenericSendFromISR+0x6a>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d101      	bne.n	800a366 <xQueueGenericSendFromISR+0x6e>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <xQueueGenericSendFromISR+0x70>
 800a366:	2300      	movs	r3, #0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	61fb      	str	r3, [r7, #28]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a382:	f002 f9b3 	bl	800c6ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a386:	f3ef 8211 	mrs	r2, BASEPRI
 800a38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	61ba      	str	r2, [r7, #24]
 800a39c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a39e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d302      	bcc.n	800a3b4 <xQueueGenericSendFromISR+0xbc>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d12c      	bne.n	800a40e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3c4:	f000 f910 	bl	800a5e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d112      	bne.n	800a3f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d016      	beq.n	800a408 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	3324      	adds	r3, #36	; 0x24
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 ff4a 	bl	800b278 <xTaskRemoveFromEventList>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00e      	beq.n	800a408 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	e007      	b.n	800a408 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	b25a      	sxtb	r2, r3
 800a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a408:	2301      	movs	r3, #1
 800a40a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a40c:	e001      	b.n	800a412 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	637b      	str	r3, [r7, #52]	; 0x34
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a41c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a420:	4618      	mov	r0, r3
 800a422:	3738      	adds	r7, #56	; 0x38
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08c      	sub	sp, #48	; 0x30
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a434:	2300      	movs	r3, #0
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10a      	bne.n	800a458 <xQueueReceive+0x30>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	623b      	str	r3, [r7, #32]
}
 800a454:	bf00      	nop
 800a456:	e7fe      	b.n	800a456 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d103      	bne.n	800a466 <xQueueReceive+0x3e>
 800a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <xQueueReceive+0x42>
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <xQueueReceive+0x44>
 800a46a:	2300      	movs	r3, #0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xQueueReceive+0x5e>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61fb      	str	r3, [r7, #28]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a486:	f001 f915 	bl	800b6b4 <xTaskGetSchedulerState>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <xQueueReceive+0x6e>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <xQueueReceive+0x72>
 800a496:	2301      	movs	r3, #1
 800a498:	e000      	b.n	800a49c <xQueueReceive+0x74>
 800a49a:	2300      	movs	r3, #0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <xQueueReceive+0x8e>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	61bb      	str	r3, [r7, #24]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4b6:	f001 ff71 	bl	800c39c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d01f      	beq.n	800a506 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ca:	f000 f8f7 	bl	800a6bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	1e5a      	subs	r2, r3, #1
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00f      	beq.n	800a4fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	3310      	adds	r3, #16
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fec8 	bl	800b278 <xTaskRemoveFromEventList>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4ee:	4b3d      	ldr	r3, [pc, #244]	; (800a5e4 <xQueueReceive+0x1bc>)
 800a4f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4fe:	f001 ff7d 	bl	800c3fc <vPortExitCritical>
				return pdPASS;
 800a502:	2301      	movs	r3, #1
 800a504:	e069      	b.n	800a5da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a50c:	f001 ff76 	bl	800c3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a510:	2300      	movs	r3, #0
 800a512:	e062      	b.n	800a5da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a51a:	f107 0310 	add.w	r3, r7, #16
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 ff10 	bl	800b344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a528:	f001 ff68 	bl	800c3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a52c:	f000 fc1c 	bl	800ad68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a530:	f001 ff34 	bl	800c39c <vPortEnterCritical>
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d103      	bne.n	800a54a <xQueueReceive+0x122>
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a550:	b25b      	sxtb	r3, r3
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d103      	bne.n	800a560 <xQueueReceive+0x138>
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a560:	f001 ff4c 	bl	800c3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a564:	1d3a      	adds	r2, r7, #4
 800a566:	f107 0310 	add.w	r3, r7, #16
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 feff 	bl	800b370 <xTaskCheckForTimeOut>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d123      	bne.n	800a5c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57a:	f000 f917 	bl	800a7ac <prvIsQueueEmpty>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d017      	beq.n	800a5b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	3324      	adds	r3, #36	; 0x24
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fe23 	bl	800b1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a594:	f000 f8b8 	bl	800a708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a598:	f000 fc2a 	bl	800adf0 <xTaskResumeAll>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d189      	bne.n	800a4b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5a2:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <xQueueReceive+0x1bc>)
 800a5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	e780      	b.n	800a4b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b6:	f000 f8a7 	bl	800a708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ba:	f000 fc19 	bl	800adf0 <xTaskResumeAll>
 800a5be:	e77a      	b.n	800a4b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c2:	f000 f8a1 	bl	800a708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5c6:	f000 fc13 	bl	800adf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5cc:	f000 f8ee 	bl	800a7ac <prvIsQueueEmpty>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f43f af6f 	beq.w	800a4b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3730      	adds	r7, #48	; 0x30
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10d      	bne.n	800a622 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d14d      	bne.n	800a6aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	4618      	mov	r0, r3
 800a614:	f001 f86c 	bl	800b6f0 <xTaskPriorityDisinherit>
 800a618:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	e043      	b.n	800a6aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d119      	bne.n	800a65c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6898      	ldr	r0, [r3, #8]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a630:	461a      	mov	r2, r3
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	f002 fb93 	bl	800cd5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a640:	441a      	add	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d32b      	bcc.n	800a6aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	609a      	str	r2, [r3, #8]
 800a65a:	e026      	b.n	800a6aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	68d8      	ldr	r0, [r3, #12]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	461a      	mov	r2, r3
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	f002 fb79 	bl	800cd5e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a674:	425b      	negs	r3, r3
 800a676:	441a      	add	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	68da      	ldr	r2, [r3, #12]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d207      	bcs.n	800a698 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a690:	425b      	negs	r3, r3
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d105      	bne.n	800a6aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6b2:	697b      	ldr	r3, [r7, #20]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d018      	beq.n	800a700 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d6:	441a      	add	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d303      	bcc.n	800a6f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68d9      	ldr	r1, [r3, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6838      	ldr	r0, [r7, #0]
 800a6fc:	f002 fb2f 	bl	800cd5e <memcpy>
	}
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a710:	f001 fe44 	bl	800c39c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a71c:	e011      	b.n	800a742 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d012      	beq.n	800a74c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3324      	adds	r3, #36	; 0x24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fda4 	bl	800b278 <xTaskRemoveFromEventList>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a736:	f000 fe7d 	bl	800b434 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	dce9      	bgt.n	800a71e <prvUnlockQueue+0x16>
 800a74a:	e000      	b.n	800a74e <prvUnlockQueue+0x46>
					break;
 800a74c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	22ff      	movs	r2, #255	; 0xff
 800a752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a756:	f001 fe51 	bl	800c3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a75a:	f001 fe1f 	bl	800c39c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a764:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a766:	e011      	b.n	800a78c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d012      	beq.n	800a796 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3310      	adds	r3, #16
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fd7f 	bl	800b278 <xTaskRemoveFromEventList>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a780:	f000 fe58 	bl	800b434 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	3b01      	subs	r3, #1
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a78c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a790:	2b00      	cmp	r3, #0
 800a792:	dce9      	bgt.n	800a768 <prvUnlockQueue+0x60>
 800a794:	e000      	b.n	800a798 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a796:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	22ff      	movs	r2, #255	; 0xff
 800a79c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7a0:	f001 fe2c 	bl	800c3fc <vPortExitCritical>
}
 800a7a4:	bf00      	nop
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7b4:	f001 fdf2 	bl	800c39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	e001      	b.n	800a7ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7ca:	f001 fe17 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7e0:	f001 fddc 	bl	800c39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d102      	bne.n	800a7f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	e001      	b.n	800a7fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7fa:	f001 fdff 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a812:	2300      	movs	r3, #0
 800a814:	60fb      	str	r3, [r7, #12]
 800a816:	e014      	b.n	800a842 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a818:	4a0e      	ldr	r2, [pc, #56]	; (800a854 <vQueueAddToRegistry+0x4c>)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a824:	490b      	ldr	r1, [pc, #44]	; (800a854 <vQueueAddToRegistry+0x4c>)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a82e:	4a09      	ldr	r2, [pc, #36]	; (800a854 <vQueueAddToRegistry+0x4c>)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	4413      	add	r3, r2
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a83a:	e006      	b.n	800a84a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3301      	adds	r3, #1
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b07      	cmp	r3, #7
 800a846:	d9e7      	bls.n	800a818 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr
 800a854:	20000dd0 	.word	0x20000dd0

0800a858 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a868:	f001 fd98 	bl	800c39c <vPortEnterCritical>
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a872:	b25b      	sxtb	r3, r3
 800a874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a878:	d103      	bne.n	800a882 <vQueueWaitForMessageRestricted+0x2a>
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a888:	b25b      	sxtb	r3, r3
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88e:	d103      	bne.n	800a898 <vQueueWaitForMessageRestricted+0x40>
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a898:	f001 fdb0 	bl	800c3fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d106      	bne.n	800a8b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fcb7 	bl	800b220 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8b2:	6978      	ldr	r0, [r7, #20]
 800a8b4:	f7ff ff28 	bl	800a708 <prvUnlockQueue>
	}
 800a8b8:	bf00      	nop
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08e      	sub	sp, #56	; 0x38
 800a8c4:	af04      	add	r7, sp, #16
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10a      	bne.n	800a8ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	623b      	str	r3, [r7, #32]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xTaskCreateStatic+0x46>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	61fb      	str	r3, [r7, #28]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a906:	23c4      	movs	r3, #196	; 0xc4
 800a908:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2bc4      	cmp	r3, #196	; 0xc4
 800a90e:	d00a      	beq.n	800a926 <xTaskCreateStatic+0x66>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	61bb      	str	r3, [r7, #24]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01e      	beq.n	800a96a <xTaskCreateStatic+0xaa>
 800a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01b      	beq.n	800a96a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2202      	movs	r2, #2
 800a940:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a944:	2300      	movs	r3, #0
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	9302      	str	r3, [sp, #8]
 800a94c:	f107 0314 	add.w	r3, r7, #20
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f851 	bl	800aa04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a964:	f000 f8ec 	bl	800ab40 <prvAddNewTaskToReadyList>
 800a968:	e001      	b.n	800a96e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a96e:	697b      	ldr	r3, [r7, #20]
	}
 800a970:	4618      	mov	r0, r3
 800a972:	3728      	adds	r7, #40	; 0x28
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af04      	add	r7, sp, #16
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a988:	88fb      	ldrh	r3, [r7, #6]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 feeb 	bl	800c768 <pvPortMalloc>
 800a992:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00e      	beq.n	800a9b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a99a:	20c4      	movs	r0, #196	; 0xc4
 800a99c:	f001 fee4 	bl	800c768 <pvPortMalloc>
 800a9a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	631a      	str	r2, [r3, #48]	; 0x30
 800a9ae:	e005      	b.n	800a9bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9b0:	6978      	ldr	r0, [r7, #20]
 800a9b2:	f001 ff9d 	bl	800c8f0 <vPortFree>
 800a9b6:	e001      	b.n	800a9bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d017      	beq.n	800a9f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9ca:	88fa      	ldrh	r2, [r7, #6]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f80f 	bl	800aa04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9e6:	69f8      	ldr	r0, [r7, #28]
 800a9e8:	f000 f8aa 	bl	800ab40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	61bb      	str	r3, [r7, #24]
 800a9f0:	e002      	b.n	800a9f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9f8:	69bb      	ldr	r3, [r7, #24]
	}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3720      	adds	r7, #32
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	21a5      	movs	r1, #165	; 0xa5
 800aa1e:	f002 f9ac 	bl	800cd7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	f023 0307 	bic.w	r3, r3, #7
 800aa3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	617b      	str	r3, [r7, #20]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61fb      	str	r3, [r7, #28]
 800aa60:	e012      	b.n	800aa88 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	4413      	add	r3, r2
 800aa68:	7819      	ldrb	r1, [r3, #0]
 800aa6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4413      	add	r3, r2
 800aa70:	3334      	adds	r3, #52	; 0x34
 800aa72:	460a      	mov	r2, r1
 800aa74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d006      	beq.n	800aa90 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	3301      	adds	r3, #1
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	2b17      	cmp	r3, #23
 800aa8c:	d9e9      	bls.n	800aa62 <prvInitialiseNewTask+0x5e>
 800aa8e:	e000      	b.n	800aa92 <prvInitialiseNewTask+0x8e>
		{
			break;
 800aa90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	2b37      	cmp	r3, #55	; 0x37
 800aa9e:	d901      	bls.n	800aaa4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aaa0:	2337      	movs	r3, #55	; 0x37
 800aaa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	2200      	movs	r2, #0
 800aab4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	3304      	adds	r3, #4
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7ff f98b 	bl	8009dd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	3318      	adds	r3, #24
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7ff f986 	bl	8009dd6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aace:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aade:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	335c      	adds	r3, #92	; 0x5c
 800aaf4:	2260      	movs	r2, #96	; 0x60
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f002 f93e 	bl	800cd7a <memset>
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <prvInitialiseNewTask+0x130>)
 800ab02:	661a      	str	r2, [r3, #96]	; 0x60
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	4a0c      	ldr	r2, [pc, #48]	; (800ab38 <prvInitialiseNewTask+0x134>)
 800ab08:	665a      	str	r2, [r3, #100]	; 0x64
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	4a0b      	ldr	r2, [pc, #44]	; (800ab3c <prvInitialiseNewTask+0x138>)
 800ab0e:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	69b8      	ldr	r0, [r7, #24]
 800ab16:	f001 fb4d 	bl	800c1b4 <pxPortInitialiseStack>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab2c:	bf00      	nop
 800ab2e:	3720      	adds	r7, #32
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	080116d8 	.word	0x080116d8
 800ab38:	080116f8 	.word	0x080116f8
 800ab3c:	080116b8 	.word	0x080116b8

0800ab40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab48:	f001 fc28 	bl	800c39c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab4c:	4b2d      	ldr	r3, [pc, #180]	; (800ac04 <prvAddNewTaskToReadyList+0xc4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3301      	adds	r3, #1
 800ab52:	4a2c      	ldr	r2, [pc, #176]	; (800ac04 <prvAddNewTaskToReadyList+0xc4>)
 800ab54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab56:	4b2c      	ldr	r3, [pc, #176]	; (800ac08 <prvAddNewTaskToReadyList+0xc8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d109      	bne.n	800ab72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab5e:	4a2a      	ldr	r2, [pc, #168]	; (800ac08 <prvAddNewTaskToReadyList+0xc8>)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab64:	4b27      	ldr	r3, [pc, #156]	; (800ac04 <prvAddNewTaskToReadyList+0xc4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d110      	bne.n	800ab8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab6c:	f000 fcdc 	bl	800b528 <prvInitialiseTaskLists>
 800ab70:	e00d      	b.n	800ab8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab72:	4b26      	ldr	r3, [pc, #152]	; (800ac0c <prvAddNewTaskToReadyList+0xcc>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d109      	bne.n	800ab8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab7a:	4b23      	ldr	r3, [pc, #140]	; (800ac08 <prvAddNewTaskToReadyList+0xc8>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d802      	bhi.n	800ab8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab88:	4a1f      	ldr	r2, [pc, #124]	; (800ac08 <prvAddNewTaskToReadyList+0xc8>)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab8e:	4b20      	ldr	r3, [pc, #128]	; (800ac10 <prvAddNewTaskToReadyList+0xd0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a1e      	ldr	r2, [pc, #120]	; (800ac10 <prvAddNewTaskToReadyList+0xd0>)
 800ab96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab98:	4b1d      	ldr	r3, [pc, #116]	; (800ac10 <prvAddNewTaskToReadyList+0xd0>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba4:	4b1b      	ldr	r3, [pc, #108]	; (800ac14 <prvAddNewTaskToReadyList+0xd4>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d903      	bls.n	800abb4 <prvAddNewTaskToReadyList+0x74>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	4a18      	ldr	r2, [pc, #96]	; (800ac14 <prvAddNewTaskToReadyList+0xd4>)
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4a15      	ldr	r2, [pc, #84]	; (800ac18 <prvAddNewTaskToReadyList+0xd8>)
 800abc2:	441a      	add	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3304      	adds	r3, #4
 800abc8:	4619      	mov	r1, r3
 800abca:	4610      	mov	r0, r2
 800abcc:	f7ff f90f 	bl	8009dee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abd0:	f001 fc14 	bl	800c3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abd4:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <prvAddNewTaskToReadyList+0xcc>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00e      	beq.n	800abfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abdc:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <prvAddNewTaskToReadyList+0xc8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d207      	bcs.n	800abfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abea:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <prvAddNewTaskToReadyList+0xdc>)
 800abec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abfa:	bf00      	nop
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	200012e4 	.word	0x200012e4
 800ac08:	20000e10 	.word	0x20000e10
 800ac0c:	200012f0 	.word	0x200012f0
 800ac10:	20001300 	.word	0x20001300
 800ac14:	200012ec 	.word	0x200012ec
 800ac18:	20000e14 	.word	0x20000e14
 800ac1c:	e000ed04 	.word	0xe000ed04

0800ac20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d017      	beq.n	800ac62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac32:	4b13      	ldr	r3, [pc, #76]	; (800ac80 <vTaskDelay+0x60>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <vTaskDelay+0x30>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60bb      	str	r3, [r7, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac50:	f000 f88a 	bl	800ad68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac54:	2100      	movs	r1, #0
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 ff46 	bl	800bae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac5c:	f000 f8c8 	bl	800adf0 <xTaskResumeAll>
 800ac60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d107      	bne.n	800ac78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac68:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <vTaskDelay+0x64>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac78:	bf00      	nop
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	2000130c 	.word	0x2000130c
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac96:	463a      	mov	r2, r7
 800ac98:	1d39      	adds	r1, r7, #4
 800ac9a:	f107 0308 	add.w	r3, r7, #8
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff f848 	bl	8009d34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	9202      	str	r2, [sp, #8]
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	2300      	movs	r3, #0
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	2300      	movs	r3, #0
 800acb4:	460a      	mov	r2, r1
 800acb6:	4924      	ldr	r1, [pc, #144]	; (800ad48 <vTaskStartScheduler+0xc0>)
 800acb8:	4824      	ldr	r0, [pc, #144]	; (800ad4c <vTaskStartScheduler+0xc4>)
 800acba:	f7ff fe01 	bl	800a8c0 <xTaskCreateStatic>
 800acbe:	4603      	mov	r3, r0
 800acc0:	4a23      	ldr	r2, [pc, #140]	; (800ad50 <vTaskStartScheduler+0xc8>)
 800acc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acc4:	4b22      	ldr	r3, [pc, #136]	; (800ad50 <vTaskStartScheduler+0xc8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800accc:	2301      	movs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	e001      	b.n	800acd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d102      	bne.n	800ace2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acdc:	f000 ff58 	bl	800bb90 <xTimerCreateTimerTask>
 800ace0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d11b      	bne.n	800ad20 <vTaskStartScheduler+0x98>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	613b      	str	r3, [r7, #16]
}
 800acfa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acfc:	4b15      	ldr	r3, [pc, #84]	; (800ad54 <vTaskStartScheduler+0xcc>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	335c      	adds	r3, #92	; 0x5c
 800ad02:	4a15      	ldr	r2, [pc, #84]	; (800ad58 <vTaskStartScheduler+0xd0>)
 800ad04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad06:	4b15      	ldr	r3, [pc, #84]	; (800ad5c <vTaskStartScheduler+0xd4>)
 800ad08:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad0e:	4b14      	ldr	r3, [pc, #80]	; (800ad60 <vTaskStartScheduler+0xd8>)
 800ad10:	2201      	movs	r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ad14:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <vTaskStartScheduler+0xdc>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad1a:	f001 facd 	bl	800c2b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad1e:	e00e      	b.n	800ad3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	d10a      	bne.n	800ad3e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	60fb      	str	r3, [r7, #12]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <vTaskStartScheduler+0xb4>
}
 800ad3e:	bf00      	nop
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	080114b4 	.word	0x080114b4
 800ad4c:	0800b44d 	.word	0x0800b44d
 800ad50:	20001308 	.word	0x20001308
 800ad54:	20000e10 	.word	0x20000e10
 800ad58:	20000038 	.word	0x20000038
 800ad5c:	20001304 	.word	0x20001304
 800ad60:	200012f0 	.word	0x200012f0
 800ad64:	200012e8 	.word	0x200012e8

0800ad68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad6c:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <vTaskSuspendAll+0x18>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3301      	adds	r3, #1
 800ad72:	4a03      	ldr	r2, [pc, #12]	; (800ad80 <vTaskSuspendAll+0x18>)
 800ad74:	6013      	str	r3, [r2, #0]
}
 800ad76:	bf00      	nop
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bc80      	pop	{r7}
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	2000130c 	.word	0x2000130c

0800ad84 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <prvGetExpectedIdleTime+0x58>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ad96:	2301      	movs	r3, #1
 800ad98:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ad9a:	4b11      	ldr	r3, [pc, #68]	; (800ade0 <prvGetExpectedIdleTime+0x5c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	607b      	str	r3, [r7, #4]
 800ada8:	e012      	b.n	800add0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800adaa:	4b0e      	ldr	r3, [pc, #56]	; (800ade4 <prvGetExpectedIdleTime+0x60>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d902      	bls.n	800adb8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	607b      	str	r3, [r7, #4]
 800adb6:	e00b      	b.n	800add0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	e005      	b.n	800add0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800adc4:	4b08      	ldr	r3, [pc, #32]	; (800ade8 <prvGetExpectedIdleTime+0x64>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4b08      	ldr	r3, [pc, #32]	; (800adec <prvGetExpectedIdleTime+0x68>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800add0:	687b      	ldr	r3, [r7, #4]
	}
 800add2:	4618      	mov	r0, r3
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	bc80      	pop	{r7}
 800adda:	4770      	bx	lr
 800addc:	200012ec 	.word	0x200012ec
 800ade0:	20000e10 	.word	0x20000e10
 800ade4:	20000e14 	.word	0x20000e14
 800ade8:	20001304 	.word	0x20001304
 800adec:	200012e8 	.word	0x200012e8

0800adf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adfe:	4b42      	ldr	r3, [pc, #264]	; (800af08 <xTaskResumeAll+0x118>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <xTaskResumeAll+0x2c>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	603b      	str	r3, [r7, #0]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae1c:	f001 fabe 	bl	800c39c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae20:	4b39      	ldr	r3, [pc, #228]	; (800af08 <xTaskResumeAll+0x118>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	4a38      	ldr	r2, [pc, #224]	; (800af08 <xTaskResumeAll+0x118>)
 800ae28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae2a:	4b37      	ldr	r3, [pc, #220]	; (800af08 <xTaskResumeAll+0x118>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d162      	bne.n	800aef8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae32:	4b36      	ldr	r3, [pc, #216]	; (800af0c <xTaskResumeAll+0x11c>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d05e      	beq.n	800aef8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae3a:	e02f      	b.n	800ae9c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ae3c:	4b34      	ldr	r3, [pc, #208]	; (800af10 <xTaskResumeAll+0x120>)
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3318      	adds	r3, #24
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff f82b 	bl	8009ea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	3304      	adds	r3, #4
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff f826 	bl	8009ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5c:	4b2d      	ldr	r3, [pc, #180]	; (800af14 <xTaskResumeAll+0x124>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d903      	bls.n	800ae6c <xTaskResumeAll+0x7c>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	4a2a      	ldr	r2, [pc, #168]	; (800af14 <xTaskResumeAll+0x124>)
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4a27      	ldr	r2, [pc, #156]	; (800af18 <xTaskResumeAll+0x128>)
 800ae7a:	441a      	add	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f7fe ffb3 	bl	8009dee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8c:	4b23      	ldr	r3, [pc, #140]	; (800af1c <xTaskResumeAll+0x12c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d302      	bcc.n	800ae9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae96:	4b22      	ldr	r3, [pc, #136]	; (800af20 <xTaskResumeAll+0x130>)
 800ae98:	2201      	movs	r2, #1
 800ae9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae9c:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <xTaskResumeAll+0x120>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1cb      	bne.n	800ae3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aeaa:	f000 fbdf 	bl	800b66c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aeae:	4b1d      	ldr	r3, [pc, #116]	; (800af24 <xTaskResumeAll+0x134>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aeba:	f000 f86b 	bl	800af94 <xTaskIncrementTick>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aec4:	4b16      	ldr	r3, [pc, #88]	; (800af20 <xTaskResumeAll+0x130>)
 800aec6:	2201      	movs	r2, #1
 800aec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3b01      	subs	r3, #1
 800aece:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1f1      	bne.n	800aeba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800aed6:	4b13      	ldr	r3, [pc, #76]	; (800af24 <xTaskResumeAll+0x134>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aedc:	4b10      	ldr	r3, [pc, #64]	; (800af20 <xTaskResumeAll+0x130>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aee8:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <xTaskResumeAll+0x138>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aef8:	f001 fa80 	bl	800c3fc <vPortExitCritical>

	return xAlreadyYielded;
 800aefc:	68bb      	ldr	r3, [r7, #8]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	2000130c 	.word	0x2000130c
 800af0c:	200012e4 	.word	0x200012e4
 800af10:	200012a4 	.word	0x200012a4
 800af14:	200012ec 	.word	0x200012ec
 800af18:	20000e14 	.word	0x20000e14
 800af1c:	20000e10 	.word	0x20000e10
 800af20:	200012f8 	.word	0x200012f8
 800af24:	200012f4 	.word	0x200012f4
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af32:	4b04      	ldr	r3, [pc, #16]	; (800af44 <xTaskGetTickCount+0x18>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af38:	687b      	ldr	r3, [r7, #4]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr
 800af44:	200012e8 	.word	0x200012e8

0800af48 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <vTaskStepTick+0x44>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	441a      	add	r2, r3
 800af58:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <vTaskStepTick+0x48>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d90a      	bls.n	800af76 <vTaskStepTick+0x2e>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	60fb      	str	r3, [r7, #12]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800af76:	4b05      	ldr	r3, [pc, #20]	; (800af8c <vTaskStepTick+0x44>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	4a03      	ldr	r2, [pc, #12]	; (800af8c <vTaskStepTick+0x44>)
 800af80:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800af82:	bf00      	nop
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	200012e8 	.word	0x200012e8
 800af90:	20001304 	.word	0x20001304

0800af94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af9e:	4b51      	ldr	r3, [pc, #324]	; (800b0e4 <xTaskIncrementTick+0x150>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f040 808e 	bne.w	800b0c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afa8:	4b4f      	ldr	r3, [pc, #316]	; (800b0e8 <xTaskIncrementTick+0x154>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afb0:	4a4d      	ldr	r2, [pc, #308]	; (800b0e8 <xTaskIncrementTick+0x154>)
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d120      	bne.n	800affe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afbc:	4b4b      	ldr	r3, [pc, #300]	; (800b0ec <xTaskIncrementTick+0x158>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <xTaskIncrementTick+0x48>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	603b      	str	r3, [r7, #0]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <xTaskIncrementTick+0x46>
 800afdc:	4b43      	ldr	r3, [pc, #268]	; (800b0ec <xTaskIncrementTick+0x158>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	4b43      	ldr	r3, [pc, #268]	; (800b0f0 <xTaskIncrementTick+0x15c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a41      	ldr	r2, [pc, #260]	; (800b0ec <xTaskIncrementTick+0x158>)
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	4a41      	ldr	r2, [pc, #260]	; (800b0f0 <xTaskIncrementTick+0x15c>)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	4b40      	ldr	r3, [pc, #256]	; (800b0f4 <xTaskIncrementTick+0x160>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	4a3f      	ldr	r2, [pc, #252]	; (800b0f4 <xTaskIncrementTick+0x160>)
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	f000 fb37 	bl	800b66c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800affe:	4b3e      	ldr	r3, [pc, #248]	; (800b0f8 <xTaskIncrementTick+0x164>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	429a      	cmp	r2, r3
 800b006:	d34e      	bcc.n	800b0a6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b008:	4b38      	ldr	r3, [pc, #224]	; (800b0ec <xTaskIncrementTick+0x158>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <xTaskIncrementTick+0x82>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xTaskIncrementTick+0x84>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d004      	beq.n	800b026 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01c:	4b36      	ldr	r3, [pc, #216]	; (800b0f8 <xTaskIncrementTick+0x164>)
 800b01e:	f04f 32ff 	mov.w	r2, #4294967295
 800b022:	601a      	str	r2, [r3, #0]
					break;
 800b024:	e03f      	b.n	800b0a6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b026:	4b31      	ldr	r3, [pc, #196]	; (800b0ec <xTaskIncrementTick+0x158>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d203      	bcs.n	800b046 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b03e:	4a2e      	ldr	r2, [pc, #184]	; (800b0f8 <xTaskIncrementTick+0x164>)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6013      	str	r3, [r2, #0]
						break;
 800b044:	e02f      	b.n	800b0a6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	3304      	adds	r3, #4
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe ff2a 	bl	8009ea4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3318      	adds	r3, #24
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe ff21 	bl	8009ea4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b066:	4b25      	ldr	r3, [pc, #148]	; (800b0fc <xTaskIncrementTick+0x168>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d903      	bls.n	800b076 <xTaskIncrementTick+0xe2>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	4a22      	ldr	r2, [pc, #136]	; (800b0fc <xTaskIncrementTick+0x168>)
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <xTaskIncrementTick+0x16c>)
 800b084:	441a      	add	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4610      	mov	r0, r2
 800b08e:	f7fe feae 	bl	8009dee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b096:	4b1b      	ldr	r3, [pc, #108]	; (800b104 <xTaskIncrementTick+0x170>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d3b3      	bcc.n	800b008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0a4:	e7b0      	b.n	800b008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0a6:	4b17      	ldr	r3, [pc, #92]	; (800b104 <xTaskIncrementTick+0x170>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	4914      	ldr	r1, [pc, #80]	; (800b100 <xTaskIncrementTick+0x16c>)
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d907      	bls.n	800b0ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	e004      	b.n	800b0ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b0c4:	4b10      	ldr	r3, [pc, #64]	; (800b108 <xTaskIncrementTick+0x174>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	4a0f      	ldr	r2, [pc, #60]	; (800b108 <xTaskIncrementTick+0x174>)
 800b0cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b0ce:	4b0f      	ldr	r3, [pc, #60]	; (800b10c <xTaskIncrementTick+0x178>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b0da:	697b      	ldr	r3, [r7, #20]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	2000130c 	.word	0x2000130c
 800b0e8:	200012e8 	.word	0x200012e8
 800b0ec:	2000129c 	.word	0x2000129c
 800b0f0:	200012a0 	.word	0x200012a0
 800b0f4:	200012fc 	.word	0x200012fc
 800b0f8:	20001304 	.word	0x20001304
 800b0fc:	200012ec 	.word	0x200012ec
 800b100:	20000e14 	.word	0x20000e14
 800b104:	20000e10 	.word	0x20000e10
 800b108:	200012f4 	.word	0x200012f4
 800b10c:	200012f8 	.word	0x200012f8

0800b110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b116:	4b2a      	ldr	r3, [pc, #168]	; (800b1c0 <vTaskSwitchContext+0xb0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b11e:	4b29      	ldr	r3, [pc, #164]	; (800b1c4 <vTaskSwitchContext+0xb4>)
 800b120:	2201      	movs	r2, #1
 800b122:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b124:	e046      	b.n	800b1b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b126:	4b27      	ldr	r3, [pc, #156]	; (800b1c4 <vTaskSwitchContext+0xb4>)
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b12c:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <vTaskSwitchContext+0xb8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	60fb      	str	r3, [r7, #12]
 800b132:	e010      	b.n	800b156 <vTaskSwitchContext+0x46>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10a      	bne.n	800b150 <vTaskSwitchContext+0x40>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	607b      	str	r3, [r7, #4]
}
 800b14c:	bf00      	nop
 800b14e:	e7fe      	b.n	800b14e <vTaskSwitchContext+0x3e>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	3b01      	subs	r3, #1
 800b154:	60fb      	str	r3, [r7, #12]
 800b156:	491d      	ldr	r1, [pc, #116]	; (800b1cc <vTaskSwitchContext+0xbc>)
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0e4      	beq.n	800b134 <vTaskSwitchContext+0x24>
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4a15      	ldr	r2, [pc, #84]	; (800b1cc <vTaskSwitchContext+0xbc>)
 800b176:	4413      	add	r3, r2
 800b178:	60bb      	str	r3, [r7, #8]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	605a      	str	r2, [r3, #4]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	3308      	adds	r3, #8
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d104      	bne.n	800b19a <vTaskSwitchContext+0x8a>
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	605a      	str	r2, [r3, #4]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	4a0b      	ldr	r2, [pc, #44]	; (800b1d0 <vTaskSwitchContext+0xc0>)
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	4a08      	ldr	r2, [pc, #32]	; (800b1c8 <vTaskSwitchContext+0xb8>)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <vTaskSwitchContext+0xc0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	335c      	adds	r3, #92	; 0x5c
 800b1b0:	4a08      	ldr	r2, [pc, #32]	; (800b1d4 <vTaskSwitchContext+0xc4>)
 800b1b2:	6013      	str	r3, [r2, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bc80      	pop	{r7}
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	2000130c 	.word	0x2000130c
 800b1c4:	200012f8 	.word	0x200012f8
 800b1c8:	200012ec 	.word	0x200012ec
 800b1cc:	20000e14 	.word	0x20000e14
 800b1d0:	20000e10 	.word	0x20000e10
 800b1d4:	20000038 	.word	0x20000038

0800b1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10a      	bne.n	800b1fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1fe:	4b07      	ldr	r3, [pc, #28]	; (800b21c <vTaskPlaceOnEventList+0x44>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3318      	adds	r3, #24
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fe fe14 	bl	8009e34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b20c:	2101      	movs	r1, #1
 800b20e:	6838      	ldr	r0, [r7, #0]
 800b210:	f000 fc6a 	bl	800bae8 <prvAddCurrentTaskToDelayedList>
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20000e10 	.word	0x20000e10

0800b220 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	617b      	str	r3, [r7, #20]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b248:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <vTaskPlaceOnEventListRestricted+0x54>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3318      	adds	r3, #24
 800b24e:	4619      	mov	r1, r3
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7fe fdcc 	bl	8009dee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b25c:	f04f 33ff 	mov.w	r3, #4294967295
 800b260:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	68b8      	ldr	r0, [r7, #8]
 800b266:	f000 fc3f 	bl	800bae8 <prvAddCurrentTaskToDelayedList>
	}
 800b26a:	bf00      	nop
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000e10 	.word	0x20000e10

0800b278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10a      	bne.n	800b2a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	60fb      	str	r3, [r7, #12]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	3318      	adds	r3, #24
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe fdfb 	bl	8009ea4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ae:	4b1f      	ldr	r3, [pc, #124]	; (800b32c <xTaskRemoveFromEventList+0xb4>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d11d      	bne.n	800b2f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe fdf2 	bl	8009ea4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <xTaskRemoveFromEventList+0xb8>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d903      	bls.n	800b2d4 <xTaskRemoveFromEventList+0x5c>
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4a17      	ldr	r2, [pc, #92]	; (800b330 <xTaskRemoveFromEventList+0xb8>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4a14      	ldr	r2, [pc, #80]	; (800b334 <xTaskRemoveFromEventList+0xbc>)
 800b2e2:	441a      	add	r2, r3
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f7fe fd7f 	bl	8009dee <vListInsertEnd>
 800b2f0:	e005      	b.n	800b2fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	3318      	adds	r3, #24
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	480f      	ldr	r0, [pc, #60]	; (800b338 <xTaskRemoveFromEventList+0xc0>)
 800b2fa:	f7fe fd78 	bl	8009dee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b302:	4b0e      	ldr	r3, [pc, #56]	; (800b33c <xTaskRemoveFromEventList+0xc4>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	429a      	cmp	r2, r3
 800b30a:	d905      	bls.n	800b318 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b30c:	2301      	movs	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <xTaskRemoveFromEventList+0xc8>)
 800b312:	2201      	movs	r2, #1
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	e001      	b.n	800b31c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 800b31c:	f000 f9a6 	bl	800b66c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 800b320:	697b      	ldr	r3, [r7, #20]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	2000130c 	.word	0x2000130c
 800b330:	200012ec 	.word	0x200012ec
 800b334:	20000e14 	.word	0x20000e14
 800b338:	200012a4 	.word	0x200012a4
 800b33c:	20000e10 	.word	0x20000e10
 800b340:	200012f8 	.word	0x200012f8

0800b344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <vTaskInternalSetTimeOutState+0x24>)
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <vTaskInternalSetTimeOutState+0x28>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	605a      	str	r2, [r3, #4]
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	bc80      	pop	{r7}
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	200012fc 	.word	0x200012fc
 800b36c:	200012e8 	.word	0x200012e8

0800b370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	613b      	str	r3, [r7, #16]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	60fb      	str	r3, [r7, #12]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3b2:	f000 fff3 	bl	800c39c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3b6:	4b1d      	ldr	r3, [pc, #116]	; (800b42c <xTaskCheckForTimeOut+0xbc>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d102      	bne.n	800b3d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	61fb      	str	r3, [r7, #28]
 800b3d4:	e023      	b.n	800b41e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4b15      	ldr	r3, [pc, #84]	; (800b430 <xTaskCheckForTimeOut+0xc0>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d007      	beq.n	800b3f2 <xTaskCheckForTimeOut+0x82>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	69ba      	ldr	r2, [r7, #24]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d302      	bcc.n	800b3f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	61fb      	str	r3, [r7, #28]
 800b3f0:	e015      	b.n	800b41e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d20b      	bcs.n	800b414 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	1ad2      	subs	r2, r2, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff ff9b 	bl	800b344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	61fb      	str	r3, [r7, #28]
 800b412:	e004      	b.n	800b41e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b41a:	2301      	movs	r3, #1
 800b41c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b41e:	f000 ffed 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800b422:	69fb      	ldr	r3, [r7, #28]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3720      	adds	r7, #32
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	200012e8 	.word	0x200012e8
 800b430:	200012fc 	.word	0x200012fc

0800b434 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b434:	b480      	push	{r7}
 800b436:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b438:	4b03      	ldr	r3, [pc, #12]	; (800b448 <vTaskMissedYield+0x14>)
 800b43a:	2201      	movs	r2, #1
 800b43c:	601a      	str	r2, [r3, #0]
}
 800b43e:	bf00      	nop
 800b440:	46bd      	mov	sp, r7
 800b442:	bc80      	pop	{r7}
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	200012f8 	.word	0x200012f8

0800b44c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b454:	f000 f8a8 	bl	800b5a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b458:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <prvIdleTask+0x70>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d907      	bls.n	800b470 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b460:	4b17      	ldr	r3, [pc, #92]	; (800b4c0 <prvIdleTask+0x74>)
 800b462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b470:	f7ff fc88 	bl	800ad84 <prvGetExpectedIdleTime>
 800b474:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d9eb      	bls.n	800b454 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b47c:	f7ff fc74 	bl	800ad68 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b480:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <prvIdleTask+0x78>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <prvIdleTask+0x7c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d20a      	bcs.n	800b4a2 <prvIdleTask+0x56>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	60bb      	str	r3, [r7, #8]
}
 800b49e:	bf00      	nop
 800b4a0:	e7fe      	b.n	800b4a0 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b4a2:	f7ff fc6f 	bl	800ad84 <prvGetExpectedIdleTime>
 800b4a6:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d902      	bls.n	800b4b4 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f001 f814 	bl	800c4dc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b4b4:	f7ff fc9c 	bl	800adf0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b4b8:	e7cc      	b.n	800b454 <prvIdleTask+0x8>
 800b4ba:	bf00      	nop
 800b4bc:	20000e14 	.word	0x20000e14
 800b4c0:	e000ed04 	.word	0xe000ed04
 800b4c4:	20001304 	.word	0x20001304
 800b4c8:	200012e8 	.word	0x200012e8

0800b4cc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b4da:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <eTaskConfirmSleepModeStatus+0x4c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	71fb      	strb	r3, [r7, #7]
 800b4e6:	e010      	b.n	800b50a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b4e8:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <eTaskConfirmSleepModeStatus+0x50>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	71fb      	strb	r3, [r7, #7]
 800b4f4:	e009      	b.n	800b50a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <eTaskConfirmSleepModeStatus+0x54>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <eTaskConfirmSleepModeStatus+0x58>)
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	1acb      	subs	r3, r1, r3
 800b502:	429a      	cmp	r2, r3
 800b504:	d101      	bne.n	800b50a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b506:	2302      	movs	r3, #2
 800b508:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b50a:	79fb      	ldrb	r3, [r7, #7]
	}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	200012a4 	.word	0x200012a4
 800b51c:	200012f8 	.word	0x200012f8
 800b520:	200012d0 	.word	0x200012d0
 800b524:	200012e4 	.word	0x200012e4

0800b528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b52e:	2300      	movs	r3, #0
 800b530:	607b      	str	r3, [r7, #4]
 800b532:	e00c      	b.n	800b54e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4a12      	ldr	r2, [pc, #72]	; (800b588 <prvInitialiseTaskLists+0x60>)
 800b540:	4413      	add	r3, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fc28 	bl	8009d98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3301      	adds	r3, #1
 800b54c:	607b      	str	r3, [r7, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b37      	cmp	r3, #55	; 0x37
 800b552:	d9ef      	bls.n	800b534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b554:	480d      	ldr	r0, [pc, #52]	; (800b58c <prvInitialiseTaskLists+0x64>)
 800b556:	f7fe fc1f 	bl	8009d98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b55a:	480d      	ldr	r0, [pc, #52]	; (800b590 <prvInitialiseTaskLists+0x68>)
 800b55c:	f7fe fc1c 	bl	8009d98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b560:	480c      	ldr	r0, [pc, #48]	; (800b594 <prvInitialiseTaskLists+0x6c>)
 800b562:	f7fe fc19 	bl	8009d98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b566:	480c      	ldr	r0, [pc, #48]	; (800b598 <prvInitialiseTaskLists+0x70>)
 800b568:	f7fe fc16 	bl	8009d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b56c:	480b      	ldr	r0, [pc, #44]	; (800b59c <prvInitialiseTaskLists+0x74>)
 800b56e:	f7fe fc13 	bl	8009d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b572:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <prvInitialiseTaskLists+0x78>)
 800b574:	4a05      	ldr	r2, [pc, #20]	; (800b58c <prvInitialiseTaskLists+0x64>)
 800b576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <prvInitialiseTaskLists+0x7c>)
 800b57a:	4a05      	ldr	r2, [pc, #20]	; (800b590 <prvInitialiseTaskLists+0x68>)
 800b57c:	601a      	str	r2, [r3, #0]
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20000e14 	.word	0x20000e14
 800b58c:	20001274 	.word	0x20001274
 800b590:	20001288 	.word	0x20001288
 800b594:	200012a4 	.word	0x200012a4
 800b598:	200012b8 	.word	0x200012b8
 800b59c:	200012d0 	.word	0x200012d0
 800b5a0:	2000129c 	.word	0x2000129c
 800b5a4:	200012a0 	.word	0x200012a0

0800b5a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ae:	e019      	b.n	800b5e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5b0:	f000 fef4 	bl	800c39c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b5b4:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <prvCheckTasksWaitingTermination+0x50>)
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe fc6f 	bl	8009ea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5c6:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <prvCheckTasksWaitingTermination+0x54>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	4a0b      	ldr	r2, [pc, #44]	; (800b5fc <prvCheckTasksWaitingTermination+0x54>)
 800b5ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5d0:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <prvCheckTasksWaitingTermination+0x58>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	4a0a      	ldr	r2, [pc, #40]	; (800b600 <prvCheckTasksWaitingTermination+0x58>)
 800b5d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5da:	f000 ff0f 	bl	800c3fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f810 	bl	800b604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5e4:	4b06      	ldr	r3, [pc, #24]	; (800b600 <prvCheckTasksWaitingTermination+0x58>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e1      	bne.n	800b5b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5ec:	bf00      	nop
 800b5ee:	bf00      	nop
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200012b8 	.word	0x200012b8
 800b5fc:	200012e4 	.word	0x200012e4
 800b600:	200012cc 	.word	0x200012cc

0800b604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	335c      	adds	r3, #92	; 0x5c
 800b610:	4618      	mov	r0, r3
 800b612:	f002 f8bd 	bl	800d790 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d108      	bne.n	800b632 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b624:	4618      	mov	r0, r3
 800b626:	f001 f963 	bl	800c8f0 <vPortFree>
				vPortFree( pxTCB );
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 f960 	bl	800c8f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b630:	e018      	b.n	800b664 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d103      	bne.n	800b644 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 f957 	bl	800c8f0 <vPortFree>
	}
 800b642:	e00f      	b.n	800b664 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d00a      	beq.n	800b664 <prvDeleteTCB+0x60>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60fb      	str	r3, [r7, #12]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <prvDeleteTCB+0x5e>
	}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b672:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <prvResetNextTaskUnblockTime+0x40>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <prvResetNextTaskUnblockTime+0x14>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <prvResetNextTaskUnblockTime+0x16>
 800b680:	2300      	movs	r3, #0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d004      	beq.n	800b690 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b686:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <prvResetNextTaskUnblockTime+0x44>)
 800b688:	f04f 32ff 	mov.w	r2, #4294967295
 800b68c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b68e:	e008      	b.n	800b6a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b690:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <prvResetNextTaskUnblockTime+0x40>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	4a04      	ldr	r2, [pc, #16]	; (800b6b0 <prvResetNextTaskUnblockTime+0x44>)
 800b6a0:	6013      	str	r3, [r2, #0]
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bc80      	pop	{r7}
 800b6aa:	4770      	bx	lr
 800b6ac:	2000129c 	.word	0x2000129c
 800b6b0:	20001304 	.word	0x20001304

0800b6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6ba:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <xTaskGetSchedulerState+0x34>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	607b      	str	r3, [r7, #4]
 800b6c6:	e008      	b.n	800b6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c8:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <xTaskGetSchedulerState+0x38>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	607b      	str	r3, [r7, #4]
 800b6d4:	e001      	b.n	800b6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6da:	687b      	ldr	r3, [r7, #4]
	}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	200012f0 	.word	0x200012f0
 800b6ec:	2000130c 	.word	0x2000130c

0800b6f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d056      	beq.n	800b7b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b706:	4b2e      	ldr	r3, [pc, #184]	; (800b7c0 <xTaskPriorityDisinherit+0xd0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d00a      	beq.n	800b726 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	60fb      	str	r3, [r7, #12]
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60bb      	str	r3, [r7, #8]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b748:	1e5a      	subs	r2, r3, #1
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b756:	429a      	cmp	r2, r3
 800b758:	d02c      	beq.n	800b7b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d128      	bne.n	800b7b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fb9c 	bl	8009ea4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <xTaskPriorityDisinherit+0xd4>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d903      	bls.n	800b794 <xTaskPriorityDisinherit+0xa4>
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	4a0c      	ldr	r2, [pc, #48]	; (800b7c4 <xTaskPriorityDisinherit+0xd4>)
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4a09      	ldr	r2, [pc, #36]	; (800b7c8 <xTaskPriorityDisinherit+0xd8>)
 800b7a2:	441a      	add	r2, r3
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f7fe fb1f 	bl	8009dee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7b4:	697b      	ldr	r3, [r7, #20]
	}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20000e10 	.word	0x20000e10
 800b7c4:	200012ec 	.word	0x200012ec
 800b7c8:	20000e14 	.word	0x20000e14

0800b7cc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b7d6:	f000 fde1 	bl	800c39c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b7da:	4b20      	ldr	r3, [pc, #128]	; (800b85c <ulTaskNotifyTake+0x90>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d113      	bne.n	800b80e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b7e6:	4b1d      	ldr	r3, [pc, #116]	; (800b85c <ulTaskNotifyTake+0x90>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

				if( xTicksToWait > ( TickType_t ) 0 )
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00b      	beq.n	800b80e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	6838      	ldr	r0, [r7, #0]
 800b7fa:	f000 f975 	bl	800bae8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b7fe:	4b18      	ldr	r3, [pc, #96]	; (800b860 <ulTaskNotifyTake+0x94>)
 800b800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b80e:	f000 fdf5 	bl	800c3fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800b812:	f000 fdc3 	bl	800c39c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b816:	4b11      	ldr	r3, [pc, #68]	; (800b85c <ulTaskNotifyTake+0x90>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b81e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00e      	beq.n	800b844 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b82c:	4b0b      	ldr	r3, [pc, #44]	; (800b85c <ulTaskNotifyTake+0x90>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2200      	movs	r2, #0
 800b832:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b836:	e005      	b.n	800b844 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b838:	4b08      	ldr	r3, [pc, #32]	; (800b85c <ulTaskNotifyTake+0x90>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	3a01      	subs	r2, #1
 800b840:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <ulTaskNotifyTake+0x90>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		}
		taskEXIT_CRITICAL();
 800b84e:	f000 fdd5 	bl	800c3fc <vPortExitCritical>

		return ulReturn;
 800b852:	68fb      	ldr	r3, [r7, #12]
	}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000e10 	.word	0x20000e10
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	4613      	mov	r3, r2
 800b872:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b874:	2301      	movs	r3, #1
 800b876:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <xTaskGenericNotify+0x30>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	61bb      	str	r3, [r7, #24]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b898:	f000 fd80 	bl	800c39c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800b8b2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

			switch( eAction )
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d82d      	bhi.n	800b91e <xTaskGenericNotify+0xba>
 800b8c2:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <xTaskGenericNotify+0x64>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b91f 	.word	0x0800b91f
 800b8cc:	0800b8dd 	.word	0x0800b8dd
 800b8d0:	0800b8ef 	.word	0x0800b8ef
 800b8d4:	0800b8ff 	.word	0x0800b8ff
 800b8d8:	0800b909 	.word	0x0800b909
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					break;
 800b8ec:	e017      	b.n	800b91e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					break;
 800b8fc:	e00f      	b.n	800b91e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					break;
 800b906:	e00a      	b.n	800b91e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b908:	7ffb      	ldrb	r3, [r7, #31]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d004      	beq.n	800b918 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b916:	e001      	b.n	800b91c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800b918:	2300      	movs	r3, #0
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b91c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b91e:	7ffb      	ldrb	r3, [r7, #31]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d13c      	bne.n	800b99e <xTaskGenericNotify+0x13a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	3304      	adds	r3, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fabb 	bl	8009ea4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b932:	4b1e      	ldr	r3, [pc, #120]	; (800b9ac <xTaskGenericNotify+0x148>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d903      	bls.n	800b942 <xTaskGenericNotify+0xde>
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93e:	4a1b      	ldr	r2, [pc, #108]	; (800b9ac <xTaskGenericNotify+0x148>)
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4a18      	ldr	r2, [pc, #96]	; (800b9b0 <xTaskGenericNotify+0x14c>)
 800b950:	441a      	add	r2, r3
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	3304      	adds	r3, #4
 800b956:	4619      	mov	r1, r3
 800b958:	4610      	mov	r0, r2
 800b95a:	f7fe fa48 	bl	8009dee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00a      	beq.n	800b97c <xTaskGenericNotify+0x118>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	617b      	str	r3, [r7, #20]
}
 800b978:	bf00      	nop
 800b97a:	e7fe      	b.n	800b97a <xTaskGenericNotify+0x116>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800b97c:	f7ff fe76 	bl	800b66c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b984:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <xTaskGenericNotify+0x150>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d907      	bls.n	800b99e <xTaskGenericNotify+0x13a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b98e:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <xTaskGenericNotify+0x154>)
 800b990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b99e:	f000 fd2d 	bl	800c3fc <vPortExitCritical>

		return xReturn;
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3728      	adds	r7, #40	; 0x28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	200012ec 	.word	0x200012ec
 800b9b0:	20000e14 	.word	0x20000e14
 800b9b4:	20000e10 	.word	0x20000e10
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08a      	sub	sp, #40	; 0x28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	61bb      	str	r3, [r7, #24]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9e2:	f000 fe83 	bl	800c6ec <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800b9ea:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	617a      	str	r2, [r7, #20]
 800ba00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ba02:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba04:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800ba0c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	2202      	movs	r2, #2
 800ba12:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ba24:	7ffb      	ldrb	r3, [r7, #31]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d147      	bne.n	800baba <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00a      	beq.n	800ba48 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	60fb      	str	r3, [r7, #12]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba48:	4b21      	ldr	r3, [pc, #132]	; (800bad0 <vTaskNotifyGiveFromISR+0x114>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d11d      	bne.n	800ba8c <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	3304      	adds	r3, #4
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe fa25 	bl	8009ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5e:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <vTaskNotifyGiveFromISR+0x118>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d903      	bls.n	800ba6e <vTaskNotifyGiveFromISR+0xb2>
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	4a1a      	ldr	r2, [pc, #104]	; (800bad4 <vTaskNotifyGiveFromISR+0x118>)
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4a17      	ldr	r2, [pc, #92]	; (800bad8 <vTaskNotifyGiveFromISR+0x11c>)
 800ba7c:	441a      	add	r2, r3
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	3304      	adds	r3, #4
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7fe f9b2 	bl	8009dee <vListInsertEnd>
 800ba8a:	e005      	b.n	800ba98 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	3318      	adds	r3, #24
 800ba90:	4619      	mov	r1, r3
 800ba92:	4812      	ldr	r0, [pc, #72]	; (800badc <vTaskNotifyGiveFromISR+0x120>)
 800ba94:	f7fe f9ab 	bl	8009dee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4b10      	ldr	r3, [pc, #64]	; (800bae0 <vTaskNotifyGiveFromISR+0x124>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d909      	bls.n	800baba <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d003      	beq.n	800bab4 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2201      	movs	r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	e002      	b.n	800baba <vTaskNotifyGiveFromISR+0xfe>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800bab4:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <vTaskNotifyGiveFromISR+0x128>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f383 8811 	msr	BASEPRI, r3
}
 800bac4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800bac6:	bf00      	nop
 800bac8:	3728      	adds	r7, #40	; 0x28
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	2000130c 	.word	0x2000130c
 800bad4:	200012ec 	.word	0x200012ec
 800bad8:	20000e14 	.word	0x20000e14
 800badc:	200012a4 	.word	0x200012a4
 800bae0:	20000e10 	.word	0x20000e10
 800bae4:	200012f8 	.word	0x200012f8

0800bae8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800baf2:	4b21      	ldr	r3, [pc, #132]	; (800bb78 <prvAddCurrentTaskToDelayedList+0x90>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baf8:	4b20      	ldr	r3, [pc, #128]	; (800bb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3304      	adds	r3, #4
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe f9d0 	bl	8009ea4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d10a      	bne.n	800bb22 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d007      	beq.n	800bb22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb12:	4b1a      	ldr	r3, [pc, #104]	; (800bb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4819      	ldr	r0, [pc, #100]	; (800bb80 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb1c:	f7fe f967 	bl	8009dee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb20:	e026      	b.n	800bb70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4413      	add	r3, r2
 800bb28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb2a:	4b14      	ldr	r3, [pc, #80]	; (800bb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d209      	bcs.n	800bb4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb3a:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fe f974 	bl	8009e34 <vListInsert>
}
 800bb4c:	e010      	b.n	800bb70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb4e:	4b0e      	ldr	r3, [pc, #56]	; (800bb88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3304      	adds	r3, #4
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	f7fe f96a 	bl	8009e34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d202      	bcs.n	800bb70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb6a:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6013      	str	r3, [r2, #0]
}
 800bb70:	bf00      	nop
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	200012e8 	.word	0x200012e8
 800bb7c:	20000e10 	.word	0x20000e10
 800bb80:	200012d0 	.word	0x200012d0
 800bb84:	200012a0 	.word	0x200012a0
 800bb88:	2000129c 	.word	0x2000129c
 800bb8c:	20001304 	.word	0x20001304

0800bb90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	; 0x28
 800bb94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb9a:	f000 facb 	bl	800c134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb9e:	4b1c      	ldr	r3, [pc, #112]	; (800bc10 <xTimerCreateTimerTask+0x80>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d021      	beq.n	800bbea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbae:	1d3a      	adds	r2, r7, #4
 800bbb0:	f107 0108 	add.w	r1, r7, #8
 800bbb4:	f107 030c 	add.w	r3, r7, #12
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe f8d3 	bl	8009d64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	9202      	str	r2, [sp, #8]
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	2302      	movs	r3, #2
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	2300      	movs	r3, #0
 800bbce:	460a      	mov	r2, r1
 800bbd0:	4910      	ldr	r1, [pc, #64]	; (800bc14 <xTimerCreateTimerTask+0x84>)
 800bbd2:	4811      	ldr	r0, [pc, #68]	; (800bc18 <xTimerCreateTimerTask+0x88>)
 800bbd4:	f7fe fe74 	bl	800a8c0 <xTaskCreateStatic>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4a10      	ldr	r2, [pc, #64]	; (800bc1c <xTimerCreateTimerTask+0x8c>)
 800bbdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbde:	4b0f      	ldr	r3, [pc, #60]	; (800bc1c <xTimerCreateTimerTask+0x8c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	613b      	str	r3, [r7, #16]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc06:	697b      	ldr	r3, [r7, #20]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20001340 	.word	0x20001340
 800bc14:	080114bc 	.word	0x080114bc
 800bc18:	0800bd3d 	.word	0x0800bd3d
 800bc1c:	20001344 	.word	0x20001344

0800bc20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08a      	sub	sp, #40	; 0x28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10a      	bne.n	800bc4e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	623b      	str	r3, [r7, #32]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc4e:	4b1a      	ldr	r3, [pc, #104]	; (800bcb8 <xTimerGenericCommand+0x98>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d02a      	beq.n	800bcac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b05      	cmp	r3, #5
 800bc66:	dc18      	bgt.n	800bc9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc68:	f7ff fd24 	bl	800b6b4 <xTaskGetSchedulerState>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d109      	bne.n	800bc86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc72:	4b11      	ldr	r3, [pc, #68]	; (800bcb8 <xTimerGenericCommand+0x98>)
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f107 0110 	add.w	r1, r7, #16
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc7e:	f7fe fa3d 	bl	800a0fc <xQueueGenericSend>
 800bc82:	6278      	str	r0, [r7, #36]	; 0x24
 800bc84:	e012      	b.n	800bcac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc86:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <xTimerGenericCommand+0x98>)
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	f107 0110 	add.w	r1, r7, #16
 800bc8e:	2300      	movs	r3, #0
 800bc90:	2200      	movs	r2, #0
 800bc92:	f7fe fa33 	bl	800a0fc <xQueueGenericSend>
 800bc96:	6278      	str	r0, [r7, #36]	; 0x24
 800bc98:	e008      	b.n	800bcac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <xTimerGenericCommand+0x98>)
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	f107 0110 	add.w	r1, r7, #16
 800bca2:	2300      	movs	r3, #0
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	f7fe fb27 	bl	800a2f8 <xQueueGenericSendFromISR>
 800bcaa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3728      	adds	r7, #40	; 0x28
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20001340 	.word	0x20001340

0800bcbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af02      	add	r7, sp, #8
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcc6:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <prvProcessExpiredTimer+0x7c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe f8e5 	bl	8009ea4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d122      	bne.n	800bd28 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	18d1      	adds	r1, r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	6978      	ldr	r0, [r7, #20]
 800bcf0:	f000 f8c8 	bl	800be84 <prvInsertTimerInActiveList>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d016      	beq.n	800bd28 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	2300      	movs	r3, #0
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	2100      	movs	r1, #0
 800bd04:	6978      	ldr	r0, [r7, #20]
 800bd06:	f7ff ff8b 	bl	800bc20 <xTimerGenericCommand>
 800bd0a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10a      	bne.n	800bd28 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	60fb      	str	r3, [r7, #12]
}
 800bd24:	bf00      	nop
 800bd26:	e7fe      	b.n	800bd26 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	6978      	ldr	r0, [r7, #20]
 800bd2e:	4798      	blx	r3
}
 800bd30:	bf00      	nop
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20001338 	.word	0x20001338

0800bd3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 f857 	bl	800bdfc <prvGetNextExpireTime>
 800bd4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	4619      	mov	r1, r3
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 f803 	bl	800bd60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd5a:	f000 f8d5 	bl	800bf08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd5e:	e7f1      	b.n	800bd44 <prvTimerTask+0x8>

0800bd60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd6a:	f7fe fffd 	bl	800ad68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd6e:	f107 0308 	add.w	r3, r7, #8
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 f866 	bl	800be44 <prvSampleTimeNow>
 800bd78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d130      	bne.n	800bde2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10a      	bne.n	800bd9c <prvProcessTimerOrBlockTask+0x3c>
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d806      	bhi.n	800bd9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd8e:	f7ff f82f 	bl	800adf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ff91 	bl	800bcbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd9a:	e024      	b.n	800bde6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d008      	beq.n	800bdb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <prvProcessTimerOrBlockTask+0x90>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bf0c      	ite	eq
 800bdac:	2301      	moveq	r3, #1
 800bdae:	2300      	movne	r3, #0
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <prvProcessTimerOrBlockTask+0x94>)
 800bdb6:	6818      	ldr	r0, [r3, #0]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	f7fe fd49 	bl	800a858 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdc6:	f7ff f813 	bl	800adf0 <xTaskResumeAll>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10a      	bne.n	800bde6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdd0:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <prvProcessTimerOrBlockTask+0x98>)
 800bdd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
}
 800bde0:	e001      	b.n	800bde6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bde2:	f7ff f805 	bl	800adf0 <xTaskResumeAll>
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	2000133c 	.word	0x2000133c
 800bdf4:	20001340 	.word	0x20001340
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be04:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <prvGetNextExpireTime+0x44>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bf0c      	ite	eq
 800be0e:	2301      	moveq	r3, #1
 800be10:	2300      	movne	r3, #0
 800be12:	b2db      	uxtb	r3, r3
 800be14:	461a      	mov	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d105      	bne.n	800be2e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be22:	4b07      	ldr	r3, [pc, #28]	; (800be40 <prvGetNextExpireTime+0x44>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	60fb      	str	r3, [r7, #12]
 800be2c:	e001      	b.n	800be32 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be32:	68fb      	ldr	r3, [r7, #12]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	20001338 	.word	0x20001338

0800be44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be4c:	f7ff f86e 	bl	800af2c <xTaskGetTickCount>
 800be50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be52:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <prvSampleTimeNow+0x3c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d205      	bcs.n	800be68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be5c:	f000 f908 	bl	800c070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	e002      	b.n	800be6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be6e:	4a04      	ldr	r2, [pc, #16]	; (800be80 <prvSampleTimeNow+0x3c>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20001348 	.word	0x20001348

0800be84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be92:	2300      	movs	r3, #0
 800be94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d812      	bhi.n	800bed0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d302      	bcc.n	800bebe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800beb8:	2301      	movs	r3, #1
 800beba:	617b      	str	r3, [r7, #20]
 800bebc:	e01b      	b.n	800bef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bebe:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <prvInsertTimerInActiveList+0x7c>)
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3304      	adds	r3, #4
 800bec6:	4619      	mov	r1, r3
 800bec8:	4610      	mov	r0, r2
 800beca:	f7fd ffb3 	bl	8009e34 <vListInsert>
 800bece:	e012      	b.n	800bef6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d206      	bcs.n	800bee6 <prvInsertTimerInActiveList+0x62>
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d302      	bcc.n	800bee6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bee0:	2301      	movs	r3, #1
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	e007      	b.n	800bef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bee6:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <prvInsertTimerInActiveList+0x80>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3304      	adds	r3, #4
 800beee:	4619      	mov	r1, r3
 800bef0:	4610      	mov	r0, r2
 800bef2:	f7fd ff9f 	bl	8009e34 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bef6:	697b      	ldr	r3, [r7, #20]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	2000133c 	.word	0x2000133c
 800bf04:	20001338 	.word	0x20001338

0800bf08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08e      	sub	sp, #56	; 0x38
 800bf0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf0e:	e09d      	b.n	800c04c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da18      	bge.n	800bf48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf16:	1d3b      	adds	r3, r7, #4
 800bf18:	3304      	adds	r3, #4
 800bf1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	61fb      	str	r3, [r7, #28]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3e:	6850      	ldr	r0, [r2, #4]
 800bf40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf42:	6892      	ldr	r2, [r2, #8]
 800bf44:	4611      	mov	r1, r2
 800bf46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	db7d      	blt.n	800c04a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d004      	beq.n	800bf64 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fd ffa0 	bl	8009ea4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf64:	463b      	mov	r3, r7
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff ff6c 	bl	800be44 <prvSampleTimeNow>
 800bf6c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b09      	cmp	r3, #9
 800bf72:	d86b      	bhi.n	800c04c <prvProcessReceivedCommands+0x144>
 800bf74:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <prvProcessReceivedCommands+0x74>)
 800bf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7a:	bf00      	nop
 800bf7c:	0800bfa5 	.word	0x0800bfa5
 800bf80:	0800bfa5 	.word	0x0800bfa5
 800bf84:	0800bfa5 	.word	0x0800bfa5
 800bf88:	0800c04d 	.word	0x0800c04d
 800bf8c:	0800c001 	.word	0x0800c001
 800bf90:	0800c039 	.word	0x0800c039
 800bf94:	0800bfa5 	.word	0x0800bfa5
 800bf98:	0800bfa5 	.word	0x0800bfa5
 800bf9c:	0800c04d 	.word	0x0800c04d
 800bfa0:	0800c001 	.word	0x0800c001
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	18d1      	adds	r1, r2, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfb2:	f7ff ff67 	bl	800be84 <prvInsertTimerInActiveList>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d047      	beq.n	800c04c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfc2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d13f      	bne.n	800c04c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	441a      	add	r2, r3
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfde:	f7ff fe1f 	bl	800bc20 <xTimerGenericCommand>
 800bfe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d130      	bne.n	800c04c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	61bb      	str	r3, [r7, #24]
}
 800bffc:	bf00      	nop
 800bffe:	e7fe      	b.n	800bffe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	617b      	str	r3, [r7, #20]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	18d1      	adds	r1, r2, r3
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c032:	f7ff ff27 	bl	800be84 <prvInsertTimerInActiveList>
					break;
 800c036:	e009      	b.n	800c04c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d104      	bne.n	800c04c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c044:	f000 fc54 	bl	800c8f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c048:	e000      	b.n	800c04c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c04a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c04c:	4b07      	ldr	r3, [pc, #28]	; (800c06c <prvProcessReceivedCommands+0x164>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	1d39      	adds	r1, r7, #4
 800c052:	2200      	movs	r2, #0
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe f9e7 	bl	800a428 <xQueueReceive>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f47f af57 	bne.w	800bf10 <prvProcessReceivedCommands+0x8>
	}
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	3730      	adds	r7, #48	; 0x30
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20001340 	.word	0x20001340

0800c070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c076:	e045      	b.n	800c104 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c078:	4b2c      	ldr	r3, [pc, #176]	; (800c12c <prvSwitchTimerLists+0xbc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c082:	4b2a      	ldr	r3, [pc, #168]	; (800c12c <prvSwitchTimerLists+0xbc>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3304      	adds	r3, #4
 800c090:	4618      	mov	r0, r3
 800c092:	f7fd ff07 	bl	8009ea4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d12e      	bne.n	800c104 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d90e      	bls.n	800c0d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0c4:	4b19      	ldr	r3, [pc, #100]	; (800c12c <prvSwitchTimerLists+0xbc>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	f7fd feb0 	bl	8009e34 <vListInsert>
 800c0d4:	e016      	b.n	800c104 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	2100      	movs	r1, #0
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f7ff fd9d 	bl	800bc20 <xTimerGenericCommand>
 800c0e6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	603b      	str	r3, [r7, #0]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c104:	4b09      	ldr	r3, [pc, #36]	; (800c12c <prvSwitchTimerLists+0xbc>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1b4      	bne.n	800c078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c10e:	4b07      	ldr	r3, [pc, #28]	; (800c12c <prvSwitchTimerLists+0xbc>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c114:	4b06      	ldr	r3, [pc, #24]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a04      	ldr	r2, [pc, #16]	; (800c12c <prvSwitchTimerLists+0xbc>)
 800c11a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c11c:	4a04      	ldr	r2, [pc, #16]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	6013      	str	r3, [r2, #0]
}
 800c122:	bf00      	nop
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20001338 	.word	0x20001338
 800c130:	2000133c 	.word	0x2000133c

0800c134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c13a:	f000 f92f 	bl	800c39c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c13e:	4b15      	ldr	r3, [pc, #84]	; (800c194 <prvCheckForValidListAndQueue+0x60>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d120      	bne.n	800c188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c146:	4814      	ldr	r0, [pc, #80]	; (800c198 <prvCheckForValidListAndQueue+0x64>)
 800c148:	f7fd fe26 	bl	8009d98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c14c:	4813      	ldr	r0, [pc, #76]	; (800c19c <prvCheckForValidListAndQueue+0x68>)
 800c14e:	f7fd fe23 	bl	8009d98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c152:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <prvCheckForValidListAndQueue+0x6c>)
 800c154:	4a10      	ldr	r2, [pc, #64]	; (800c198 <prvCheckForValidListAndQueue+0x64>)
 800c156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c158:	4b12      	ldr	r3, [pc, #72]	; (800c1a4 <prvCheckForValidListAndQueue+0x70>)
 800c15a:	4a10      	ldr	r2, [pc, #64]	; (800c19c <prvCheckForValidListAndQueue+0x68>)
 800c15c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c15e:	2300      	movs	r3, #0
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	4b11      	ldr	r3, [pc, #68]	; (800c1a8 <prvCheckForValidListAndQueue+0x74>)
 800c164:	4a11      	ldr	r2, [pc, #68]	; (800c1ac <prvCheckForValidListAndQueue+0x78>)
 800c166:	2110      	movs	r1, #16
 800c168:	200a      	movs	r0, #10
 800c16a:	f7fd ff2d 	bl	8009fc8 <xQueueGenericCreateStatic>
 800c16e:	4603      	mov	r3, r0
 800c170:	4a08      	ldr	r2, [pc, #32]	; (800c194 <prvCheckForValidListAndQueue+0x60>)
 800c172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c174:	4b07      	ldr	r3, [pc, #28]	; (800c194 <prvCheckForValidListAndQueue+0x60>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <prvCheckForValidListAndQueue+0x60>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	490b      	ldr	r1, [pc, #44]	; (800c1b0 <prvCheckForValidListAndQueue+0x7c>)
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fb40 	bl	800a808 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c188:	f000 f938 	bl	800c3fc <vPortExitCritical>
}
 800c18c:	bf00      	nop
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20001340 	.word	0x20001340
 800c198:	20001310 	.word	0x20001310
 800c19c:	20001324 	.word	0x20001324
 800c1a0:	20001338 	.word	0x20001338
 800c1a4:	2000133c 	.word	0x2000133c
 800c1a8:	200013ec 	.word	0x200013ec
 800c1ac:	2000134c 	.word	0x2000134c
 800c1b0:	080114c4 	.word	0x080114c4

0800c1b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	3b04      	subs	r3, #4
 800c1c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3b04      	subs	r3, #4
 800c1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	f023 0201 	bic.w	r2, r3, #1
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1e4:	4a08      	ldr	r2, [pc, #32]	; (800c208 <pxPortInitialiseStack+0x54>)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3b14      	subs	r3, #20
 800c1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3b20      	subs	r3, #32
 800c1fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	bc80      	pop	{r7}
 800c206:	4770      	bx	lr
 800c208:	0800c20d 	.word	0x0800c20d

0800c20c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c212:	2300      	movs	r3, #0
 800c214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <prvTaskExitError+0x54>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d00a      	beq.n	800c236 <prvTaskExitError+0x2a>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	60fb      	str	r3, [r7, #12]
}
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <prvTaskExitError+0x28>
	__asm volatile
 800c236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23a:	f383 8811 	msr	BASEPRI, r3
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	60bb      	str	r3, [r7, #8]
}
 800c248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c24a:	bf00      	nop
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d0fc      	beq.n	800c24c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	3714      	adds	r7, #20
 800c258:	46bd      	mov	sp, r7
 800c25a:	bc80      	pop	{r7}
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	20000034 	.word	0x20000034
	...

0800c270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <pxCurrentTCBConst2>)
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	6808      	ldr	r0, [r1, #0]
 800c276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c27a:	f380 8809 	msr	PSP, r0
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f04f 0000 	mov.w	r0, #0
 800c286:	f380 8811 	msr	BASEPRI, r0
 800c28a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c28e:	4770      	bx	lr

0800c290 <pxCurrentTCBConst2>:
 800c290:	20000e10 	.word	0x20000e10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop

0800c298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c298:	4806      	ldr	r0, [pc, #24]	; (800c2b4 <prvPortStartFirstTask+0x1c>)
 800c29a:	6800      	ldr	r0, [r0, #0]
 800c29c:	6800      	ldr	r0, [r0, #0]
 800c29e:	f380 8808 	msr	MSP, r0
 800c2a2:	b662      	cpsie	i
 800c2a4:	b661      	cpsie	f
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	df00      	svc	0
 800c2b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2b2:	bf00      	nop
 800c2b4:	e000ed08 	.word	0xe000ed08

0800c2b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2be:	4b32      	ldr	r3, [pc, #200]	; (800c388 <xPortStartScheduler+0xd0>)
 800c2c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	22ff      	movs	r2, #255	; 0xff
 800c2ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	4b2a      	ldr	r3, [pc, #168]	; (800c38c <xPortStartScheduler+0xd4>)
 800c2e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2e6:	4b2a      	ldr	r3, [pc, #168]	; (800c390 <xPortStartScheduler+0xd8>)
 800c2e8:	2207      	movs	r2, #7
 800c2ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ec:	e009      	b.n	800c302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c2ee:	4b28      	ldr	r3, [pc, #160]	; (800c390 <xPortStartScheduler+0xd8>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	4a26      	ldr	r2, [pc, #152]	; (800c390 <xPortStartScheduler+0xd8>)
 800c2f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2f8:	78fb      	ldrb	r3, [r7, #3]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	005b      	lsls	r3, r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c302:	78fb      	ldrb	r3, [r7, #3]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c30a:	2b80      	cmp	r3, #128	; 0x80
 800c30c:	d0ef      	beq.n	800c2ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c30e:	4b20      	ldr	r3, [pc, #128]	; (800c390 <xPortStartScheduler+0xd8>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f1c3 0307 	rsb	r3, r3, #7
 800c316:	2b04      	cmp	r3, #4
 800c318:	d00a      	beq.n	800c330 <xPortStartScheduler+0x78>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	60bb      	str	r3, [r7, #8]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c330:	4b17      	ldr	r3, [pc, #92]	; (800c390 <xPortStartScheduler+0xd8>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	021b      	lsls	r3, r3, #8
 800c336:	4a16      	ldr	r2, [pc, #88]	; (800c390 <xPortStartScheduler+0xd8>)
 800c338:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c33a:	4b15      	ldr	r3, [pc, #84]	; (800c390 <xPortStartScheduler+0xd8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c342:	4a13      	ldr	r2, [pc, #76]	; (800c390 <xPortStartScheduler+0xd8>)
 800c344:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c34e:	4b11      	ldr	r3, [pc, #68]	; (800c394 <xPortStartScheduler+0xdc>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a10      	ldr	r2, [pc, #64]	; (800c394 <xPortStartScheduler+0xdc>)
 800c354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c35a:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <xPortStartScheduler+0xdc>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a0d      	ldr	r2, [pc, #52]	; (800c394 <xPortStartScheduler+0xdc>)
 800c360:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c364:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c366:	f000 f985 	bl	800c674 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <xPortStartScheduler+0xe0>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c370:	f7ff ff92 	bl	800c298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c374:	f7fe fecc 	bl	800b110 <vTaskSwitchContext>
	prvTaskExitError();
 800c378:	f7ff ff48 	bl	800c20c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	e000e400 	.word	0xe000e400
 800c38c:	20001448 	.word	0x20001448
 800c390:	2000144c 	.word	0x2000144c
 800c394:	e000ed20 	.word	0xe000ed20
 800c398:	20000034 	.word	0x20000034

0800c39c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	607b      	str	r3, [r7, #4]
}
 800c3b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3b6:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <vPortEnterCritical+0x58>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	4a0d      	ldr	r2, [pc, #52]	; (800c3f4 <vPortEnterCritical+0x58>)
 800c3be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3c0:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <vPortEnterCritical+0x58>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d10f      	bne.n	800c3e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3c8:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <vPortEnterCritical+0x5c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	603b      	str	r3, [r7, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <vPortEnterCritical+0x4a>
	}
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bc80      	pop	{r7}
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20000034 	.word	0x20000034
 800c3f8:	e000ed04 	.word	0xe000ed04

0800c3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c402:	4b11      	ldr	r3, [pc, #68]	; (800c448 <vPortExitCritical+0x4c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10a      	bne.n	800c420 <vPortExitCritical+0x24>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	607b      	str	r3, [r7, #4]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c420:	4b09      	ldr	r3, [pc, #36]	; (800c448 <vPortExitCritical+0x4c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3b01      	subs	r3, #1
 800c426:	4a08      	ldr	r2, [pc, #32]	; (800c448 <vPortExitCritical+0x4c>)
 800c428:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c42a:	4b07      	ldr	r3, [pc, #28]	; (800c448 <vPortExitCritical+0x4c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d105      	bne.n	800c43e <vPortExitCritical+0x42>
 800c432:	2300      	movs	r3, #0
 800c434:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	f383 8811 	msr	BASEPRI, r3
}
 800c43c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c43e:	bf00      	nop
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	bc80      	pop	{r7}
 800c446:	4770      	bx	lr
 800c448:	20000034 	.word	0x20000034
 800c44c:	00000000 	.word	0x00000000

0800c450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c450:	f3ef 8009 	mrs	r0, PSP
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <pxCurrentTCBConst>)
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c460:	6010      	str	r0, [r2, #0]
 800c462:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c466:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c46a:	f380 8811 	msr	BASEPRI, r0
 800c46e:	f7fe fe4f 	bl	800b110 <vTaskSwitchContext>
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c47e:	6819      	ldr	r1, [r3, #0]
 800c480:	6808      	ldr	r0, [r1, #0]
 800c482:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c486:	f380 8809 	msr	PSP, r0
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	4770      	bx	lr

0800c490 <pxCurrentTCBConst>:
 800c490:	20000e10 	.word	0x20000e10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop

0800c498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	607b      	str	r3, [r7, #4]
}
 800c4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4b2:	f7fe fd6f 	bl	800af94 <xTaskIncrementTick>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4bc:	4b06      	ldr	r3, [pc, #24]	; (800c4d8 <SysTick_Handler+0x40>)
 800c4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f383 8811 	msr	BASEPRI, r3
}
 800c4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	4b5d      	ldr	r3, [pc, #372]	; (800c65c <vPortSuppressTicksAndSleep+0x180>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d902      	bls.n	800c4f4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c4ee:	4b5b      	ldr	r3, [pc, #364]	; (800c65c <vPortSuppressTicksAndSleep+0x180>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c4f4:	4b5a      	ldr	r3, [pc, #360]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a59      	ldr	r2, [pc, #356]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c4fa:	f023 0301 	bic.w	r3, r3, #1
 800c4fe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c500:	4b58      	ldr	r3, [pc, #352]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3b01      	subs	r3, #1
 800c508:	4957      	ldr	r1, [pc, #348]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c50a:	6809      	ldr	r1, [r1, #0]
 800c50c:	fb01 f303 	mul.w	r3, r1, r3
 800c510:	4413      	add	r3, r2
 800c512:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c514:	4b55      	ldr	r3, [pc, #340]	; (800c66c <vPortSuppressTicksAndSleep+0x190>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69fa      	ldr	r2, [r7, #28]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d904      	bls.n	800c528 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c51e:	4b53      	ldr	r3, [pc, #332]	; (800c66c <vPortSuppressTicksAndSleep+0x190>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69fa      	ldr	r2, [r7, #28]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c528:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c52a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c52e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c532:	f7fe ffcb 	bl	800b4cc <eTaskConfirmSleepModeStatus>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d110      	bne.n	800c55e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c53c:	4b49      	ldr	r3, [pc, #292]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c53e:	4a4c      	ldr	r2, [pc, #304]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c544:	4b46      	ldr	r3, [pc, #280]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a45      	ldr	r2, [pc, #276]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c54a:	f043 0301 	orr.w	r3, r3, #1
 800c54e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c550:	4b45      	ldr	r3, [pc, #276]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a46      	ldr	r2, [pc, #280]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c556:	3b01      	subs	r3, #1
 800c558:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c55a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c55c:	e07a      	b.n	800c654 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c55e:	4a44      	ldr	r2, [pc, #272]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c564:	4b3f      	ldr	r3, [pc, #252]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c566:	2200      	movs	r2, #0
 800c568:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c56a:	4b3d      	ldr	r3, [pc, #244]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a3c      	ldr	r2, [pc, #240]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c570:	f043 0301 	orr.w	r3, r3, #1
 800c574:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	4618      	mov	r0, r3
 800c580:	f7f4 feb6 	bl	80012f0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d004      	beq.n	800c594 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c58a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c58e:	bf30      	wfi
				__asm volatile( "isb" );
 800c590:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800c594:	1d3b      	adds	r3, r7, #4
 800c596:	4618      	mov	r0, r3
 800c598:	f7f4 feb4 	bl	8001304 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c59c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c59e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c5a2:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c5a6:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c5a8:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c5ac:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c5b0:	4b2b      	ldr	r3, [pc, #172]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c5b2:	2206      	movs	r2, #6
 800c5b4:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c5b6:	4b2a      	ldr	r3, [pc, #168]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d01d      	beq.n	800c5fe <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c5c2:	4b29      	ldr	r3, [pc, #164]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c5c8:	6819      	ldr	r1, [r3, #0]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	1acb      	subs	r3, r1, r3
 800c5ce:	4413      	add	r3, r2
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800c5d4:	4b25      	ldr	r3, [pc, #148]	; (800c66c <vPortSuppressTicksAndSleep+0x190>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d304      	bcc.n	800c5e8 <vPortSuppressTicksAndSleep+0x10c>
 800c5de:	4b22      	ldr	r3, [pc, #136]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d903      	bls.n	800c5f0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800c5e8:	4b1f      	ldr	r3, [pc, #124]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800c5f0:	4a1f      	ldr	r2, [pc, #124]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	e018      	b.n	800c630 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a19      	ldr	r2, [pc, #100]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c602:	6812      	ldr	r2, [r2, #0]
 800c604:	fb03 f202 	mul.w	r2, r3, r2
 800c608:	4b16      	ldr	r3, [pc, #88]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800c610:	4b15      	ldr	r3, [pc, #84]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	fbb2 f3f3 	udiv	r3, r2, r3
 800c61a:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	3301      	adds	r3, #1
 800c620:	4a11      	ldr	r2, [pc, #68]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c622:	6812      	ldr	r2, [r2, #0]
 800c624:	fb03 f202 	mul.w	r2, r3, r2
 800c628:	4911      	ldr	r1, [pc, #68]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c630:	4b0c      	ldr	r3, [pc, #48]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c636:	4b0a      	ldr	r3, [pc, #40]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a09      	ldr	r2, [pc, #36]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c63c:	f043 0301 	orr.w	r3, r3, #1
 800c640:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800c642:	69b8      	ldr	r0, [r7, #24]
 800c644:	f7fe fc80 	bl	800af48 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c648:	4b07      	ldr	r3, [pc, #28]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a08      	ldr	r2, [pc, #32]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c64e:	3b01      	subs	r3, #1
 800c650:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800c652:	b662      	cpsie	i
	}
 800c654:	bf00      	nop
 800c656:	3720      	adds	r7, #32
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20001440 	.word	0x20001440
 800c660:	e000e010 	.word	0xe000e010
 800c664:	e000e018 	.word	0xe000e018
 800c668:	2000143c 	.word	0x2000143c
 800c66c:	20001444 	.word	0x20001444
 800c670:	e000e014 	.word	0xe000e014

0800c674 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800c678:	4b14      	ldr	r3, [pc, #80]	; (800c6cc <vPortSetupTimerInterrupt+0x58>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a14      	ldr	r2, [pc, #80]	; (800c6d0 <vPortSetupTimerInterrupt+0x5c>)
 800c67e:	fba2 2303 	umull	r2, r3, r2, r3
 800c682:	099b      	lsrs	r3, r3, #6
 800c684:	4a13      	ldr	r2, [pc, #76]	; (800c6d4 <vPortSetupTimerInterrupt+0x60>)
 800c686:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800c688:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <vPortSetupTimerInterrupt+0x60>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c690:	fbb2 f3f3 	udiv	r3, r2, r3
 800c694:	4a10      	ldr	r2, [pc, #64]	; (800c6d8 <vPortSetupTimerInterrupt+0x64>)
 800c696:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800c698:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <vPortSetupTimerInterrupt+0x68>)
 800c69a:	222d      	movs	r2, #45	; 0x2d
 800c69c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <vPortSetupTimerInterrupt+0x6c>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6a4:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <vPortSetupTimerInterrupt+0x70>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6aa:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <vPortSetupTimerInterrupt+0x58>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a08      	ldr	r2, [pc, #32]	; (800c6d0 <vPortSetupTimerInterrupt+0x5c>)
 800c6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b4:	099b      	lsrs	r3, r3, #6
 800c6b6:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <vPortSetupTimerInterrupt+0x74>)
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6bc:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <vPortSetupTimerInterrupt+0x6c>)
 800c6be:	2207      	movs	r2, #7
 800c6c0:	601a      	str	r2, [r3, #0]
}
 800c6c2:	bf00      	nop
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	20000028 	.word	0x20000028
 800c6d0:	10624dd3 	.word	0x10624dd3
 800c6d4:	2000143c 	.word	0x2000143c
 800c6d8:	20001440 	.word	0x20001440
 800c6dc:	20001444 	.word	0x20001444
 800c6e0:	e000e010 	.word	0xe000e010
 800c6e4:	e000e018 	.word	0xe000e018
 800c6e8:	e000e014 	.word	0xe000e014

0800c6ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6f2:	f3ef 8305 	mrs	r3, IPSR
 800c6f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b0f      	cmp	r3, #15
 800c6fc:	d914      	bls.n	800c728 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6fe:	4a16      	ldr	r2, [pc, #88]	; (800c758 <vPortValidateInterruptPriority+0x6c>)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c708:	4b14      	ldr	r3, [pc, #80]	; (800c75c <vPortValidateInterruptPriority+0x70>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	7afa      	ldrb	r2, [r7, #11]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d20a      	bcs.n	800c728 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	607b      	str	r3, [r7, #4]
}
 800c724:	bf00      	nop
 800c726:	e7fe      	b.n	800c726 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c728:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <vPortValidateInterruptPriority+0x74>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c730:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <vPortValidateInterruptPriority+0x78>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	429a      	cmp	r2, r3
 800c736:	d90a      	bls.n	800c74e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	603b      	str	r3, [r7, #0]
}
 800c74a:	bf00      	nop
 800c74c:	e7fe      	b.n	800c74c <vPortValidateInterruptPriority+0x60>
	}
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	bc80      	pop	{r7}
 800c756:	4770      	bx	lr
 800c758:	e000e3f0 	.word	0xe000e3f0
 800c75c:	20001448 	.word	0x20001448
 800c760:	e000ed0c 	.word	0xe000ed0c
 800c764:	2000144c 	.word	0x2000144c

0800c768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08a      	sub	sp, #40	; 0x28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c770:	2300      	movs	r3, #0
 800c772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c774:	f7fe faf8 	bl	800ad68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c778:	4b58      	ldr	r3, [pc, #352]	; (800c8dc <pvPortMalloc+0x174>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c780:	f000 f910 	bl	800c9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c784:	4b56      	ldr	r3, [pc, #344]	; (800c8e0 <pvPortMalloc+0x178>)
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4013      	ands	r3, r2
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f040 808e 	bne.w	800c8ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01d      	beq.n	800c7d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c798:	2208      	movs	r2, #8
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4413      	add	r3, r2
 800c79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f003 0307 	and.w	r3, r3, #7
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d014      	beq.n	800c7d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f023 0307 	bic.w	r3, r3, #7
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	617b      	str	r3, [r7, #20]
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d069      	beq.n	800c8ae <pvPortMalloc+0x146>
 800c7da:	4b42      	ldr	r3, [pc, #264]	; (800c8e4 <pvPortMalloc+0x17c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d864      	bhi.n	800c8ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7e4:	4b40      	ldr	r3, [pc, #256]	; (800c8e8 <pvPortMalloc+0x180>)
 800c7e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7e8:	4b3f      	ldr	r3, [pc, #252]	; (800c8e8 <pvPortMalloc+0x180>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7ee:	e004      	b.n	800c7fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	429a      	cmp	r2, r3
 800c802:	d903      	bls.n	800c80c <pvPortMalloc+0xa4>
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1f1      	bne.n	800c7f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c80c:	4b33      	ldr	r3, [pc, #204]	; (800c8dc <pvPortMalloc+0x174>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c812:	429a      	cmp	r2, r3
 800c814:	d04b      	beq.n	800c8ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2208      	movs	r2, #8
 800c81c:	4413      	add	r3, r2
 800c81e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	2308      	movs	r3, #8
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	429a      	cmp	r2, r3
 800c836:	d91f      	bls.n	800c878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4413      	add	r3, r2
 800c83e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	f003 0307 	and.w	r3, r3, #7
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00a      	beq.n	800c860 <pvPortMalloc+0xf8>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	613b      	str	r3, [r7, #16]
}
 800c85c:	bf00      	nop
 800c85e:	e7fe      	b.n	800c85e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	1ad2      	subs	r2, r2, r3
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c872:	69b8      	ldr	r0, [r7, #24]
 800c874:	f000 f8f8 	bl	800ca68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c878:	4b1a      	ldr	r3, [pc, #104]	; (800c8e4 <pvPortMalloc+0x17c>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <pvPortMalloc+0x17c>)
 800c884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c886:	4b17      	ldr	r3, [pc, #92]	; (800c8e4 <pvPortMalloc+0x17c>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	4b18      	ldr	r3, [pc, #96]	; (800c8ec <pvPortMalloc+0x184>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d203      	bcs.n	800c89a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c892:	4b14      	ldr	r3, [pc, #80]	; (800c8e4 <pvPortMalloc+0x17c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a15      	ldr	r2, [pc, #84]	; (800c8ec <pvPortMalloc+0x184>)
 800c898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <pvPortMalloc+0x178>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8ae:	f7fe fa9f 	bl	800adf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	f003 0307 	and.w	r3, r3, #7
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00a      	beq.n	800c8d2 <pvPortMalloc+0x16a>
	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	60fb      	str	r3, [r7, #12]
}
 800c8ce:	bf00      	nop
 800c8d0:	e7fe      	b.n	800c8d0 <pvPortMalloc+0x168>
	return pvReturn;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3728      	adds	r7, #40	; 0x28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20007920 	.word	0x20007920
 800c8e0:	2000792c 	.word	0x2000792c
 800c8e4:	20007924 	.word	0x20007924
 800c8e8:	20007918 	.word	0x20007918
 800c8ec:	20007928 	.word	0x20007928

0800c8f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d048      	beq.n	800c994 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c902:	2308      	movs	r3, #8
 800c904:	425b      	negs	r3, r3
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	4413      	add	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	4b21      	ldr	r3, [pc, #132]	; (800c99c <vPortFree+0xac>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4013      	ands	r3, r2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10a      	bne.n	800c934 <vPortFree+0x44>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	60fb      	str	r3, [r7, #12]
}
 800c930:	bf00      	nop
 800c932:	e7fe      	b.n	800c932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00a      	beq.n	800c952 <vPortFree+0x62>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	60bb      	str	r3, [r7, #8]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	685a      	ldr	r2, [r3, #4]
 800c956:	4b11      	ldr	r3, [pc, #68]	; (800c99c <vPortFree+0xac>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4013      	ands	r3, r2
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d019      	beq.n	800c994 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d115      	bne.n	800c994 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	4b0b      	ldr	r3, [pc, #44]	; (800c99c <vPortFree+0xac>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	43db      	mvns	r3, r3
 800c972:	401a      	ands	r2, r3
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c978:	f7fe f9f6 	bl	800ad68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <vPortFree+0xb0>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4413      	add	r3, r2
 800c986:	4a06      	ldr	r2, [pc, #24]	; (800c9a0 <vPortFree+0xb0>)
 800c988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c98a:	6938      	ldr	r0, [r7, #16]
 800c98c:	f000 f86c 	bl	800ca68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c990:	f7fe fa2e 	bl	800adf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c994:	bf00      	nop
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	2000792c 	.word	0x2000792c
 800c9a0:	20007924 	.word	0x20007924

0800c9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9aa:	f246 43c8 	movw	r3, #25800	; 0x64c8
 800c9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9b0:	4b27      	ldr	r3, [pc, #156]	; (800ca50 <prvHeapInit+0xac>)
 800c9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f003 0307 	and.w	r3, r3, #7
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00c      	beq.n	800c9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3307      	adds	r3, #7
 800c9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f023 0307 	bic.w	r3, r3, #7
 800c9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ca50 <prvHeapInit+0xac>)
 800c9d4:	4413      	add	r3, r2
 800c9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ca54 <prvHeapInit+0xb0>)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ca54 <prvHeapInit+0xb0>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9f0:	2208      	movs	r2, #8
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	1a9b      	subs	r3, r3, r2
 800c9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f023 0307 	bic.w	r3, r3, #7
 800c9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4a15      	ldr	r2, [pc, #84]	; (800ca58 <prvHeapInit+0xb4>)
 800ca04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca06:	4b14      	ldr	r3, [pc, #80]	; (800ca58 <prvHeapInit+0xb4>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca0e:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <prvHeapInit+0xb4>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	1ad2      	subs	r2, r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca24:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <prvHeapInit+0xb4>)
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	4a0a      	ldr	r2, [pc, #40]	; (800ca5c <prvHeapInit+0xb8>)
 800ca32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4a09      	ldr	r2, [pc, #36]	; (800ca60 <prvHeapInit+0xbc>)
 800ca3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca3c:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <prvHeapInit+0xc0>)
 800ca3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca42:	601a      	str	r2, [r3, #0]
}
 800ca44:	bf00      	nop
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bc80      	pop	{r7}
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	20001450 	.word	0x20001450
 800ca54:	20007918 	.word	0x20007918
 800ca58:	20007920 	.word	0x20007920
 800ca5c:	20007928 	.word	0x20007928
 800ca60:	20007924 	.word	0x20007924
 800ca64:	2000792c 	.word	0x2000792c

0800ca68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca70:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <prvInsertBlockIntoFreeList+0xa8>)
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	e002      	b.n	800ca7c <prvInsertBlockIntoFreeList+0x14>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	60fb      	str	r3, [r7, #12]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d8f7      	bhi.n	800ca76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	4413      	add	r3, r2
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d108      	bne.n	800caaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	441a      	add	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	441a      	add	r2, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d118      	bne.n	800caf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	4b14      	ldr	r3, [pc, #80]	; (800cb14 <prvInsertBlockIntoFreeList+0xac>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d00d      	beq.n	800cae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	441a      	add	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	e008      	b.n	800caf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cae6:	4b0b      	ldr	r3, [pc, #44]	; (800cb14 <prvInsertBlockIntoFreeList+0xac>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	e003      	b.n	800caf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d002      	beq.n	800cb06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb06:	bf00      	nop
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bc80      	pop	{r7}
 800cb0e:	4770      	bx	lr
 800cb10:	20007918 	.word	0x20007918
 800cb14:	20007920 	.word	0x20007920

0800cb18 <__errno>:
 800cb18:	4b01      	ldr	r3, [pc, #4]	; (800cb20 <__errno+0x8>)
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	20000038 	.word	0x20000038

0800cb24 <std>:
 800cb24:	2300      	movs	r3, #0
 800cb26:	b510      	push	{r4, lr}
 800cb28:	4604      	mov	r4, r0
 800cb2a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb32:	6083      	str	r3, [r0, #8]
 800cb34:	8181      	strh	r1, [r0, #12]
 800cb36:	6643      	str	r3, [r0, #100]	; 0x64
 800cb38:	81c2      	strh	r2, [r0, #14]
 800cb3a:	6183      	str	r3, [r0, #24]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	2208      	movs	r2, #8
 800cb40:	305c      	adds	r0, #92	; 0x5c
 800cb42:	f000 f91a 	bl	800cd7a <memset>
 800cb46:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <std+0x38>)
 800cb48:	6224      	str	r4, [r4, #32]
 800cb4a:	6263      	str	r3, [r4, #36]	; 0x24
 800cb4c:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <std+0x3c>)
 800cb4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb50:	4b04      	ldr	r3, [pc, #16]	; (800cb64 <std+0x40>)
 800cb52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb54:	4b04      	ldr	r3, [pc, #16]	; (800cb68 <std+0x44>)
 800cb56:	6323      	str	r3, [r4, #48]	; 0x30
 800cb58:	bd10      	pop	{r4, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0800d8a9 	.word	0x0800d8a9
 800cb60:	0800d8cb 	.word	0x0800d8cb
 800cb64:	0800d903 	.word	0x0800d903
 800cb68:	0800d927 	.word	0x0800d927

0800cb6c <_cleanup_r>:
 800cb6c:	4901      	ldr	r1, [pc, #4]	; (800cb74 <_cleanup_r+0x8>)
 800cb6e:	f000 b8af 	b.w	800ccd0 <_fwalk_reent>
 800cb72:	bf00      	nop
 800cb74:	0800e771 	.word	0x0800e771

0800cb78 <__sfmoreglue>:
 800cb78:	2268      	movs	r2, #104	; 0x68
 800cb7a:	b570      	push	{r4, r5, r6, lr}
 800cb7c:	1e4d      	subs	r5, r1, #1
 800cb7e:	4355      	muls	r5, r2
 800cb80:	460e      	mov	r6, r1
 800cb82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb86:	f000 f921 	bl	800cdcc <_malloc_r>
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	b140      	cbz	r0, 800cba0 <__sfmoreglue+0x28>
 800cb8e:	2100      	movs	r1, #0
 800cb90:	e9c0 1600 	strd	r1, r6, [r0]
 800cb94:	300c      	adds	r0, #12
 800cb96:	60a0      	str	r0, [r4, #8]
 800cb98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb9c:	f000 f8ed 	bl	800cd7a <memset>
 800cba0:	4620      	mov	r0, r4
 800cba2:	bd70      	pop	{r4, r5, r6, pc}

0800cba4 <__sfp_lock_acquire>:
 800cba4:	4801      	ldr	r0, [pc, #4]	; (800cbac <__sfp_lock_acquire+0x8>)
 800cba6:	f000 b8d8 	b.w	800cd5a <__retarget_lock_acquire_recursive>
 800cbaa:	bf00      	nop
 800cbac:	20007931 	.word	0x20007931

0800cbb0 <__sfp_lock_release>:
 800cbb0:	4801      	ldr	r0, [pc, #4]	; (800cbb8 <__sfp_lock_release+0x8>)
 800cbb2:	f000 b8d3 	b.w	800cd5c <__retarget_lock_release_recursive>
 800cbb6:	bf00      	nop
 800cbb8:	20007931 	.word	0x20007931

0800cbbc <__sinit_lock_acquire>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	; (800cbc4 <__sinit_lock_acquire+0x8>)
 800cbbe:	f000 b8cc 	b.w	800cd5a <__retarget_lock_acquire_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	20007932 	.word	0x20007932

0800cbc8 <__sinit_lock_release>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__sinit_lock_release+0x8>)
 800cbca:	f000 b8c7 	b.w	800cd5c <__retarget_lock_release_recursive>
 800cbce:	bf00      	nop
 800cbd0:	20007932 	.word	0x20007932

0800cbd4 <__sinit>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	f7ff fff0 	bl	800cbbc <__sinit_lock_acquire>
 800cbdc:	69a3      	ldr	r3, [r4, #24]
 800cbde:	b11b      	cbz	r3, 800cbe8 <__sinit+0x14>
 800cbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe4:	f7ff bff0 	b.w	800cbc8 <__sinit_lock_release>
 800cbe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbec:	6523      	str	r3, [r4, #80]	; 0x50
 800cbee:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <__sinit+0x68>)
 800cbf0:	4a13      	ldr	r2, [pc, #76]	; (800cc40 <__sinit+0x6c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	bf08      	it	eq
 800cbfa:	2301      	moveq	r3, #1
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	bf08      	it	eq
 800cc00:	61a3      	streq	r3, [r4, #24]
 800cc02:	f000 f81f 	bl	800cc44 <__sfp>
 800cc06:	6060      	str	r0, [r4, #4]
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 f81b 	bl	800cc44 <__sfp>
 800cc0e:	60a0      	str	r0, [r4, #8]
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 f817 	bl	800cc44 <__sfp>
 800cc16:	2200      	movs	r2, #0
 800cc18:	2104      	movs	r1, #4
 800cc1a:	60e0      	str	r0, [r4, #12]
 800cc1c:	6860      	ldr	r0, [r4, #4]
 800cc1e:	f7ff ff81 	bl	800cb24 <std>
 800cc22:	2201      	movs	r2, #1
 800cc24:	2109      	movs	r1, #9
 800cc26:	68a0      	ldr	r0, [r4, #8]
 800cc28:	f7ff ff7c 	bl	800cb24 <std>
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	2112      	movs	r1, #18
 800cc30:	68e0      	ldr	r0, [r4, #12]
 800cc32:	f7ff ff77 	bl	800cb24 <std>
 800cc36:	2301      	movs	r3, #1
 800cc38:	61a3      	str	r3, [r4, #24]
 800cc3a:	e7d1      	b.n	800cbe0 <__sinit+0xc>
 800cc3c:	08011718 	.word	0x08011718
 800cc40:	0800cb6d 	.word	0x0800cb6d

0800cc44 <__sfp>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	4607      	mov	r7, r0
 800cc48:	f7ff ffac 	bl	800cba4 <__sfp_lock_acquire>
 800cc4c:	4b1e      	ldr	r3, [pc, #120]	; (800ccc8 <__sfp+0x84>)
 800cc4e:	681e      	ldr	r6, [r3, #0]
 800cc50:	69b3      	ldr	r3, [r6, #24]
 800cc52:	b913      	cbnz	r3, 800cc5a <__sfp+0x16>
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7ff ffbd 	bl	800cbd4 <__sinit>
 800cc5a:	3648      	adds	r6, #72	; 0x48
 800cc5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	d503      	bpl.n	800cc6c <__sfp+0x28>
 800cc64:	6833      	ldr	r3, [r6, #0]
 800cc66:	b30b      	cbz	r3, 800ccac <__sfp+0x68>
 800cc68:	6836      	ldr	r6, [r6, #0]
 800cc6a:	e7f7      	b.n	800cc5c <__sfp+0x18>
 800cc6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc70:	b9d5      	cbnz	r5, 800cca8 <__sfp+0x64>
 800cc72:	4b16      	ldr	r3, [pc, #88]	; (800cccc <__sfp+0x88>)
 800cc74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc78:	60e3      	str	r3, [r4, #12]
 800cc7a:	6665      	str	r5, [r4, #100]	; 0x64
 800cc7c:	f000 f86c 	bl	800cd58 <__retarget_lock_init_recursive>
 800cc80:	f7ff ff96 	bl	800cbb0 <__sfp_lock_release>
 800cc84:	2208      	movs	r2, #8
 800cc86:	4629      	mov	r1, r5
 800cc88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc90:	6025      	str	r5, [r4, #0]
 800cc92:	61a5      	str	r5, [r4, #24]
 800cc94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc98:	f000 f86f 	bl	800cd7a <memset>
 800cc9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cca4:	4620      	mov	r0, r4
 800cca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca8:	3468      	adds	r4, #104	; 0x68
 800ccaa:	e7d9      	b.n	800cc60 <__sfp+0x1c>
 800ccac:	2104      	movs	r1, #4
 800ccae:	4638      	mov	r0, r7
 800ccb0:	f7ff ff62 	bl	800cb78 <__sfmoreglue>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	6030      	str	r0, [r6, #0]
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d1d5      	bne.n	800cc68 <__sfp+0x24>
 800ccbc:	f7ff ff78 	bl	800cbb0 <__sfp_lock_release>
 800ccc0:	230c      	movs	r3, #12
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	e7ee      	b.n	800cca4 <__sfp+0x60>
 800ccc6:	bf00      	nop
 800ccc8:	08011718 	.word	0x08011718
 800cccc:	ffff0001 	.word	0xffff0001

0800ccd0 <_fwalk_reent>:
 800ccd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	4688      	mov	r8, r1
 800ccd8:	2700      	movs	r7, #0
 800ccda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cce2:	f1b9 0901 	subs.w	r9, r9, #1
 800cce6:	d505      	bpl.n	800ccf4 <_fwalk_reent+0x24>
 800cce8:	6824      	ldr	r4, [r4, #0]
 800ccea:	2c00      	cmp	r4, #0
 800ccec:	d1f7      	bne.n	800ccde <_fwalk_reent+0xe>
 800ccee:	4638      	mov	r0, r7
 800ccf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf4:	89ab      	ldrh	r3, [r5, #12]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d907      	bls.n	800cd0a <_fwalk_reent+0x3a>
 800ccfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	d003      	beq.n	800cd0a <_fwalk_reent+0x3a>
 800cd02:	4629      	mov	r1, r5
 800cd04:	4630      	mov	r0, r6
 800cd06:	47c0      	blx	r8
 800cd08:	4307      	orrs	r7, r0
 800cd0a:	3568      	adds	r5, #104	; 0x68
 800cd0c:	e7e9      	b.n	800cce2 <_fwalk_reent+0x12>
	...

0800cd10 <__libc_init_array>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	2600      	movs	r6, #0
 800cd14:	4d0c      	ldr	r5, [pc, #48]	; (800cd48 <__libc_init_array+0x38>)
 800cd16:	4c0d      	ldr	r4, [pc, #52]	; (800cd4c <__libc_init_array+0x3c>)
 800cd18:	1b64      	subs	r4, r4, r5
 800cd1a:	10a4      	asrs	r4, r4, #2
 800cd1c:	42a6      	cmp	r6, r4
 800cd1e:	d109      	bne.n	800cd34 <__libc_init_array+0x24>
 800cd20:	f004 facc 	bl	80112bc <_init>
 800cd24:	2600      	movs	r6, #0
 800cd26:	4d0a      	ldr	r5, [pc, #40]	; (800cd50 <__libc_init_array+0x40>)
 800cd28:	4c0a      	ldr	r4, [pc, #40]	; (800cd54 <__libc_init_array+0x44>)
 800cd2a:	1b64      	subs	r4, r4, r5
 800cd2c:	10a4      	asrs	r4, r4, #2
 800cd2e:	42a6      	cmp	r6, r4
 800cd30:	d105      	bne.n	800cd3e <__libc_init_array+0x2e>
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd38:	4798      	blx	r3
 800cd3a:	3601      	adds	r6, #1
 800cd3c:	e7ee      	b.n	800cd1c <__libc_init_array+0xc>
 800cd3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd42:	4798      	blx	r3
 800cd44:	3601      	adds	r6, #1
 800cd46:	e7f2      	b.n	800cd2e <__libc_init_array+0x1e>
 800cd48:	08011ca0 	.word	0x08011ca0
 800cd4c:	08011ca0 	.word	0x08011ca0
 800cd50:	08011ca0 	.word	0x08011ca0
 800cd54:	08011ca4 	.word	0x08011ca4

0800cd58 <__retarget_lock_init_recursive>:
 800cd58:	4770      	bx	lr

0800cd5a <__retarget_lock_acquire_recursive>:
 800cd5a:	4770      	bx	lr

0800cd5c <__retarget_lock_release_recursive>:
 800cd5c:	4770      	bx	lr

0800cd5e <memcpy>:
 800cd5e:	440a      	add	r2, r1
 800cd60:	4291      	cmp	r1, r2
 800cd62:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd66:	d100      	bne.n	800cd6a <memcpy+0xc>
 800cd68:	4770      	bx	lr
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd70:	4291      	cmp	r1, r2
 800cd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd76:	d1f9      	bne.n	800cd6c <memcpy+0xe>
 800cd78:	bd10      	pop	{r4, pc}

0800cd7a <memset>:
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	4402      	add	r2, r0
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d100      	bne.n	800cd84 <memset+0xa>
 800cd82:	4770      	bx	lr
 800cd84:	f803 1b01 	strb.w	r1, [r3], #1
 800cd88:	e7f9      	b.n	800cd7e <memset+0x4>
	...

0800cd8c <sbrk_aligned>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	4e0e      	ldr	r6, [pc, #56]	; (800cdc8 <sbrk_aligned+0x3c>)
 800cd90:	460c      	mov	r4, r1
 800cd92:	6831      	ldr	r1, [r6, #0]
 800cd94:	4605      	mov	r5, r0
 800cd96:	b911      	cbnz	r1, 800cd9e <sbrk_aligned+0x12>
 800cd98:	f000 fd56 	bl	800d848 <_sbrk_r>
 800cd9c:	6030      	str	r0, [r6, #0]
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	f000 fd51 	bl	800d848 <_sbrk_r>
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d00a      	beq.n	800cdc0 <sbrk_aligned+0x34>
 800cdaa:	1cc4      	adds	r4, r0, #3
 800cdac:	f024 0403 	bic.w	r4, r4, #3
 800cdb0:	42a0      	cmp	r0, r4
 800cdb2:	d007      	beq.n	800cdc4 <sbrk_aligned+0x38>
 800cdb4:	1a21      	subs	r1, r4, r0
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f000 fd46 	bl	800d848 <_sbrk_r>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d101      	bne.n	800cdc4 <sbrk_aligned+0x38>
 800cdc0:	f04f 34ff 	mov.w	r4, #4294967295
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	20007938 	.word	0x20007938

0800cdcc <_malloc_r>:
 800cdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd0:	1ccd      	adds	r5, r1, #3
 800cdd2:	f025 0503 	bic.w	r5, r5, #3
 800cdd6:	3508      	adds	r5, #8
 800cdd8:	2d0c      	cmp	r5, #12
 800cdda:	bf38      	it	cc
 800cddc:	250c      	movcc	r5, #12
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	4607      	mov	r7, r0
 800cde2:	db01      	blt.n	800cde8 <_malloc_r+0x1c>
 800cde4:	42a9      	cmp	r1, r5
 800cde6:	d905      	bls.n	800cdf4 <_malloc_r+0x28>
 800cde8:	230c      	movs	r3, #12
 800cdea:	2600      	movs	r6, #0
 800cdec:	603b      	str	r3, [r7, #0]
 800cdee:	4630      	mov	r0, r6
 800cdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf4:	4e2e      	ldr	r6, [pc, #184]	; (800ceb0 <_malloc_r+0xe4>)
 800cdf6:	f001 fd23 	bl	800e840 <__malloc_lock>
 800cdfa:	6833      	ldr	r3, [r6, #0]
 800cdfc:	461c      	mov	r4, r3
 800cdfe:	bb34      	cbnz	r4, 800ce4e <_malloc_r+0x82>
 800ce00:	4629      	mov	r1, r5
 800ce02:	4638      	mov	r0, r7
 800ce04:	f7ff ffc2 	bl	800cd8c <sbrk_aligned>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	d14d      	bne.n	800ceaa <_malloc_r+0xde>
 800ce0e:	6834      	ldr	r4, [r6, #0]
 800ce10:	4626      	mov	r6, r4
 800ce12:	2e00      	cmp	r6, #0
 800ce14:	d140      	bne.n	800ce98 <_malloc_r+0xcc>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	4631      	mov	r1, r6
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	eb04 0803 	add.w	r8, r4, r3
 800ce20:	f000 fd12 	bl	800d848 <_sbrk_r>
 800ce24:	4580      	cmp	r8, r0
 800ce26:	d13a      	bne.n	800ce9e <_malloc_r+0xd2>
 800ce28:	6821      	ldr	r1, [r4, #0]
 800ce2a:	3503      	adds	r5, #3
 800ce2c:	1a6d      	subs	r5, r5, r1
 800ce2e:	f025 0503 	bic.w	r5, r5, #3
 800ce32:	3508      	adds	r5, #8
 800ce34:	2d0c      	cmp	r5, #12
 800ce36:	bf38      	it	cc
 800ce38:	250c      	movcc	r5, #12
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7ff ffa5 	bl	800cd8c <sbrk_aligned>
 800ce42:	3001      	adds	r0, #1
 800ce44:	d02b      	beq.n	800ce9e <_malloc_r+0xd2>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	442b      	add	r3, r5
 800ce4a:	6023      	str	r3, [r4, #0]
 800ce4c:	e00e      	b.n	800ce6c <_malloc_r+0xa0>
 800ce4e:	6822      	ldr	r2, [r4, #0]
 800ce50:	1b52      	subs	r2, r2, r5
 800ce52:	d41e      	bmi.n	800ce92 <_malloc_r+0xc6>
 800ce54:	2a0b      	cmp	r2, #11
 800ce56:	d916      	bls.n	800ce86 <_malloc_r+0xba>
 800ce58:	1961      	adds	r1, r4, r5
 800ce5a:	42a3      	cmp	r3, r4
 800ce5c:	6025      	str	r5, [r4, #0]
 800ce5e:	bf18      	it	ne
 800ce60:	6059      	strne	r1, [r3, #4]
 800ce62:	6863      	ldr	r3, [r4, #4]
 800ce64:	bf08      	it	eq
 800ce66:	6031      	streq	r1, [r6, #0]
 800ce68:	5162      	str	r2, [r4, r5]
 800ce6a:	604b      	str	r3, [r1, #4]
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f104 060b 	add.w	r6, r4, #11
 800ce72:	f001 fceb 	bl	800e84c <__malloc_unlock>
 800ce76:	f026 0607 	bic.w	r6, r6, #7
 800ce7a:	1d23      	adds	r3, r4, #4
 800ce7c:	1af2      	subs	r2, r6, r3
 800ce7e:	d0b6      	beq.n	800cdee <_malloc_r+0x22>
 800ce80:	1b9b      	subs	r3, r3, r6
 800ce82:	50a3      	str	r3, [r4, r2]
 800ce84:	e7b3      	b.n	800cdee <_malloc_r+0x22>
 800ce86:	6862      	ldr	r2, [r4, #4]
 800ce88:	42a3      	cmp	r3, r4
 800ce8a:	bf0c      	ite	eq
 800ce8c:	6032      	streq	r2, [r6, #0]
 800ce8e:	605a      	strne	r2, [r3, #4]
 800ce90:	e7ec      	b.n	800ce6c <_malloc_r+0xa0>
 800ce92:	4623      	mov	r3, r4
 800ce94:	6864      	ldr	r4, [r4, #4]
 800ce96:	e7b2      	b.n	800cdfe <_malloc_r+0x32>
 800ce98:	4634      	mov	r4, r6
 800ce9a:	6876      	ldr	r6, [r6, #4]
 800ce9c:	e7b9      	b.n	800ce12 <_malloc_r+0x46>
 800ce9e:	230c      	movs	r3, #12
 800cea0:	4638      	mov	r0, r7
 800cea2:	603b      	str	r3, [r7, #0]
 800cea4:	f001 fcd2 	bl	800e84c <__malloc_unlock>
 800cea8:	e7a1      	b.n	800cdee <_malloc_r+0x22>
 800ceaa:	6025      	str	r5, [r4, #0]
 800ceac:	e7de      	b.n	800ce6c <_malloc_r+0xa0>
 800ceae:	bf00      	nop
 800ceb0:	20007934 	.word	0x20007934

0800ceb4 <__cvt>:
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceba:	461f      	mov	r7, r3
 800cebc:	bfbb      	ittet	lt
 800cebe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800cec2:	461f      	movlt	r7, r3
 800cec4:	2300      	movge	r3, #0
 800cec6:	232d      	movlt	r3, #45	; 0x2d
 800cec8:	b088      	sub	sp, #32
 800ceca:	4614      	mov	r4, r2
 800cecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cece:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ced0:	7013      	strb	r3, [r2, #0]
 800ced2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ced4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ced8:	f023 0820 	bic.w	r8, r3, #32
 800cedc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cee0:	d005      	beq.n	800ceee <__cvt+0x3a>
 800cee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cee6:	d100      	bne.n	800ceea <__cvt+0x36>
 800cee8:	3501      	adds	r5, #1
 800ceea:	2302      	movs	r3, #2
 800ceec:	e000      	b.n	800cef0 <__cvt+0x3c>
 800ceee:	2303      	movs	r3, #3
 800cef0:	aa07      	add	r2, sp, #28
 800cef2:	9204      	str	r2, [sp, #16]
 800cef4:	aa06      	add	r2, sp, #24
 800cef6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cefa:	e9cd 3500 	strd	r3, r5, [sp]
 800cefe:	4622      	mov	r2, r4
 800cf00:	463b      	mov	r3, r7
 800cf02:	f000 fdc5 	bl	800da90 <_dtoa_r>
 800cf06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	d102      	bne.n	800cf14 <__cvt+0x60>
 800cf0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf10:	07db      	lsls	r3, r3, #31
 800cf12:	d522      	bpl.n	800cf5a <__cvt+0xa6>
 800cf14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf18:	eb06 0905 	add.w	r9, r6, r5
 800cf1c:	d110      	bne.n	800cf40 <__cvt+0x8c>
 800cf1e:	7833      	ldrb	r3, [r6, #0]
 800cf20:	2b30      	cmp	r3, #48	; 0x30
 800cf22:	d10a      	bne.n	800cf3a <__cvt+0x86>
 800cf24:	2200      	movs	r2, #0
 800cf26:	2300      	movs	r3, #0
 800cf28:	4620      	mov	r0, r4
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 fdac 	bl	8000a88 <__aeabi_dcmpeq>
 800cf30:	b918      	cbnz	r0, 800cf3a <__cvt+0x86>
 800cf32:	f1c5 0501 	rsb	r5, r5, #1
 800cf36:	f8ca 5000 	str.w	r5, [sl]
 800cf3a:	f8da 3000 	ldr.w	r3, [sl]
 800cf3e:	4499      	add	r9, r3
 800cf40:	2200      	movs	r2, #0
 800cf42:	2300      	movs	r3, #0
 800cf44:	4620      	mov	r0, r4
 800cf46:	4639      	mov	r1, r7
 800cf48:	f7f3 fd9e 	bl	8000a88 <__aeabi_dcmpeq>
 800cf4c:	b108      	cbz	r0, 800cf52 <__cvt+0x9e>
 800cf4e:	f8cd 901c 	str.w	r9, [sp, #28]
 800cf52:	2230      	movs	r2, #48	; 0x30
 800cf54:	9b07      	ldr	r3, [sp, #28]
 800cf56:	454b      	cmp	r3, r9
 800cf58:	d307      	bcc.n	800cf6a <__cvt+0xb6>
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	9b07      	ldr	r3, [sp, #28]
 800cf5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cf60:	1b9b      	subs	r3, r3, r6
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	b008      	add	sp, #32
 800cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6a:	1c59      	adds	r1, r3, #1
 800cf6c:	9107      	str	r1, [sp, #28]
 800cf6e:	701a      	strb	r2, [r3, #0]
 800cf70:	e7f0      	b.n	800cf54 <__cvt+0xa0>

0800cf72 <__exponent>:
 800cf72:	4603      	mov	r3, r0
 800cf74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf76:	2900      	cmp	r1, #0
 800cf78:	f803 2b02 	strb.w	r2, [r3], #2
 800cf7c:	bfb6      	itet	lt
 800cf7e:	222d      	movlt	r2, #45	; 0x2d
 800cf80:	222b      	movge	r2, #43	; 0x2b
 800cf82:	4249      	neglt	r1, r1
 800cf84:	2909      	cmp	r1, #9
 800cf86:	7042      	strb	r2, [r0, #1]
 800cf88:	dd2b      	ble.n	800cfe2 <__exponent+0x70>
 800cf8a:	f10d 0407 	add.w	r4, sp, #7
 800cf8e:	46a4      	mov	ip, r4
 800cf90:	270a      	movs	r7, #10
 800cf92:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf96:	460a      	mov	r2, r1
 800cf98:	46a6      	mov	lr, r4
 800cf9a:	fb07 1516 	mls	r5, r7, r6, r1
 800cf9e:	2a63      	cmp	r2, #99	; 0x63
 800cfa0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	f104 34ff 	add.w	r4, r4, #4294967295
 800cfaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cfae:	dcf0      	bgt.n	800cf92 <__exponent+0x20>
 800cfb0:	3130      	adds	r1, #48	; 0x30
 800cfb2:	f1ae 0502 	sub.w	r5, lr, #2
 800cfb6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cfba:	4629      	mov	r1, r5
 800cfbc:	1c44      	adds	r4, r0, #1
 800cfbe:	4561      	cmp	r1, ip
 800cfc0:	d30a      	bcc.n	800cfd8 <__exponent+0x66>
 800cfc2:	f10d 0209 	add.w	r2, sp, #9
 800cfc6:	eba2 020e 	sub.w	r2, r2, lr
 800cfca:	4565      	cmp	r5, ip
 800cfcc:	bf88      	it	hi
 800cfce:	2200      	movhi	r2, #0
 800cfd0:	4413      	add	r3, r2
 800cfd2:	1a18      	subs	r0, r3, r0
 800cfd4:	b003      	add	sp, #12
 800cfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfdc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cfe0:	e7ed      	b.n	800cfbe <__exponent+0x4c>
 800cfe2:	2330      	movs	r3, #48	; 0x30
 800cfe4:	3130      	adds	r1, #48	; 0x30
 800cfe6:	7083      	strb	r3, [r0, #2]
 800cfe8:	70c1      	strb	r1, [r0, #3]
 800cfea:	1d03      	adds	r3, r0, #4
 800cfec:	e7f1      	b.n	800cfd2 <__exponent+0x60>
	...

0800cff0 <_printf_float>:
 800cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	b091      	sub	sp, #68	; 0x44
 800cff6:	460c      	mov	r4, r1
 800cff8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cffc:	4616      	mov	r6, r2
 800cffe:	461f      	mov	r7, r3
 800d000:	4605      	mov	r5, r0
 800d002:	f001 fbf1 	bl	800e7e8 <_localeconv_r>
 800d006:	6803      	ldr	r3, [r0, #0]
 800d008:	4618      	mov	r0, r3
 800d00a:	9309      	str	r3, [sp, #36]	; 0x24
 800d00c:	f7f3 f910 	bl	8000230 <strlen>
 800d010:	2300      	movs	r3, #0
 800d012:	930e      	str	r3, [sp, #56]	; 0x38
 800d014:	f8d8 3000 	ldr.w	r3, [r8]
 800d018:	900a      	str	r0, [sp, #40]	; 0x28
 800d01a:	3307      	adds	r3, #7
 800d01c:	f023 0307 	bic.w	r3, r3, #7
 800d020:	f103 0208 	add.w	r2, r3, #8
 800d024:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d028:	f8d4 b000 	ldr.w	fp, [r4]
 800d02c:	f8c8 2000 	str.w	r2, [r8]
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d038:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d03c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d040:	930b      	str	r3, [sp, #44]	; 0x2c
 800d042:	f04f 32ff 	mov.w	r2, #4294967295
 800d046:	4640      	mov	r0, r8
 800d048:	4b9c      	ldr	r3, [pc, #624]	; (800d2bc <_printf_float+0x2cc>)
 800d04a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d04c:	f7f3 fd4e 	bl	8000aec <__aeabi_dcmpun>
 800d050:	bb70      	cbnz	r0, 800d0b0 <_printf_float+0xc0>
 800d052:	f04f 32ff 	mov.w	r2, #4294967295
 800d056:	4640      	mov	r0, r8
 800d058:	4b98      	ldr	r3, [pc, #608]	; (800d2bc <_printf_float+0x2cc>)
 800d05a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d05c:	f7f3 fd28 	bl	8000ab0 <__aeabi_dcmple>
 800d060:	bb30      	cbnz	r0, 800d0b0 <_printf_float+0xc0>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	4640      	mov	r0, r8
 800d068:	4651      	mov	r1, sl
 800d06a:	f7f3 fd17 	bl	8000a9c <__aeabi_dcmplt>
 800d06e:	b110      	cbz	r0, 800d076 <_printf_float+0x86>
 800d070:	232d      	movs	r3, #45	; 0x2d
 800d072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d076:	4b92      	ldr	r3, [pc, #584]	; (800d2c0 <_printf_float+0x2d0>)
 800d078:	4892      	ldr	r0, [pc, #584]	; (800d2c4 <_printf_float+0x2d4>)
 800d07a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d07e:	bf94      	ite	ls
 800d080:	4698      	movls	r8, r3
 800d082:	4680      	movhi	r8, r0
 800d084:	2303      	movs	r3, #3
 800d086:	f04f 0a00 	mov.w	sl, #0
 800d08a:	6123      	str	r3, [r4, #16]
 800d08c:	f02b 0304 	bic.w	r3, fp, #4
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	4633      	mov	r3, r6
 800d094:	4621      	mov	r1, r4
 800d096:	4628      	mov	r0, r5
 800d098:	9700      	str	r7, [sp, #0]
 800d09a:	aa0f      	add	r2, sp, #60	; 0x3c
 800d09c:	f000 f9d4 	bl	800d448 <_printf_common>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	f040 8090 	bne.w	800d1c6 <_printf_float+0x1d6>
 800d0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0aa:	b011      	add	sp, #68	; 0x44
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	4642      	mov	r2, r8
 800d0b2:	4653      	mov	r3, sl
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	4651      	mov	r1, sl
 800d0b8:	f7f3 fd18 	bl	8000aec <__aeabi_dcmpun>
 800d0bc:	b148      	cbz	r0, 800d0d2 <_printf_float+0xe2>
 800d0be:	f1ba 0f00 	cmp.w	sl, #0
 800d0c2:	bfb8      	it	lt
 800d0c4:	232d      	movlt	r3, #45	; 0x2d
 800d0c6:	4880      	ldr	r0, [pc, #512]	; (800d2c8 <_printf_float+0x2d8>)
 800d0c8:	bfb8      	it	lt
 800d0ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0ce:	4b7f      	ldr	r3, [pc, #508]	; (800d2cc <_printf_float+0x2dc>)
 800d0d0:	e7d3      	b.n	800d07a <_printf_float+0x8a>
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d0d8:	1c5a      	adds	r2, r3, #1
 800d0da:	d142      	bne.n	800d162 <_printf_float+0x172>
 800d0dc:	2306      	movs	r3, #6
 800d0de:	6063      	str	r3, [r4, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	9206      	str	r2, [sp, #24]
 800d0e4:	aa0e      	add	r2, sp, #56	; 0x38
 800d0e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d0ea:	aa0d      	add	r2, sp, #52	; 0x34
 800d0ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d0f0:	9203      	str	r2, [sp, #12]
 800d0f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d0f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	6863      	ldr	r3, [r4, #4]
 800d0fe:	4642      	mov	r2, r8
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4628      	mov	r0, r5
 800d104:	4653      	mov	r3, sl
 800d106:	910b      	str	r1, [sp, #44]	; 0x2c
 800d108:	f7ff fed4 	bl	800ceb4 <__cvt>
 800d10c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d10e:	4680      	mov	r8, r0
 800d110:	2947      	cmp	r1, #71	; 0x47
 800d112:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d114:	d108      	bne.n	800d128 <_printf_float+0x138>
 800d116:	1cc8      	adds	r0, r1, #3
 800d118:	db02      	blt.n	800d120 <_printf_float+0x130>
 800d11a:	6863      	ldr	r3, [r4, #4]
 800d11c:	4299      	cmp	r1, r3
 800d11e:	dd40      	ble.n	800d1a2 <_printf_float+0x1b2>
 800d120:	f1a9 0902 	sub.w	r9, r9, #2
 800d124:	fa5f f989 	uxtb.w	r9, r9
 800d128:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d12c:	d81f      	bhi.n	800d16e <_printf_float+0x17e>
 800d12e:	464a      	mov	r2, r9
 800d130:	3901      	subs	r1, #1
 800d132:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d136:	910d      	str	r1, [sp, #52]	; 0x34
 800d138:	f7ff ff1b 	bl	800cf72 <__exponent>
 800d13c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d13e:	4682      	mov	sl, r0
 800d140:	1813      	adds	r3, r2, r0
 800d142:	2a01      	cmp	r2, #1
 800d144:	6123      	str	r3, [r4, #16]
 800d146:	dc02      	bgt.n	800d14e <_printf_float+0x15e>
 800d148:	6822      	ldr	r2, [r4, #0]
 800d14a:	07d2      	lsls	r2, r2, #31
 800d14c:	d501      	bpl.n	800d152 <_printf_float+0x162>
 800d14e:	3301      	adds	r3, #1
 800d150:	6123      	str	r3, [r4, #16]
 800d152:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d156:	2b00      	cmp	r3, #0
 800d158:	d09b      	beq.n	800d092 <_printf_float+0xa2>
 800d15a:	232d      	movs	r3, #45	; 0x2d
 800d15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d160:	e797      	b.n	800d092 <_printf_float+0xa2>
 800d162:	2947      	cmp	r1, #71	; 0x47
 800d164:	d1bc      	bne.n	800d0e0 <_printf_float+0xf0>
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1ba      	bne.n	800d0e0 <_printf_float+0xf0>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e7b7      	b.n	800d0de <_printf_float+0xee>
 800d16e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d172:	d118      	bne.n	800d1a6 <_printf_float+0x1b6>
 800d174:	2900      	cmp	r1, #0
 800d176:	6863      	ldr	r3, [r4, #4]
 800d178:	dd0b      	ble.n	800d192 <_printf_float+0x1a2>
 800d17a:	6121      	str	r1, [r4, #16]
 800d17c:	b913      	cbnz	r3, 800d184 <_printf_float+0x194>
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	07d0      	lsls	r0, r2, #31
 800d182:	d502      	bpl.n	800d18a <_printf_float+0x19a>
 800d184:	3301      	adds	r3, #1
 800d186:	440b      	add	r3, r1
 800d188:	6123      	str	r3, [r4, #16]
 800d18a:	f04f 0a00 	mov.w	sl, #0
 800d18e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d190:	e7df      	b.n	800d152 <_printf_float+0x162>
 800d192:	b913      	cbnz	r3, 800d19a <_printf_float+0x1aa>
 800d194:	6822      	ldr	r2, [r4, #0]
 800d196:	07d2      	lsls	r2, r2, #31
 800d198:	d501      	bpl.n	800d19e <_printf_float+0x1ae>
 800d19a:	3302      	adds	r3, #2
 800d19c:	e7f4      	b.n	800d188 <_printf_float+0x198>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e7f2      	b.n	800d188 <_printf_float+0x198>
 800d1a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1a8:	4299      	cmp	r1, r3
 800d1aa:	db05      	blt.n	800d1b8 <_printf_float+0x1c8>
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	6121      	str	r1, [r4, #16]
 800d1b0:	07d8      	lsls	r0, r3, #31
 800d1b2:	d5ea      	bpl.n	800d18a <_printf_float+0x19a>
 800d1b4:	1c4b      	adds	r3, r1, #1
 800d1b6:	e7e7      	b.n	800d188 <_printf_float+0x198>
 800d1b8:	2900      	cmp	r1, #0
 800d1ba:	bfcc      	ite	gt
 800d1bc:	2201      	movgt	r2, #1
 800d1be:	f1c1 0202 	rsble	r2, r1, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	e7e0      	b.n	800d188 <_printf_float+0x198>
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	055a      	lsls	r2, r3, #21
 800d1ca:	d407      	bmi.n	800d1dc <_printf_float+0x1ec>
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	4642      	mov	r2, r8
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	47b8      	blx	r7
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	d12b      	bne.n	800d232 <_printf_float+0x242>
 800d1da:	e764      	b.n	800d0a6 <_printf_float+0xb6>
 800d1dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d1e0:	f240 80dd 	bls.w	800d39e <_printf_float+0x3ae>
 800d1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f7f3 fc4c 	bl	8000a88 <__aeabi_dcmpeq>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d033      	beq.n	800d25c <_printf_float+0x26c>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	4a35      	ldr	r2, [pc, #212]	; (800d2d0 <_printf_float+0x2e0>)
 800d1fc:	47b8      	blx	r7
 800d1fe:	3001      	adds	r0, #1
 800d200:	f43f af51 	beq.w	800d0a6 <_printf_float+0xb6>
 800d204:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d208:	429a      	cmp	r2, r3
 800d20a:	db02      	blt.n	800d212 <_printf_float+0x222>
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	07d8      	lsls	r0, r3, #31
 800d210:	d50f      	bpl.n	800d232 <_printf_float+0x242>
 800d212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d216:	4631      	mov	r1, r6
 800d218:	4628      	mov	r0, r5
 800d21a:	47b8      	blx	r7
 800d21c:	3001      	adds	r0, #1
 800d21e:	f43f af42 	beq.w	800d0a6 <_printf_float+0xb6>
 800d222:	f04f 0800 	mov.w	r8, #0
 800d226:	f104 091a 	add.w	r9, r4, #26
 800d22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d22c:	3b01      	subs	r3, #1
 800d22e:	4543      	cmp	r3, r8
 800d230:	dc09      	bgt.n	800d246 <_printf_float+0x256>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	079b      	lsls	r3, r3, #30
 800d236:	f100 8102 	bmi.w	800d43e <_printf_float+0x44e>
 800d23a:	68e0      	ldr	r0, [r4, #12]
 800d23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d23e:	4298      	cmp	r0, r3
 800d240:	bfb8      	it	lt
 800d242:	4618      	movlt	r0, r3
 800d244:	e731      	b.n	800d0aa <_printf_float+0xba>
 800d246:	2301      	movs	r3, #1
 800d248:	464a      	mov	r2, r9
 800d24a:	4631      	mov	r1, r6
 800d24c:	4628      	mov	r0, r5
 800d24e:	47b8      	blx	r7
 800d250:	3001      	adds	r0, #1
 800d252:	f43f af28 	beq.w	800d0a6 <_printf_float+0xb6>
 800d256:	f108 0801 	add.w	r8, r8, #1
 800d25a:	e7e6      	b.n	800d22a <_printf_float+0x23a>
 800d25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d25e:	2b00      	cmp	r3, #0
 800d260:	dc38      	bgt.n	800d2d4 <_printf_float+0x2e4>
 800d262:	2301      	movs	r3, #1
 800d264:	4631      	mov	r1, r6
 800d266:	4628      	mov	r0, r5
 800d268:	4a19      	ldr	r2, [pc, #100]	; (800d2d0 <_printf_float+0x2e0>)
 800d26a:	47b8      	blx	r7
 800d26c:	3001      	adds	r0, #1
 800d26e:	f43f af1a 	beq.w	800d0a6 <_printf_float+0xb6>
 800d272:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d276:	4313      	orrs	r3, r2
 800d278:	d102      	bne.n	800d280 <_printf_float+0x290>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	07d9      	lsls	r1, r3, #31
 800d27e:	d5d8      	bpl.n	800d232 <_printf_float+0x242>
 800d280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d284:	4631      	mov	r1, r6
 800d286:	4628      	mov	r0, r5
 800d288:	47b8      	blx	r7
 800d28a:	3001      	adds	r0, #1
 800d28c:	f43f af0b 	beq.w	800d0a6 <_printf_float+0xb6>
 800d290:	f04f 0900 	mov.w	r9, #0
 800d294:	f104 0a1a 	add.w	sl, r4, #26
 800d298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d29a:	425b      	negs	r3, r3
 800d29c:	454b      	cmp	r3, r9
 800d29e:	dc01      	bgt.n	800d2a4 <_printf_float+0x2b4>
 800d2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2a2:	e794      	b.n	800d1ce <_printf_float+0x1de>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	4652      	mov	r2, sl
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f43f aef9 	beq.w	800d0a6 <_printf_float+0xb6>
 800d2b4:	f109 0901 	add.w	r9, r9, #1
 800d2b8:	e7ee      	b.n	800d298 <_printf_float+0x2a8>
 800d2ba:	bf00      	nop
 800d2bc:	7fefffff 	.word	0x7fefffff
 800d2c0:	0801171c 	.word	0x0801171c
 800d2c4:	08011720 	.word	0x08011720
 800d2c8:	08011728 	.word	0x08011728
 800d2cc:	08011724 	.word	0x08011724
 800d2d0:	0801172c 	.word	0x0801172c
 800d2d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	bfa8      	it	ge
 800d2dc:	461a      	movge	r2, r3
 800d2de:	2a00      	cmp	r2, #0
 800d2e0:	4691      	mov	r9, r2
 800d2e2:	dc37      	bgt.n	800d354 <_printf_float+0x364>
 800d2e4:	f04f 0b00 	mov.w	fp, #0
 800d2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2ec:	f104 021a 	add.w	r2, r4, #26
 800d2f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d2f4:	ebaa 0309 	sub.w	r3, sl, r9
 800d2f8:	455b      	cmp	r3, fp
 800d2fa:	dc33      	bgt.n	800d364 <_printf_float+0x374>
 800d2fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d300:	429a      	cmp	r2, r3
 800d302:	db3b      	blt.n	800d37c <_printf_float+0x38c>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	07da      	lsls	r2, r3, #31
 800d308:	d438      	bmi.n	800d37c <_printf_float+0x38c>
 800d30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d30c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d30e:	eba3 020a 	sub.w	r2, r3, sl
 800d312:	eba3 0901 	sub.w	r9, r3, r1
 800d316:	4591      	cmp	r9, r2
 800d318:	bfa8      	it	ge
 800d31a:	4691      	movge	r9, r2
 800d31c:	f1b9 0f00 	cmp.w	r9, #0
 800d320:	dc34      	bgt.n	800d38c <_printf_float+0x39c>
 800d322:	f04f 0800 	mov.w	r8, #0
 800d326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d32a:	f104 0a1a 	add.w	sl, r4, #26
 800d32e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	eba3 0309 	sub.w	r3, r3, r9
 800d338:	4543      	cmp	r3, r8
 800d33a:	f77f af7a 	ble.w	800d232 <_printf_float+0x242>
 800d33e:	2301      	movs	r3, #1
 800d340:	4652      	mov	r2, sl
 800d342:	4631      	mov	r1, r6
 800d344:	4628      	mov	r0, r5
 800d346:	47b8      	blx	r7
 800d348:	3001      	adds	r0, #1
 800d34a:	f43f aeac 	beq.w	800d0a6 <_printf_float+0xb6>
 800d34e:	f108 0801 	add.w	r8, r8, #1
 800d352:	e7ec      	b.n	800d32e <_printf_float+0x33e>
 800d354:	4613      	mov	r3, r2
 800d356:	4631      	mov	r1, r6
 800d358:	4642      	mov	r2, r8
 800d35a:	4628      	mov	r0, r5
 800d35c:	47b8      	blx	r7
 800d35e:	3001      	adds	r0, #1
 800d360:	d1c0      	bne.n	800d2e4 <_printf_float+0x2f4>
 800d362:	e6a0      	b.n	800d0a6 <_printf_float+0xb6>
 800d364:	2301      	movs	r3, #1
 800d366:	4631      	mov	r1, r6
 800d368:	4628      	mov	r0, r5
 800d36a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d36c:	47b8      	blx	r7
 800d36e:	3001      	adds	r0, #1
 800d370:	f43f ae99 	beq.w	800d0a6 <_printf_float+0xb6>
 800d374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d376:	f10b 0b01 	add.w	fp, fp, #1
 800d37a:	e7b9      	b.n	800d2f0 <_printf_float+0x300>
 800d37c:	4631      	mov	r1, r6
 800d37e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	d1bf      	bne.n	800d30a <_printf_float+0x31a>
 800d38a:	e68c      	b.n	800d0a6 <_printf_float+0xb6>
 800d38c:	464b      	mov	r3, r9
 800d38e:	4631      	mov	r1, r6
 800d390:	4628      	mov	r0, r5
 800d392:	eb08 020a 	add.w	r2, r8, sl
 800d396:	47b8      	blx	r7
 800d398:	3001      	adds	r0, #1
 800d39a:	d1c2      	bne.n	800d322 <_printf_float+0x332>
 800d39c:	e683      	b.n	800d0a6 <_printf_float+0xb6>
 800d39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3a0:	2a01      	cmp	r2, #1
 800d3a2:	dc01      	bgt.n	800d3a8 <_printf_float+0x3b8>
 800d3a4:	07db      	lsls	r3, r3, #31
 800d3a6:	d537      	bpl.n	800d418 <_printf_float+0x428>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4642      	mov	r2, r8
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b8      	blx	r7
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	f43f ae77 	beq.w	800d0a6 <_printf_float+0xb6>
 800d3b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4628      	mov	r0, r5
 800d3c0:	47b8      	blx	r7
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f43f ae6f 	beq.w	800d0a6 <_printf_float+0xb6>
 800d3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	f7f3 fb5a 	bl	8000a88 <__aeabi_dcmpeq>
 800d3d4:	b9d8      	cbnz	r0, 800d40e <_printf_float+0x41e>
 800d3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3d8:	f108 0201 	add.w	r2, r8, #1
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	d10e      	bne.n	800d406 <_printf_float+0x416>
 800d3e8:	e65d      	b.n	800d0a6 <_printf_float+0xb6>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	464a      	mov	r2, r9
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	47b8      	blx	r7
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	f43f ae56 	beq.w	800d0a6 <_printf_float+0xb6>
 800d3fa:	f108 0801 	add.w	r8, r8, #1
 800d3fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d400:	3b01      	subs	r3, #1
 800d402:	4543      	cmp	r3, r8
 800d404:	dcf1      	bgt.n	800d3ea <_printf_float+0x3fa>
 800d406:	4653      	mov	r3, sl
 800d408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d40c:	e6e0      	b.n	800d1d0 <_printf_float+0x1e0>
 800d40e:	f04f 0800 	mov.w	r8, #0
 800d412:	f104 091a 	add.w	r9, r4, #26
 800d416:	e7f2      	b.n	800d3fe <_printf_float+0x40e>
 800d418:	2301      	movs	r3, #1
 800d41a:	4642      	mov	r2, r8
 800d41c:	e7df      	b.n	800d3de <_printf_float+0x3ee>
 800d41e:	2301      	movs	r3, #1
 800d420:	464a      	mov	r2, r9
 800d422:	4631      	mov	r1, r6
 800d424:	4628      	mov	r0, r5
 800d426:	47b8      	blx	r7
 800d428:	3001      	adds	r0, #1
 800d42a:	f43f ae3c 	beq.w	800d0a6 <_printf_float+0xb6>
 800d42e:	f108 0801 	add.w	r8, r8, #1
 800d432:	68e3      	ldr	r3, [r4, #12]
 800d434:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d436:	1a5b      	subs	r3, r3, r1
 800d438:	4543      	cmp	r3, r8
 800d43a:	dcf0      	bgt.n	800d41e <_printf_float+0x42e>
 800d43c:	e6fd      	b.n	800d23a <_printf_float+0x24a>
 800d43e:	f04f 0800 	mov.w	r8, #0
 800d442:	f104 0919 	add.w	r9, r4, #25
 800d446:	e7f4      	b.n	800d432 <_printf_float+0x442>

0800d448 <_printf_common>:
 800d448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d44c:	4616      	mov	r6, r2
 800d44e:	4699      	mov	r9, r3
 800d450:	688a      	ldr	r2, [r1, #8]
 800d452:	690b      	ldr	r3, [r1, #16]
 800d454:	4607      	mov	r7, r0
 800d456:	4293      	cmp	r3, r2
 800d458:	bfb8      	it	lt
 800d45a:	4613      	movlt	r3, r2
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d462:	460c      	mov	r4, r1
 800d464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d468:	b10a      	cbz	r2, 800d46e <_printf_common+0x26>
 800d46a:	3301      	adds	r3, #1
 800d46c:	6033      	str	r3, [r6, #0]
 800d46e:	6823      	ldr	r3, [r4, #0]
 800d470:	0699      	lsls	r1, r3, #26
 800d472:	bf42      	ittt	mi
 800d474:	6833      	ldrmi	r3, [r6, #0]
 800d476:	3302      	addmi	r3, #2
 800d478:	6033      	strmi	r3, [r6, #0]
 800d47a:	6825      	ldr	r5, [r4, #0]
 800d47c:	f015 0506 	ands.w	r5, r5, #6
 800d480:	d106      	bne.n	800d490 <_printf_common+0x48>
 800d482:	f104 0a19 	add.w	sl, r4, #25
 800d486:	68e3      	ldr	r3, [r4, #12]
 800d488:	6832      	ldr	r2, [r6, #0]
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dc28      	bgt.n	800d4e2 <_printf_common+0x9a>
 800d490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d494:	1e13      	subs	r3, r2, #0
 800d496:	6822      	ldr	r2, [r4, #0]
 800d498:	bf18      	it	ne
 800d49a:	2301      	movne	r3, #1
 800d49c:	0692      	lsls	r2, r2, #26
 800d49e:	d42d      	bmi.n	800d4fc <_printf_common+0xb4>
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4a8:	47c0      	blx	r8
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	d020      	beq.n	800d4f0 <_printf_common+0xa8>
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	68e5      	ldr	r5, [r4, #12]
 800d4b2:	f003 0306 	and.w	r3, r3, #6
 800d4b6:	2b04      	cmp	r3, #4
 800d4b8:	bf18      	it	ne
 800d4ba:	2500      	movne	r5, #0
 800d4bc:	6832      	ldr	r2, [r6, #0]
 800d4be:	f04f 0600 	mov.w	r6, #0
 800d4c2:	68a3      	ldr	r3, [r4, #8]
 800d4c4:	bf08      	it	eq
 800d4c6:	1aad      	subeq	r5, r5, r2
 800d4c8:	6922      	ldr	r2, [r4, #16]
 800d4ca:	bf08      	it	eq
 800d4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	bfc4      	itt	gt
 800d4d4:	1a9b      	subgt	r3, r3, r2
 800d4d6:	18ed      	addgt	r5, r5, r3
 800d4d8:	341a      	adds	r4, #26
 800d4da:	42b5      	cmp	r5, r6
 800d4dc:	d11a      	bne.n	800d514 <_printf_common+0xcc>
 800d4de:	2000      	movs	r0, #0
 800d4e0:	e008      	b.n	800d4f4 <_printf_common+0xac>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	4652      	mov	r2, sl
 800d4e6:	4649      	mov	r1, r9
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	47c0      	blx	r8
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d103      	bne.n	800d4f8 <_printf_common+0xb0>
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f8:	3501      	adds	r5, #1
 800d4fa:	e7c4      	b.n	800d486 <_printf_common+0x3e>
 800d4fc:	2030      	movs	r0, #48	; 0x30
 800d4fe:	18e1      	adds	r1, r4, r3
 800d500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d50a:	4422      	add	r2, r4
 800d50c:	3302      	adds	r3, #2
 800d50e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d512:	e7c5      	b.n	800d4a0 <_printf_common+0x58>
 800d514:	2301      	movs	r3, #1
 800d516:	4622      	mov	r2, r4
 800d518:	4649      	mov	r1, r9
 800d51a:	4638      	mov	r0, r7
 800d51c:	47c0      	blx	r8
 800d51e:	3001      	adds	r0, #1
 800d520:	d0e6      	beq.n	800d4f0 <_printf_common+0xa8>
 800d522:	3601      	adds	r6, #1
 800d524:	e7d9      	b.n	800d4da <_printf_common+0x92>
	...

0800d528 <_printf_i>:
 800d528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d52c:	7e0f      	ldrb	r7, [r1, #24]
 800d52e:	4691      	mov	r9, r2
 800d530:	2f78      	cmp	r7, #120	; 0x78
 800d532:	4680      	mov	r8, r0
 800d534:	460c      	mov	r4, r1
 800d536:	469a      	mov	sl, r3
 800d538:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d53a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d53e:	d807      	bhi.n	800d550 <_printf_i+0x28>
 800d540:	2f62      	cmp	r7, #98	; 0x62
 800d542:	d80a      	bhi.n	800d55a <_printf_i+0x32>
 800d544:	2f00      	cmp	r7, #0
 800d546:	f000 80d9 	beq.w	800d6fc <_printf_i+0x1d4>
 800d54a:	2f58      	cmp	r7, #88	; 0x58
 800d54c:	f000 80a4 	beq.w	800d698 <_printf_i+0x170>
 800d550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d558:	e03a      	b.n	800d5d0 <_printf_i+0xa8>
 800d55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d55e:	2b15      	cmp	r3, #21
 800d560:	d8f6      	bhi.n	800d550 <_printf_i+0x28>
 800d562:	a101      	add	r1, pc, #4	; (adr r1, 800d568 <_printf_i+0x40>)
 800d564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d568:	0800d5c1 	.word	0x0800d5c1
 800d56c:	0800d5d5 	.word	0x0800d5d5
 800d570:	0800d551 	.word	0x0800d551
 800d574:	0800d551 	.word	0x0800d551
 800d578:	0800d551 	.word	0x0800d551
 800d57c:	0800d551 	.word	0x0800d551
 800d580:	0800d5d5 	.word	0x0800d5d5
 800d584:	0800d551 	.word	0x0800d551
 800d588:	0800d551 	.word	0x0800d551
 800d58c:	0800d551 	.word	0x0800d551
 800d590:	0800d551 	.word	0x0800d551
 800d594:	0800d6e3 	.word	0x0800d6e3
 800d598:	0800d605 	.word	0x0800d605
 800d59c:	0800d6c5 	.word	0x0800d6c5
 800d5a0:	0800d551 	.word	0x0800d551
 800d5a4:	0800d551 	.word	0x0800d551
 800d5a8:	0800d705 	.word	0x0800d705
 800d5ac:	0800d551 	.word	0x0800d551
 800d5b0:	0800d605 	.word	0x0800d605
 800d5b4:	0800d551 	.word	0x0800d551
 800d5b8:	0800d551 	.word	0x0800d551
 800d5bc:	0800d6cd 	.word	0x0800d6cd
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	1d1a      	adds	r2, r3, #4
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	602a      	str	r2, [r5, #0]
 800d5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e0a4      	b.n	800d71e <_printf_i+0x1f6>
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	6829      	ldr	r1, [r5, #0]
 800d5d8:	0606      	lsls	r6, r0, #24
 800d5da:	f101 0304 	add.w	r3, r1, #4
 800d5de:	d50a      	bpl.n	800d5f6 <_printf_i+0xce>
 800d5e0:	680e      	ldr	r6, [r1, #0]
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	2e00      	cmp	r6, #0
 800d5e6:	da03      	bge.n	800d5f0 <_printf_i+0xc8>
 800d5e8:	232d      	movs	r3, #45	; 0x2d
 800d5ea:	4276      	negs	r6, r6
 800d5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5f0:	230a      	movs	r3, #10
 800d5f2:	485e      	ldr	r0, [pc, #376]	; (800d76c <_printf_i+0x244>)
 800d5f4:	e019      	b.n	800d62a <_printf_i+0x102>
 800d5f6:	680e      	ldr	r6, [r1, #0]
 800d5f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5fc:	602b      	str	r3, [r5, #0]
 800d5fe:	bf18      	it	ne
 800d600:	b236      	sxthne	r6, r6
 800d602:	e7ef      	b.n	800d5e4 <_printf_i+0xbc>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	6820      	ldr	r0, [r4, #0]
 800d608:	1d19      	adds	r1, r3, #4
 800d60a:	6029      	str	r1, [r5, #0]
 800d60c:	0601      	lsls	r1, r0, #24
 800d60e:	d501      	bpl.n	800d614 <_printf_i+0xec>
 800d610:	681e      	ldr	r6, [r3, #0]
 800d612:	e002      	b.n	800d61a <_printf_i+0xf2>
 800d614:	0646      	lsls	r6, r0, #25
 800d616:	d5fb      	bpl.n	800d610 <_printf_i+0xe8>
 800d618:	881e      	ldrh	r6, [r3, #0]
 800d61a:	2f6f      	cmp	r7, #111	; 0x6f
 800d61c:	bf0c      	ite	eq
 800d61e:	2308      	moveq	r3, #8
 800d620:	230a      	movne	r3, #10
 800d622:	4852      	ldr	r0, [pc, #328]	; (800d76c <_printf_i+0x244>)
 800d624:	2100      	movs	r1, #0
 800d626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d62a:	6865      	ldr	r5, [r4, #4]
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	bfa8      	it	ge
 800d630:	6821      	ldrge	r1, [r4, #0]
 800d632:	60a5      	str	r5, [r4, #8]
 800d634:	bfa4      	itt	ge
 800d636:	f021 0104 	bicge.w	r1, r1, #4
 800d63a:	6021      	strge	r1, [r4, #0]
 800d63c:	b90e      	cbnz	r6, 800d642 <_printf_i+0x11a>
 800d63e:	2d00      	cmp	r5, #0
 800d640:	d04d      	beq.n	800d6de <_printf_i+0x1b6>
 800d642:	4615      	mov	r5, r2
 800d644:	fbb6 f1f3 	udiv	r1, r6, r3
 800d648:	fb03 6711 	mls	r7, r3, r1, r6
 800d64c:	5dc7      	ldrb	r7, [r0, r7]
 800d64e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d652:	4637      	mov	r7, r6
 800d654:	42bb      	cmp	r3, r7
 800d656:	460e      	mov	r6, r1
 800d658:	d9f4      	bls.n	800d644 <_printf_i+0x11c>
 800d65a:	2b08      	cmp	r3, #8
 800d65c:	d10b      	bne.n	800d676 <_printf_i+0x14e>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	07de      	lsls	r6, r3, #31
 800d662:	d508      	bpl.n	800d676 <_printf_i+0x14e>
 800d664:	6923      	ldr	r3, [r4, #16]
 800d666:	6861      	ldr	r1, [r4, #4]
 800d668:	4299      	cmp	r1, r3
 800d66a:	bfde      	ittt	le
 800d66c:	2330      	movle	r3, #48	; 0x30
 800d66e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d672:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d676:	1b52      	subs	r2, r2, r5
 800d678:	6122      	str	r2, [r4, #16]
 800d67a:	464b      	mov	r3, r9
 800d67c:	4621      	mov	r1, r4
 800d67e:	4640      	mov	r0, r8
 800d680:	f8cd a000 	str.w	sl, [sp]
 800d684:	aa03      	add	r2, sp, #12
 800d686:	f7ff fedf 	bl	800d448 <_printf_common>
 800d68a:	3001      	adds	r0, #1
 800d68c:	d14c      	bne.n	800d728 <_printf_i+0x200>
 800d68e:	f04f 30ff 	mov.w	r0, #4294967295
 800d692:	b004      	add	sp, #16
 800d694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d698:	4834      	ldr	r0, [pc, #208]	; (800d76c <_printf_i+0x244>)
 800d69a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d69e:	6829      	ldr	r1, [r5, #0]
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6a6:	6029      	str	r1, [r5, #0]
 800d6a8:	061d      	lsls	r5, r3, #24
 800d6aa:	d514      	bpl.n	800d6d6 <_printf_i+0x1ae>
 800d6ac:	07df      	lsls	r7, r3, #31
 800d6ae:	bf44      	itt	mi
 800d6b0:	f043 0320 	orrmi.w	r3, r3, #32
 800d6b4:	6023      	strmi	r3, [r4, #0]
 800d6b6:	b91e      	cbnz	r6, 800d6c0 <_printf_i+0x198>
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	f023 0320 	bic.w	r3, r3, #32
 800d6be:	6023      	str	r3, [r4, #0]
 800d6c0:	2310      	movs	r3, #16
 800d6c2:	e7af      	b.n	800d624 <_printf_i+0xfc>
 800d6c4:	6823      	ldr	r3, [r4, #0]
 800d6c6:	f043 0320 	orr.w	r3, r3, #32
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	2378      	movs	r3, #120	; 0x78
 800d6ce:	4828      	ldr	r0, [pc, #160]	; (800d770 <_printf_i+0x248>)
 800d6d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6d4:	e7e3      	b.n	800d69e <_printf_i+0x176>
 800d6d6:	0659      	lsls	r1, r3, #25
 800d6d8:	bf48      	it	mi
 800d6da:	b2b6      	uxthmi	r6, r6
 800d6dc:	e7e6      	b.n	800d6ac <_printf_i+0x184>
 800d6de:	4615      	mov	r5, r2
 800d6e0:	e7bb      	b.n	800d65a <_printf_i+0x132>
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	6826      	ldr	r6, [r4, #0]
 800d6e6:	1d18      	adds	r0, r3, #4
 800d6e8:	6961      	ldr	r1, [r4, #20]
 800d6ea:	6028      	str	r0, [r5, #0]
 800d6ec:	0635      	lsls	r5, r6, #24
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	d501      	bpl.n	800d6f6 <_printf_i+0x1ce>
 800d6f2:	6019      	str	r1, [r3, #0]
 800d6f4:	e002      	b.n	800d6fc <_printf_i+0x1d4>
 800d6f6:	0670      	lsls	r0, r6, #25
 800d6f8:	d5fb      	bpl.n	800d6f2 <_printf_i+0x1ca>
 800d6fa:	8019      	strh	r1, [r3, #0]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	4615      	mov	r5, r2
 800d700:	6123      	str	r3, [r4, #16]
 800d702:	e7ba      	b.n	800d67a <_printf_i+0x152>
 800d704:	682b      	ldr	r3, [r5, #0]
 800d706:	2100      	movs	r1, #0
 800d708:	1d1a      	adds	r2, r3, #4
 800d70a:	602a      	str	r2, [r5, #0]
 800d70c:	681d      	ldr	r5, [r3, #0]
 800d70e:	6862      	ldr	r2, [r4, #4]
 800d710:	4628      	mov	r0, r5
 800d712:	f001 f887 	bl	800e824 <memchr>
 800d716:	b108      	cbz	r0, 800d71c <_printf_i+0x1f4>
 800d718:	1b40      	subs	r0, r0, r5
 800d71a:	6060      	str	r0, [r4, #4]
 800d71c:	6863      	ldr	r3, [r4, #4]
 800d71e:	6123      	str	r3, [r4, #16]
 800d720:	2300      	movs	r3, #0
 800d722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d726:	e7a8      	b.n	800d67a <_printf_i+0x152>
 800d728:	462a      	mov	r2, r5
 800d72a:	4649      	mov	r1, r9
 800d72c:	4640      	mov	r0, r8
 800d72e:	6923      	ldr	r3, [r4, #16]
 800d730:	47d0      	blx	sl
 800d732:	3001      	adds	r0, #1
 800d734:	d0ab      	beq.n	800d68e <_printf_i+0x166>
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	079b      	lsls	r3, r3, #30
 800d73a:	d413      	bmi.n	800d764 <_printf_i+0x23c>
 800d73c:	68e0      	ldr	r0, [r4, #12]
 800d73e:	9b03      	ldr	r3, [sp, #12]
 800d740:	4298      	cmp	r0, r3
 800d742:	bfb8      	it	lt
 800d744:	4618      	movlt	r0, r3
 800d746:	e7a4      	b.n	800d692 <_printf_i+0x16a>
 800d748:	2301      	movs	r3, #1
 800d74a:	4632      	mov	r2, r6
 800d74c:	4649      	mov	r1, r9
 800d74e:	4640      	mov	r0, r8
 800d750:	47d0      	blx	sl
 800d752:	3001      	adds	r0, #1
 800d754:	d09b      	beq.n	800d68e <_printf_i+0x166>
 800d756:	3501      	adds	r5, #1
 800d758:	68e3      	ldr	r3, [r4, #12]
 800d75a:	9903      	ldr	r1, [sp, #12]
 800d75c:	1a5b      	subs	r3, r3, r1
 800d75e:	42ab      	cmp	r3, r5
 800d760:	dcf2      	bgt.n	800d748 <_printf_i+0x220>
 800d762:	e7eb      	b.n	800d73c <_printf_i+0x214>
 800d764:	2500      	movs	r5, #0
 800d766:	f104 0619 	add.w	r6, r4, #25
 800d76a:	e7f5      	b.n	800d758 <_printf_i+0x230>
 800d76c:	0801172e 	.word	0x0801172e
 800d770:	0801173f 	.word	0x0801173f

0800d774 <cleanup_glue>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	460c      	mov	r4, r1
 800d778:	6809      	ldr	r1, [r1, #0]
 800d77a:	4605      	mov	r5, r0
 800d77c:	b109      	cbz	r1, 800d782 <cleanup_glue+0xe>
 800d77e:	f7ff fff9 	bl	800d774 <cleanup_glue>
 800d782:	4621      	mov	r1, r4
 800d784:	4628      	mov	r0, r5
 800d786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d78a:	f001 bbfb 	b.w	800ef84 <_free_r>
	...

0800d790 <_reclaim_reent>:
 800d790:	4b2c      	ldr	r3, [pc, #176]	; (800d844 <_reclaim_reent+0xb4>)
 800d792:	b570      	push	{r4, r5, r6, lr}
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4604      	mov	r4, r0
 800d798:	4283      	cmp	r3, r0
 800d79a:	d051      	beq.n	800d840 <_reclaim_reent+0xb0>
 800d79c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d79e:	b143      	cbz	r3, 800d7b2 <_reclaim_reent+0x22>
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d14a      	bne.n	800d83c <_reclaim_reent+0xac>
 800d7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7a8:	6819      	ldr	r1, [r3, #0]
 800d7aa:	b111      	cbz	r1, 800d7b2 <_reclaim_reent+0x22>
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f001 fbe9 	bl	800ef84 <_free_r>
 800d7b2:	6961      	ldr	r1, [r4, #20]
 800d7b4:	b111      	cbz	r1, 800d7bc <_reclaim_reent+0x2c>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f001 fbe4 	bl	800ef84 <_free_r>
 800d7bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d7be:	b111      	cbz	r1, 800d7c6 <_reclaim_reent+0x36>
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f001 fbdf 	bl	800ef84 <_free_r>
 800d7c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d7c8:	b111      	cbz	r1, 800d7d0 <_reclaim_reent+0x40>
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f001 fbda 	bl	800ef84 <_free_r>
 800d7d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d7d2:	b111      	cbz	r1, 800d7da <_reclaim_reent+0x4a>
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f001 fbd5 	bl	800ef84 <_free_r>
 800d7da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d7dc:	b111      	cbz	r1, 800d7e4 <_reclaim_reent+0x54>
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f001 fbd0 	bl	800ef84 <_free_r>
 800d7e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d7e6:	b111      	cbz	r1, 800d7ee <_reclaim_reent+0x5e>
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f001 fbcb 	bl	800ef84 <_free_r>
 800d7ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d7f0:	b111      	cbz	r1, 800d7f8 <_reclaim_reent+0x68>
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f001 fbc6 	bl	800ef84 <_free_r>
 800d7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7fa:	b111      	cbz	r1, 800d802 <_reclaim_reent+0x72>
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f001 fbc1 	bl	800ef84 <_free_r>
 800d802:	69a3      	ldr	r3, [r4, #24]
 800d804:	b1e3      	cbz	r3, 800d840 <_reclaim_reent+0xb0>
 800d806:	4620      	mov	r0, r4
 800d808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d80a:	4798      	blx	r3
 800d80c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d80e:	b1b9      	cbz	r1, 800d840 <_reclaim_reent+0xb0>
 800d810:	4620      	mov	r0, r4
 800d812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d816:	f7ff bfad 	b.w	800d774 <cleanup_glue>
 800d81a:	5949      	ldr	r1, [r1, r5]
 800d81c:	b941      	cbnz	r1, 800d830 <_reclaim_reent+0xa0>
 800d81e:	3504      	adds	r5, #4
 800d820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d822:	2d80      	cmp	r5, #128	; 0x80
 800d824:	68d9      	ldr	r1, [r3, #12]
 800d826:	d1f8      	bne.n	800d81a <_reclaim_reent+0x8a>
 800d828:	4620      	mov	r0, r4
 800d82a:	f001 fbab 	bl	800ef84 <_free_r>
 800d82e:	e7ba      	b.n	800d7a6 <_reclaim_reent+0x16>
 800d830:	680e      	ldr	r6, [r1, #0]
 800d832:	4620      	mov	r0, r4
 800d834:	f001 fba6 	bl	800ef84 <_free_r>
 800d838:	4631      	mov	r1, r6
 800d83a:	e7ef      	b.n	800d81c <_reclaim_reent+0x8c>
 800d83c:	2500      	movs	r5, #0
 800d83e:	e7ef      	b.n	800d820 <_reclaim_reent+0x90>
 800d840:	bd70      	pop	{r4, r5, r6, pc}
 800d842:	bf00      	nop
 800d844:	20000038 	.word	0x20000038

0800d848 <_sbrk_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	2300      	movs	r3, #0
 800d84c:	4d05      	ldr	r5, [pc, #20]	; (800d864 <_sbrk_r+0x1c>)
 800d84e:	4604      	mov	r4, r0
 800d850:	4608      	mov	r0, r1
 800d852:	602b      	str	r3, [r5, #0]
 800d854:	f7f7 fa80 	bl	8004d58 <_sbrk>
 800d858:	1c43      	adds	r3, r0, #1
 800d85a:	d102      	bne.n	800d862 <_sbrk_r+0x1a>
 800d85c:	682b      	ldr	r3, [r5, #0]
 800d85e:	b103      	cbz	r3, 800d862 <_sbrk_r+0x1a>
 800d860:	6023      	str	r3, [r4, #0]
 800d862:	bd38      	pop	{r3, r4, r5, pc}
 800d864:	2000793c 	.word	0x2000793c

0800d868 <siprintf>:
 800d868:	b40e      	push	{r1, r2, r3}
 800d86a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d86e:	b500      	push	{lr}
 800d870:	b09c      	sub	sp, #112	; 0x70
 800d872:	ab1d      	add	r3, sp, #116	; 0x74
 800d874:	9002      	str	r0, [sp, #8]
 800d876:	9006      	str	r0, [sp, #24]
 800d878:	9107      	str	r1, [sp, #28]
 800d87a:	9104      	str	r1, [sp, #16]
 800d87c:	4808      	ldr	r0, [pc, #32]	; (800d8a0 <siprintf+0x38>)
 800d87e:	4909      	ldr	r1, [pc, #36]	; (800d8a4 <siprintf+0x3c>)
 800d880:	f853 2b04 	ldr.w	r2, [r3], #4
 800d884:	9105      	str	r1, [sp, #20]
 800d886:	6800      	ldr	r0, [r0, #0]
 800d888:	a902      	add	r1, sp, #8
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	f001 fc1e 	bl	800f0cc <_svfiprintf_r>
 800d890:	2200      	movs	r2, #0
 800d892:	9b02      	ldr	r3, [sp, #8]
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	b01c      	add	sp, #112	; 0x70
 800d898:	f85d eb04 	ldr.w	lr, [sp], #4
 800d89c:	b003      	add	sp, #12
 800d89e:	4770      	bx	lr
 800d8a0:	20000038 	.word	0x20000038
 800d8a4:	ffff0208 	.word	0xffff0208

0800d8a8 <__sread>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b0:	f001 fd0c 	bl	800f2cc <_read_r>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	bfab      	itete	ge
 800d8b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d8bc:	181b      	addge	r3, r3, r0
 800d8be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8c2:	bfac      	ite	ge
 800d8c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8c6:	81a3      	strhlt	r3, [r4, #12]
 800d8c8:	bd10      	pop	{r4, pc}

0800d8ca <__swrite>:
 800d8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ce:	461f      	mov	r7, r3
 800d8d0:	898b      	ldrh	r3, [r1, #12]
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	05db      	lsls	r3, r3, #23
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	4616      	mov	r6, r2
 800d8da:	d505      	bpl.n	800d8e8 <__swrite+0x1e>
 800d8dc:	2302      	movs	r3, #2
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e4:	f000 ff84 	bl	800e7f0 <_lseek_r>
 800d8e8:	89a3      	ldrh	r3, [r4, #12]
 800d8ea:	4632      	mov	r2, r6
 800d8ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8f0:	81a3      	strh	r3, [r4, #12]
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fe:	f000 b817 	b.w	800d930 <_write_r>

0800d902 <__sseek>:
 800d902:	b510      	push	{r4, lr}
 800d904:	460c      	mov	r4, r1
 800d906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d90a:	f000 ff71 	bl	800e7f0 <_lseek_r>
 800d90e:	1c43      	adds	r3, r0, #1
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	bf15      	itete	ne
 800d914:	6560      	strne	r0, [r4, #84]	; 0x54
 800d916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d91a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d91e:	81a3      	strheq	r3, [r4, #12]
 800d920:	bf18      	it	ne
 800d922:	81a3      	strhne	r3, [r4, #12]
 800d924:	bd10      	pop	{r4, pc}

0800d926 <__sclose>:
 800d926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d92a:	f000 b813 	b.w	800d954 <_close_r>
	...

0800d930 <_write_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4604      	mov	r4, r0
 800d934:	4608      	mov	r0, r1
 800d936:	4611      	mov	r1, r2
 800d938:	2200      	movs	r2, #0
 800d93a:	4d05      	ldr	r5, [pc, #20]	; (800d950 <_write_r+0x20>)
 800d93c:	602a      	str	r2, [r5, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f7f7 f9be 	bl	8004cc0 <_write>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d102      	bne.n	800d94e <_write_r+0x1e>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	b103      	cbz	r3, 800d94e <_write_r+0x1e>
 800d94c:	6023      	str	r3, [r4, #0]
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
 800d950:	2000793c 	.word	0x2000793c

0800d954 <_close_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	2300      	movs	r3, #0
 800d958:	4d05      	ldr	r5, [pc, #20]	; (800d970 <_close_r+0x1c>)
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	602b      	str	r3, [r5, #0]
 800d960:	f7f7 f9ca 	bl	8004cf8 <_close>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_close_r+0x1a>
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_close_r+0x1a>
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	2000793c 	.word	0x2000793c

0800d974 <quorem>:
 800d974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d978:	6903      	ldr	r3, [r0, #16]
 800d97a:	690c      	ldr	r4, [r1, #16]
 800d97c:	4607      	mov	r7, r0
 800d97e:	42a3      	cmp	r3, r4
 800d980:	f2c0 8082 	blt.w	800da88 <quorem+0x114>
 800d984:	3c01      	subs	r4, #1
 800d986:	f100 0514 	add.w	r5, r0, #20
 800d98a:	f101 0814 	add.w	r8, r1, #20
 800d98e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d99c:	3301      	adds	r3, #1
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d9a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9ac:	d331      	bcc.n	800da12 <quorem+0x9e>
 800d9ae:	f04f 0e00 	mov.w	lr, #0
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	46ac      	mov	ip, r5
 800d9b6:	46f2      	mov	sl, lr
 800d9b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9bc:	b293      	uxth	r3, r2
 800d9be:	fb06 e303 	mla	r3, r6, r3, lr
 800d9c2:	0c12      	lsrs	r2, r2, #16
 800d9c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	fb06 e202 	mla	r2, r6, r2, lr
 800d9ce:	ebaa 0303 	sub.w	r3, sl, r3
 800d9d2:	f8dc a000 	ldr.w	sl, [ip]
 800d9d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9da:	fa1f fa8a 	uxth.w	sl, sl
 800d9de:	4453      	add	r3, sl
 800d9e0:	f8dc a000 	ldr.w	sl, [ip]
 800d9e4:	b292      	uxth	r2, r2
 800d9e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d9ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9f4:	4581      	cmp	r9, r0
 800d9f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d9fe:	d2db      	bcs.n	800d9b8 <quorem+0x44>
 800da00:	f855 300b 	ldr.w	r3, [r5, fp]
 800da04:	b92b      	cbnz	r3, 800da12 <quorem+0x9e>
 800da06:	9b01      	ldr	r3, [sp, #4]
 800da08:	3b04      	subs	r3, #4
 800da0a:	429d      	cmp	r5, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	d32f      	bcc.n	800da70 <quorem+0xfc>
 800da10:	613c      	str	r4, [r7, #16]
 800da12:	4638      	mov	r0, r7
 800da14:	f001 f99e 	bl	800ed54 <__mcmp>
 800da18:	2800      	cmp	r0, #0
 800da1a:	db25      	blt.n	800da68 <quorem+0xf4>
 800da1c:	4628      	mov	r0, r5
 800da1e:	f04f 0c00 	mov.w	ip, #0
 800da22:	3601      	adds	r6, #1
 800da24:	f858 1b04 	ldr.w	r1, [r8], #4
 800da28:	f8d0 e000 	ldr.w	lr, [r0]
 800da2c:	b28b      	uxth	r3, r1
 800da2e:	ebac 0303 	sub.w	r3, ip, r3
 800da32:	fa1f f28e 	uxth.w	r2, lr
 800da36:	4413      	add	r3, r2
 800da38:	0c0a      	lsrs	r2, r1, #16
 800da3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da42:	b29b      	uxth	r3, r3
 800da44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da48:	45c1      	cmp	r9, r8
 800da4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da4e:	f840 3b04 	str.w	r3, [r0], #4
 800da52:	d2e7      	bcs.n	800da24 <quorem+0xb0>
 800da54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da5c:	b922      	cbnz	r2, 800da68 <quorem+0xf4>
 800da5e:	3b04      	subs	r3, #4
 800da60:	429d      	cmp	r5, r3
 800da62:	461a      	mov	r2, r3
 800da64:	d30a      	bcc.n	800da7c <quorem+0x108>
 800da66:	613c      	str	r4, [r7, #16]
 800da68:	4630      	mov	r0, r6
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da70:	6812      	ldr	r2, [r2, #0]
 800da72:	3b04      	subs	r3, #4
 800da74:	2a00      	cmp	r2, #0
 800da76:	d1cb      	bne.n	800da10 <quorem+0x9c>
 800da78:	3c01      	subs	r4, #1
 800da7a:	e7c6      	b.n	800da0a <quorem+0x96>
 800da7c:	6812      	ldr	r2, [r2, #0]
 800da7e:	3b04      	subs	r3, #4
 800da80:	2a00      	cmp	r2, #0
 800da82:	d1f0      	bne.n	800da66 <quorem+0xf2>
 800da84:	3c01      	subs	r4, #1
 800da86:	e7eb      	b.n	800da60 <quorem+0xec>
 800da88:	2000      	movs	r0, #0
 800da8a:	e7ee      	b.n	800da6a <quorem+0xf6>
 800da8c:	0000      	movs	r0, r0
	...

0800da90 <_dtoa_r>:
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	4616      	mov	r6, r2
 800da96:	461f      	mov	r7, r3
 800da98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800da9a:	b099      	sub	sp, #100	; 0x64
 800da9c:	4605      	mov	r5, r0
 800da9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800daa2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800daa6:	b974      	cbnz	r4, 800dac6 <_dtoa_r+0x36>
 800daa8:	2010      	movs	r0, #16
 800daaa:	f000 feb3 	bl	800e814 <malloc>
 800daae:	4602      	mov	r2, r0
 800dab0:	6268      	str	r0, [r5, #36]	; 0x24
 800dab2:	b920      	cbnz	r0, 800dabe <_dtoa_r+0x2e>
 800dab4:	21ea      	movs	r1, #234	; 0xea
 800dab6:	4ba8      	ldr	r3, [pc, #672]	; (800dd58 <_dtoa_r+0x2c8>)
 800dab8:	48a8      	ldr	r0, [pc, #672]	; (800dd5c <_dtoa_r+0x2cc>)
 800daba:	f001 fc19 	bl	800f2f0 <__assert_func>
 800dabe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dac2:	6004      	str	r4, [r0, #0]
 800dac4:	60c4      	str	r4, [r0, #12]
 800dac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dac8:	6819      	ldr	r1, [r3, #0]
 800daca:	b151      	cbz	r1, 800dae2 <_dtoa_r+0x52>
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	2301      	movs	r3, #1
 800dad0:	4093      	lsls	r3, r2
 800dad2:	604a      	str	r2, [r1, #4]
 800dad4:	608b      	str	r3, [r1, #8]
 800dad6:	4628      	mov	r0, r5
 800dad8:	f000 fefe 	bl	800e8d8 <_Bfree>
 800dadc:	2200      	movs	r2, #0
 800dade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dae0:	601a      	str	r2, [r3, #0]
 800dae2:	1e3b      	subs	r3, r7, #0
 800dae4:	bfaf      	iteee	ge
 800dae6:	2300      	movge	r3, #0
 800dae8:	2201      	movlt	r2, #1
 800daea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800daee:	9305      	strlt	r3, [sp, #20]
 800daf0:	bfa8      	it	ge
 800daf2:	f8c8 3000 	strge.w	r3, [r8]
 800daf6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800dafa:	4b99      	ldr	r3, [pc, #612]	; (800dd60 <_dtoa_r+0x2d0>)
 800dafc:	bfb8      	it	lt
 800dafe:	f8c8 2000 	strlt.w	r2, [r8]
 800db02:	ea33 0309 	bics.w	r3, r3, r9
 800db06:	d119      	bne.n	800db3c <_dtoa_r+0xac>
 800db08:	f242 730f 	movw	r3, #9999	; 0x270f
 800db0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db14:	4333      	orrs	r3, r6
 800db16:	f000 857f 	beq.w	800e618 <_dtoa_r+0xb88>
 800db1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db1c:	b953      	cbnz	r3, 800db34 <_dtoa_r+0xa4>
 800db1e:	4b91      	ldr	r3, [pc, #580]	; (800dd64 <_dtoa_r+0x2d4>)
 800db20:	e022      	b.n	800db68 <_dtoa_r+0xd8>
 800db22:	4b91      	ldr	r3, [pc, #580]	; (800dd68 <_dtoa_r+0x2d8>)
 800db24:	9303      	str	r3, [sp, #12]
 800db26:	3308      	adds	r3, #8
 800db28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	9803      	ldr	r0, [sp, #12]
 800db2e:	b019      	add	sp, #100	; 0x64
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	4b8b      	ldr	r3, [pc, #556]	; (800dd64 <_dtoa_r+0x2d4>)
 800db36:	9303      	str	r3, [sp, #12]
 800db38:	3303      	adds	r3, #3
 800db3a:	e7f5      	b.n	800db28 <_dtoa_r+0x98>
 800db3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800db40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800db44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db48:	2200      	movs	r2, #0
 800db4a:	2300      	movs	r3, #0
 800db4c:	f7f2 ff9c 	bl	8000a88 <__aeabi_dcmpeq>
 800db50:	4680      	mov	r8, r0
 800db52:	b158      	cbz	r0, 800db6c <_dtoa_r+0xdc>
 800db54:	2301      	movs	r3, #1
 800db56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800db58:	6013      	str	r3, [r2, #0]
 800db5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 8558 	beq.w	800e612 <_dtoa_r+0xb82>
 800db62:	4882      	ldr	r0, [pc, #520]	; (800dd6c <_dtoa_r+0x2dc>)
 800db64:	6018      	str	r0, [r3, #0]
 800db66:	1e43      	subs	r3, r0, #1
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	e7df      	b.n	800db2c <_dtoa_r+0x9c>
 800db6c:	ab16      	add	r3, sp, #88	; 0x58
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	ab17      	add	r3, sp, #92	; 0x5c
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	4628      	mov	r0, r5
 800db76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800db7a:	f001 f993 	bl	800eea4 <__d2b>
 800db7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800db82:	4683      	mov	fp, r0
 800db84:	2c00      	cmp	r4, #0
 800db86:	d07f      	beq.n	800dc88 <_dtoa_r+0x1f8>
 800db88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800db92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800db9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800db9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800dba2:	2200      	movs	r2, #0
 800dba4:	4b72      	ldr	r3, [pc, #456]	; (800dd70 <_dtoa_r+0x2e0>)
 800dba6:	f7f2 fb4f 	bl	8000248 <__aeabi_dsub>
 800dbaa:	a365      	add	r3, pc, #404	; (adr r3, 800dd40 <_dtoa_r+0x2b0>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	f7f2 fd02 	bl	80005b8 <__aeabi_dmul>
 800dbb4:	a364      	add	r3, pc, #400	; (adr r3, 800dd48 <_dtoa_r+0x2b8>)
 800dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbba:	f7f2 fb47 	bl	800024c <__adddf3>
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	460f      	mov	r7, r1
 800dbc4:	f7f2 fc8e 	bl	80004e4 <__aeabi_i2d>
 800dbc8:	a361      	add	r3, pc, #388	; (adr r3, 800dd50 <_dtoa_r+0x2c0>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f7f2 fcf3 	bl	80005b8 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	4639      	mov	r1, r7
 800dbda:	f7f2 fb37 	bl	800024c <__adddf3>
 800dbde:	4606      	mov	r6, r0
 800dbe0:	460f      	mov	r7, r1
 800dbe2:	f7f2 ff99 	bl	8000b18 <__aeabi_d2iz>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	4682      	mov	sl, r0
 800dbea:	2300      	movs	r3, #0
 800dbec:	4630      	mov	r0, r6
 800dbee:	4639      	mov	r1, r7
 800dbf0:	f7f2 ff54 	bl	8000a9c <__aeabi_dcmplt>
 800dbf4:	b148      	cbz	r0, 800dc0a <_dtoa_r+0x17a>
 800dbf6:	4650      	mov	r0, sl
 800dbf8:	f7f2 fc74 	bl	80004e4 <__aeabi_i2d>
 800dbfc:	4632      	mov	r2, r6
 800dbfe:	463b      	mov	r3, r7
 800dc00:	f7f2 ff42 	bl	8000a88 <__aeabi_dcmpeq>
 800dc04:	b908      	cbnz	r0, 800dc0a <_dtoa_r+0x17a>
 800dc06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc0a:	f1ba 0f16 	cmp.w	sl, #22
 800dc0e:	d858      	bhi.n	800dcc2 <_dtoa_r+0x232>
 800dc10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc14:	4b57      	ldr	r3, [pc, #348]	; (800dd74 <_dtoa_r+0x2e4>)
 800dc16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	f7f2 ff3d 	bl	8000a9c <__aeabi_dcmplt>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d04f      	beq.n	800dcc6 <_dtoa_r+0x236>
 800dc26:	2300      	movs	r3, #0
 800dc28:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc30:	1b1c      	subs	r4, r3, r4
 800dc32:	1e63      	subs	r3, r4, #1
 800dc34:	9309      	str	r3, [sp, #36]	; 0x24
 800dc36:	bf49      	itett	mi
 800dc38:	f1c4 0301 	rsbmi	r3, r4, #1
 800dc3c:	2300      	movpl	r3, #0
 800dc3e:	9306      	strmi	r3, [sp, #24]
 800dc40:	2300      	movmi	r3, #0
 800dc42:	bf54      	ite	pl
 800dc44:	9306      	strpl	r3, [sp, #24]
 800dc46:	9309      	strmi	r3, [sp, #36]	; 0x24
 800dc48:	f1ba 0f00 	cmp.w	sl, #0
 800dc4c:	db3d      	blt.n	800dcca <_dtoa_r+0x23a>
 800dc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800dc54:	4453      	add	r3, sl
 800dc56:	9309      	str	r3, [sp, #36]	; 0x24
 800dc58:	2300      	movs	r3, #0
 800dc5a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc5e:	2b09      	cmp	r3, #9
 800dc60:	f200 808c 	bhi.w	800dd7c <_dtoa_r+0x2ec>
 800dc64:	2b05      	cmp	r3, #5
 800dc66:	bfc4      	itt	gt
 800dc68:	3b04      	subgt	r3, #4
 800dc6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800dc6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc6e:	bfc8      	it	gt
 800dc70:	2400      	movgt	r4, #0
 800dc72:	f1a3 0302 	sub.w	r3, r3, #2
 800dc76:	bfd8      	it	le
 800dc78:	2401      	movle	r4, #1
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	f200 808a 	bhi.w	800dd94 <_dtoa_r+0x304>
 800dc80:	e8df f003 	tbb	[pc, r3]
 800dc84:	5b4d4f2d 	.word	0x5b4d4f2d
 800dc88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800dc8c:	441c      	add	r4, r3
 800dc8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800dc92:	2b20      	cmp	r3, #32
 800dc94:	bfc3      	ittte	gt
 800dc96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc9a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800dc9e:	fa09 f303 	lslgt.w	r3, r9, r3
 800dca2:	f1c3 0320 	rsble	r3, r3, #32
 800dca6:	bfc6      	itte	gt
 800dca8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dcac:	4318      	orrgt	r0, r3
 800dcae:	fa06 f003 	lslle.w	r0, r6, r3
 800dcb2:	f7f2 fc07 	bl	80004c4 <__aeabi_ui2d>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800dcbc:	3c01      	subs	r4, #1
 800dcbe:	9313      	str	r3, [sp, #76]	; 0x4c
 800dcc0:	e76f      	b.n	800dba2 <_dtoa_r+0x112>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e7b2      	b.n	800dc2c <_dtoa_r+0x19c>
 800dcc6:	900f      	str	r0, [sp, #60]	; 0x3c
 800dcc8:	e7b1      	b.n	800dc2e <_dtoa_r+0x19e>
 800dcca:	9b06      	ldr	r3, [sp, #24]
 800dccc:	eba3 030a 	sub.w	r3, r3, sl
 800dcd0:	9306      	str	r3, [sp, #24]
 800dcd2:	f1ca 0300 	rsb	r3, sl, #0
 800dcd6:	930a      	str	r3, [sp, #40]	; 0x28
 800dcd8:	2300      	movs	r3, #0
 800dcda:	930e      	str	r3, [sp, #56]	; 0x38
 800dcdc:	e7be      	b.n	800dc5c <_dtoa_r+0x1cc>
 800dcde:	2300      	movs	r3, #0
 800dce0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	dc58      	bgt.n	800dd9a <_dtoa_r+0x30a>
 800dce8:	f04f 0901 	mov.w	r9, #1
 800dcec:	464b      	mov	r3, r9
 800dcee:	f8cd 9020 	str.w	r9, [sp, #32]
 800dcf2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800dcfa:	6042      	str	r2, [r0, #4]
 800dcfc:	2204      	movs	r2, #4
 800dcfe:	f102 0614 	add.w	r6, r2, #20
 800dd02:	429e      	cmp	r6, r3
 800dd04:	6841      	ldr	r1, [r0, #4]
 800dd06:	d94e      	bls.n	800dda6 <_dtoa_r+0x316>
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f000 fda5 	bl	800e858 <_Balloc>
 800dd0e:	9003      	str	r0, [sp, #12]
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d14c      	bne.n	800ddae <_dtoa_r+0x31e>
 800dd14:	4602      	mov	r2, r0
 800dd16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd1a:	4b17      	ldr	r3, [pc, #92]	; (800dd78 <_dtoa_r+0x2e8>)
 800dd1c:	e6cc      	b.n	800dab8 <_dtoa_r+0x28>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e7de      	b.n	800dce0 <_dtoa_r+0x250>
 800dd22:	2300      	movs	r3, #0
 800dd24:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd28:	eb0a 0903 	add.w	r9, sl, r3
 800dd2c:	f109 0301 	add.w	r3, r9, #1
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	9308      	str	r3, [sp, #32]
 800dd34:	bfb8      	it	lt
 800dd36:	2301      	movlt	r3, #1
 800dd38:	e7dd      	b.n	800dcf6 <_dtoa_r+0x266>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e7f2      	b.n	800dd24 <_dtoa_r+0x294>
 800dd3e:	bf00      	nop
 800dd40:	636f4361 	.word	0x636f4361
 800dd44:	3fd287a7 	.word	0x3fd287a7
 800dd48:	8b60c8b3 	.word	0x8b60c8b3
 800dd4c:	3fc68a28 	.word	0x3fc68a28
 800dd50:	509f79fb 	.word	0x509f79fb
 800dd54:	3fd34413 	.word	0x3fd34413
 800dd58:	0801175d 	.word	0x0801175d
 800dd5c:	08011774 	.word	0x08011774
 800dd60:	7ff00000 	.word	0x7ff00000
 800dd64:	08011759 	.word	0x08011759
 800dd68:	08011750 	.word	0x08011750
 800dd6c:	0801172d 	.word	0x0801172d
 800dd70:	3ff80000 	.word	0x3ff80000
 800dd74:	08011868 	.word	0x08011868
 800dd78:	080117cf 	.word	0x080117cf
 800dd7c:	2401      	movs	r4, #1
 800dd7e:	2300      	movs	r3, #0
 800dd80:	940b      	str	r4, [sp, #44]	; 0x2c
 800dd82:	9322      	str	r3, [sp, #136]	; 0x88
 800dd84:	f04f 39ff 	mov.w	r9, #4294967295
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2312      	movs	r3, #18
 800dd8c:	f8cd 9020 	str.w	r9, [sp, #32]
 800dd90:	9223      	str	r2, [sp, #140]	; 0x8c
 800dd92:	e7b0      	b.n	800dcf6 <_dtoa_r+0x266>
 800dd94:	2301      	movs	r3, #1
 800dd96:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd98:	e7f4      	b.n	800dd84 <_dtoa_r+0x2f4>
 800dd9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800dd9e:	464b      	mov	r3, r9
 800dda0:	f8cd 9020 	str.w	r9, [sp, #32]
 800dda4:	e7a7      	b.n	800dcf6 <_dtoa_r+0x266>
 800dda6:	3101      	adds	r1, #1
 800dda8:	6041      	str	r1, [r0, #4]
 800ddaa:	0052      	lsls	r2, r2, #1
 800ddac:	e7a7      	b.n	800dcfe <_dtoa_r+0x26e>
 800ddae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ddb0:	9a03      	ldr	r2, [sp, #12]
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	9b08      	ldr	r3, [sp, #32]
 800ddb6:	2b0e      	cmp	r3, #14
 800ddb8:	f200 80a8 	bhi.w	800df0c <_dtoa_r+0x47c>
 800ddbc:	2c00      	cmp	r4, #0
 800ddbe:	f000 80a5 	beq.w	800df0c <_dtoa_r+0x47c>
 800ddc2:	f1ba 0f00 	cmp.w	sl, #0
 800ddc6:	dd34      	ble.n	800de32 <_dtoa_r+0x3a2>
 800ddc8:	4a9a      	ldr	r2, [pc, #616]	; (800e034 <_dtoa_r+0x5a4>)
 800ddca:	f00a 030f 	and.w	r3, sl, #15
 800ddce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ddd2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ddd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ddda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ddde:	ea4f 142a 	mov.w	r4, sl, asr #4
 800dde2:	d016      	beq.n	800de12 <_dtoa_r+0x382>
 800dde4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dde8:	4b93      	ldr	r3, [pc, #588]	; (800e038 <_dtoa_r+0x5a8>)
 800ddea:	2703      	movs	r7, #3
 800ddec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddf0:	f7f2 fd0c 	bl	800080c <__aeabi_ddiv>
 800ddf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddf8:	f004 040f 	and.w	r4, r4, #15
 800ddfc:	4e8e      	ldr	r6, [pc, #568]	; (800e038 <_dtoa_r+0x5a8>)
 800ddfe:	b954      	cbnz	r4, 800de16 <_dtoa_r+0x386>
 800de00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800de04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de08:	f7f2 fd00 	bl	800080c <__aeabi_ddiv>
 800de0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de10:	e029      	b.n	800de66 <_dtoa_r+0x3d6>
 800de12:	2702      	movs	r7, #2
 800de14:	e7f2      	b.n	800ddfc <_dtoa_r+0x36c>
 800de16:	07e1      	lsls	r1, r4, #31
 800de18:	d508      	bpl.n	800de2c <_dtoa_r+0x39c>
 800de1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de22:	f7f2 fbc9 	bl	80005b8 <__aeabi_dmul>
 800de26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800de2a:	3701      	adds	r7, #1
 800de2c:	1064      	asrs	r4, r4, #1
 800de2e:	3608      	adds	r6, #8
 800de30:	e7e5      	b.n	800ddfe <_dtoa_r+0x36e>
 800de32:	f000 80a5 	beq.w	800df80 <_dtoa_r+0x4f0>
 800de36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de3a:	f1ca 0400 	rsb	r4, sl, #0
 800de3e:	4b7d      	ldr	r3, [pc, #500]	; (800e034 <_dtoa_r+0x5a4>)
 800de40:	f004 020f 	and.w	r2, r4, #15
 800de44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	f7f2 fbb4 	bl	80005b8 <__aeabi_dmul>
 800de50:	2702      	movs	r7, #2
 800de52:	2300      	movs	r3, #0
 800de54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de58:	4e77      	ldr	r6, [pc, #476]	; (800e038 <_dtoa_r+0x5a8>)
 800de5a:	1124      	asrs	r4, r4, #4
 800de5c:	2c00      	cmp	r4, #0
 800de5e:	f040 8084 	bne.w	800df6a <_dtoa_r+0x4da>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1d2      	bne.n	800de0c <_dtoa_r+0x37c>
 800de66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f000 808b 	beq.w	800df84 <_dtoa_r+0x4f4>
 800de6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800de72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800de76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de7a:	2200      	movs	r2, #0
 800de7c:	4b6f      	ldr	r3, [pc, #444]	; (800e03c <_dtoa_r+0x5ac>)
 800de7e:	f7f2 fe0d 	bl	8000a9c <__aeabi_dcmplt>
 800de82:	2800      	cmp	r0, #0
 800de84:	d07e      	beq.n	800df84 <_dtoa_r+0x4f4>
 800de86:	9b08      	ldr	r3, [sp, #32]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d07b      	beq.n	800df84 <_dtoa_r+0x4f4>
 800de8c:	f1b9 0f00 	cmp.w	r9, #0
 800de90:	dd38      	ble.n	800df04 <_dtoa_r+0x474>
 800de92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de96:	2200      	movs	r2, #0
 800de98:	4b69      	ldr	r3, [pc, #420]	; (800e040 <_dtoa_r+0x5b0>)
 800de9a:	f7f2 fb8d 	bl	80005b8 <__aeabi_dmul>
 800de9e:	464c      	mov	r4, r9
 800dea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dea4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800dea8:	3701      	adds	r7, #1
 800deaa:	4638      	mov	r0, r7
 800deac:	f7f2 fb1a 	bl	80004e4 <__aeabi_i2d>
 800deb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deb4:	f7f2 fb80 	bl	80005b8 <__aeabi_dmul>
 800deb8:	2200      	movs	r2, #0
 800deba:	4b62      	ldr	r3, [pc, #392]	; (800e044 <_dtoa_r+0x5b4>)
 800debc:	f7f2 f9c6 	bl	800024c <__adddf3>
 800dec0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dec4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dec8:	9611      	str	r6, [sp, #68]	; 0x44
 800deca:	2c00      	cmp	r4, #0
 800decc:	d15d      	bne.n	800df8a <_dtoa_r+0x4fa>
 800dece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ded2:	2200      	movs	r2, #0
 800ded4:	4b5c      	ldr	r3, [pc, #368]	; (800e048 <_dtoa_r+0x5b8>)
 800ded6:	f7f2 f9b7 	bl	8000248 <__aeabi_dsub>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dee2:	4633      	mov	r3, r6
 800dee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dee6:	f7f2 fdf7 	bl	8000ad8 <__aeabi_dcmpgt>
 800deea:	2800      	cmp	r0, #0
 800deec:	f040 829c 	bne.w	800e428 <_dtoa_r+0x998>
 800def0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800def4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800def6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800defa:	f7f2 fdcf 	bl	8000a9c <__aeabi_dcmplt>
 800defe:	2800      	cmp	r0, #0
 800df00:	f040 8290 	bne.w	800e424 <_dtoa_r+0x994>
 800df04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800df08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800df0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f2c0 8152 	blt.w	800e1b8 <_dtoa_r+0x728>
 800df14:	f1ba 0f0e 	cmp.w	sl, #14
 800df18:	f300 814e 	bgt.w	800e1b8 <_dtoa_r+0x728>
 800df1c:	4b45      	ldr	r3, [pc, #276]	; (800e034 <_dtoa_r+0x5a4>)
 800df1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df22:	e9d3 3400 	ldrd	r3, r4, [r3]
 800df26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800df2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f280 80db 	bge.w	800e0e8 <_dtoa_r+0x658>
 800df32:	9b08      	ldr	r3, [sp, #32]
 800df34:	2b00      	cmp	r3, #0
 800df36:	f300 80d7 	bgt.w	800e0e8 <_dtoa_r+0x658>
 800df3a:	f040 8272 	bne.w	800e422 <_dtoa_r+0x992>
 800df3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df42:	2200      	movs	r2, #0
 800df44:	4b40      	ldr	r3, [pc, #256]	; (800e048 <_dtoa_r+0x5b8>)
 800df46:	f7f2 fb37 	bl	80005b8 <__aeabi_dmul>
 800df4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df4e:	f7f2 fdb9 	bl	8000ac4 <__aeabi_dcmpge>
 800df52:	9c08      	ldr	r4, [sp, #32]
 800df54:	4626      	mov	r6, r4
 800df56:	2800      	cmp	r0, #0
 800df58:	f040 8248 	bne.w	800e3ec <_dtoa_r+0x95c>
 800df5c:	2331      	movs	r3, #49	; 0x31
 800df5e:	9f03      	ldr	r7, [sp, #12]
 800df60:	f10a 0a01 	add.w	sl, sl, #1
 800df64:	f807 3b01 	strb.w	r3, [r7], #1
 800df68:	e244      	b.n	800e3f4 <_dtoa_r+0x964>
 800df6a:	07e2      	lsls	r2, r4, #31
 800df6c:	d505      	bpl.n	800df7a <_dtoa_r+0x4ea>
 800df6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df72:	f7f2 fb21 	bl	80005b8 <__aeabi_dmul>
 800df76:	2301      	movs	r3, #1
 800df78:	3701      	adds	r7, #1
 800df7a:	1064      	asrs	r4, r4, #1
 800df7c:	3608      	adds	r6, #8
 800df7e:	e76d      	b.n	800de5c <_dtoa_r+0x3cc>
 800df80:	2702      	movs	r7, #2
 800df82:	e770      	b.n	800de66 <_dtoa_r+0x3d6>
 800df84:	46d0      	mov	r8, sl
 800df86:	9c08      	ldr	r4, [sp, #32]
 800df88:	e78f      	b.n	800deaa <_dtoa_r+0x41a>
 800df8a:	9903      	ldr	r1, [sp, #12]
 800df8c:	4b29      	ldr	r3, [pc, #164]	; (800e034 <_dtoa_r+0x5a4>)
 800df8e:	4421      	add	r1, r4
 800df90:	9112      	str	r1, [sp, #72]	; 0x48
 800df92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800df9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfa0:	2900      	cmp	r1, #0
 800dfa2:	d055      	beq.n	800e050 <_dtoa_r+0x5c0>
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	4929      	ldr	r1, [pc, #164]	; (800e04c <_dtoa_r+0x5bc>)
 800dfa8:	f7f2 fc30 	bl	800080c <__aeabi_ddiv>
 800dfac:	463b      	mov	r3, r7
 800dfae:	4632      	mov	r2, r6
 800dfb0:	f7f2 f94a 	bl	8000248 <__aeabi_dsub>
 800dfb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dfb8:	9f03      	ldr	r7, [sp, #12]
 800dfba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfbe:	f7f2 fdab 	bl	8000b18 <__aeabi_d2iz>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	f7f2 fa8e 	bl	80004e4 <__aeabi_i2d>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfd0:	f7f2 f93a 	bl	8000248 <__aeabi_dsub>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	3430      	adds	r4, #48	; 0x30
 800dfda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfe2:	f807 4b01 	strb.w	r4, [r7], #1
 800dfe6:	f7f2 fd59 	bl	8000a9c <__aeabi_dcmplt>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d174      	bne.n	800e0d8 <_dtoa_r+0x648>
 800dfee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dff2:	2000      	movs	r0, #0
 800dff4:	4911      	ldr	r1, [pc, #68]	; (800e03c <_dtoa_r+0x5ac>)
 800dff6:	f7f2 f927 	bl	8000248 <__aeabi_dsub>
 800dffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dffe:	f7f2 fd4d 	bl	8000a9c <__aeabi_dcmplt>
 800e002:	2800      	cmp	r0, #0
 800e004:	f040 80b7 	bne.w	800e176 <_dtoa_r+0x6e6>
 800e008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e00a:	429f      	cmp	r7, r3
 800e00c:	f43f af7a 	beq.w	800df04 <_dtoa_r+0x474>
 800e010:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e014:	2200      	movs	r2, #0
 800e016:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <_dtoa_r+0x5b0>)
 800e018:	f7f2 face 	bl	80005b8 <__aeabi_dmul>
 800e01c:	2200      	movs	r2, #0
 800e01e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e026:	4b06      	ldr	r3, [pc, #24]	; (800e040 <_dtoa_r+0x5b0>)
 800e028:	f7f2 fac6 	bl	80005b8 <__aeabi_dmul>
 800e02c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e030:	e7c3      	b.n	800dfba <_dtoa_r+0x52a>
 800e032:	bf00      	nop
 800e034:	08011868 	.word	0x08011868
 800e038:	08011840 	.word	0x08011840
 800e03c:	3ff00000 	.word	0x3ff00000
 800e040:	40240000 	.word	0x40240000
 800e044:	401c0000 	.word	0x401c0000
 800e048:	40140000 	.word	0x40140000
 800e04c:	3fe00000 	.word	0x3fe00000
 800e050:	4630      	mov	r0, r6
 800e052:	4639      	mov	r1, r7
 800e054:	f7f2 fab0 	bl	80005b8 <__aeabi_dmul>
 800e058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e05a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e05e:	9c03      	ldr	r4, [sp, #12]
 800e060:	9314      	str	r3, [sp, #80]	; 0x50
 800e062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e066:	f7f2 fd57 	bl	8000b18 <__aeabi_d2iz>
 800e06a:	9015      	str	r0, [sp, #84]	; 0x54
 800e06c:	f7f2 fa3a 	bl	80004e4 <__aeabi_i2d>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e078:	f7f2 f8e6 	bl	8000248 <__aeabi_dsub>
 800e07c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e07e:	4606      	mov	r6, r0
 800e080:	3330      	adds	r3, #48	; 0x30
 800e082:	f804 3b01 	strb.w	r3, [r4], #1
 800e086:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e088:	460f      	mov	r7, r1
 800e08a:	429c      	cmp	r4, r3
 800e08c:	f04f 0200 	mov.w	r2, #0
 800e090:	d124      	bne.n	800e0dc <_dtoa_r+0x64c>
 800e092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e096:	4bb0      	ldr	r3, [pc, #704]	; (800e358 <_dtoa_r+0x8c8>)
 800e098:	f7f2 f8d8 	bl	800024c <__adddf3>
 800e09c:	4602      	mov	r2, r0
 800e09e:	460b      	mov	r3, r1
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	f7f2 fd18 	bl	8000ad8 <__aeabi_dcmpgt>
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d163      	bne.n	800e174 <_dtoa_r+0x6e4>
 800e0ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	49a9      	ldr	r1, [pc, #676]	; (800e358 <_dtoa_r+0x8c8>)
 800e0b4:	f7f2 f8c8 	bl	8000248 <__aeabi_dsub>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	4630      	mov	r0, r6
 800e0be:	4639      	mov	r1, r7
 800e0c0:	f7f2 fcec 	bl	8000a9c <__aeabi_dcmplt>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	f43f af1d 	beq.w	800df04 <_dtoa_r+0x474>
 800e0ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e0cc:	1e7b      	subs	r3, r7, #1
 800e0ce:	9314      	str	r3, [sp, #80]	; 0x50
 800e0d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e0d4:	2b30      	cmp	r3, #48	; 0x30
 800e0d6:	d0f8      	beq.n	800e0ca <_dtoa_r+0x63a>
 800e0d8:	46c2      	mov	sl, r8
 800e0da:	e03b      	b.n	800e154 <_dtoa_r+0x6c4>
 800e0dc:	4b9f      	ldr	r3, [pc, #636]	; (800e35c <_dtoa_r+0x8cc>)
 800e0de:	f7f2 fa6b 	bl	80005b8 <__aeabi_dmul>
 800e0e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0e6:	e7bc      	b.n	800e062 <_dtoa_r+0x5d2>
 800e0e8:	9f03      	ldr	r7, [sp, #12]
 800e0ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e0ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	4649      	mov	r1, r9
 800e0f6:	f7f2 fb89 	bl	800080c <__aeabi_ddiv>
 800e0fa:	f7f2 fd0d 	bl	8000b18 <__aeabi_d2iz>
 800e0fe:	4604      	mov	r4, r0
 800e100:	f7f2 f9f0 	bl	80004e4 <__aeabi_i2d>
 800e104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e108:	f7f2 fa56 	bl	80005b8 <__aeabi_dmul>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4640      	mov	r0, r8
 800e112:	4649      	mov	r1, r9
 800e114:	f7f2 f898 	bl	8000248 <__aeabi_dsub>
 800e118:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e11c:	f807 6b01 	strb.w	r6, [r7], #1
 800e120:	9e03      	ldr	r6, [sp, #12]
 800e122:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e126:	1bbe      	subs	r6, r7, r6
 800e128:	45b4      	cmp	ip, r6
 800e12a:	4602      	mov	r2, r0
 800e12c:	460b      	mov	r3, r1
 800e12e:	d136      	bne.n	800e19e <_dtoa_r+0x70e>
 800e130:	f7f2 f88c 	bl	800024c <__adddf3>
 800e134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e138:	4680      	mov	r8, r0
 800e13a:	4689      	mov	r9, r1
 800e13c:	f7f2 fccc 	bl	8000ad8 <__aeabi_dcmpgt>
 800e140:	bb58      	cbnz	r0, 800e19a <_dtoa_r+0x70a>
 800e142:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e146:	4640      	mov	r0, r8
 800e148:	4649      	mov	r1, r9
 800e14a:	f7f2 fc9d 	bl	8000a88 <__aeabi_dcmpeq>
 800e14e:	b108      	cbz	r0, 800e154 <_dtoa_r+0x6c4>
 800e150:	07e1      	lsls	r1, r4, #31
 800e152:	d422      	bmi.n	800e19a <_dtoa_r+0x70a>
 800e154:	4628      	mov	r0, r5
 800e156:	4659      	mov	r1, fp
 800e158:	f000 fbbe 	bl	800e8d8 <_Bfree>
 800e15c:	2300      	movs	r3, #0
 800e15e:	703b      	strb	r3, [r7, #0]
 800e160:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e162:	f10a 0001 	add.w	r0, sl, #1
 800e166:	6018      	str	r0, [r3, #0]
 800e168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f43f acde 	beq.w	800db2c <_dtoa_r+0x9c>
 800e170:	601f      	str	r7, [r3, #0]
 800e172:	e4db      	b.n	800db2c <_dtoa_r+0x9c>
 800e174:	4627      	mov	r7, r4
 800e176:	463b      	mov	r3, r7
 800e178:	461f      	mov	r7, r3
 800e17a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e17e:	2a39      	cmp	r2, #57	; 0x39
 800e180:	d107      	bne.n	800e192 <_dtoa_r+0x702>
 800e182:	9a03      	ldr	r2, [sp, #12]
 800e184:	429a      	cmp	r2, r3
 800e186:	d1f7      	bne.n	800e178 <_dtoa_r+0x6e8>
 800e188:	2230      	movs	r2, #48	; 0x30
 800e18a:	9903      	ldr	r1, [sp, #12]
 800e18c:	f108 0801 	add.w	r8, r8, #1
 800e190:	700a      	strb	r2, [r1, #0]
 800e192:	781a      	ldrb	r2, [r3, #0]
 800e194:	3201      	adds	r2, #1
 800e196:	701a      	strb	r2, [r3, #0]
 800e198:	e79e      	b.n	800e0d8 <_dtoa_r+0x648>
 800e19a:	46d0      	mov	r8, sl
 800e19c:	e7eb      	b.n	800e176 <_dtoa_r+0x6e6>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	4b6e      	ldr	r3, [pc, #440]	; (800e35c <_dtoa_r+0x8cc>)
 800e1a2:	f7f2 fa09 	bl	80005b8 <__aeabi_dmul>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	4680      	mov	r8, r0
 800e1ac:	4689      	mov	r9, r1
 800e1ae:	f7f2 fc6b 	bl	8000a88 <__aeabi_dcmpeq>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d09b      	beq.n	800e0ee <_dtoa_r+0x65e>
 800e1b6:	e7cd      	b.n	800e154 <_dtoa_r+0x6c4>
 800e1b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e1ba:	2a00      	cmp	r2, #0
 800e1bc:	f000 80d0 	beq.w	800e360 <_dtoa_r+0x8d0>
 800e1c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e1c2:	2a01      	cmp	r2, #1
 800e1c4:	f300 80ae 	bgt.w	800e324 <_dtoa_r+0x894>
 800e1c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	f000 80a6 	beq.w	800e31c <_dtoa_r+0x88c>
 800e1d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e1d6:	9f06      	ldr	r7, [sp, #24]
 800e1d8:	9a06      	ldr	r2, [sp, #24]
 800e1da:	2101      	movs	r1, #1
 800e1dc:	441a      	add	r2, r3
 800e1de:	9206      	str	r2, [sp, #24]
 800e1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	441a      	add	r2, r3
 800e1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e8:	f000 fc2c 	bl	800ea44 <__i2b>
 800e1ec:	4606      	mov	r6, r0
 800e1ee:	2f00      	cmp	r7, #0
 800e1f0:	dd0c      	ble.n	800e20c <_dtoa_r+0x77c>
 800e1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd09      	ble.n	800e20c <_dtoa_r+0x77c>
 800e1f8:	42bb      	cmp	r3, r7
 800e1fa:	bfa8      	it	ge
 800e1fc:	463b      	movge	r3, r7
 800e1fe:	9a06      	ldr	r2, [sp, #24]
 800e200:	1aff      	subs	r7, r7, r3
 800e202:	1ad2      	subs	r2, r2, r3
 800e204:	9206      	str	r2, [sp, #24]
 800e206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	9309      	str	r3, [sp, #36]	; 0x24
 800e20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20e:	b1f3      	cbz	r3, 800e24e <_dtoa_r+0x7be>
 800e210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 80a8 	beq.w	800e368 <_dtoa_r+0x8d8>
 800e218:	2c00      	cmp	r4, #0
 800e21a:	dd10      	ble.n	800e23e <_dtoa_r+0x7ae>
 800e21c:	4631      	mov	r1, r6
 800e21e:	4622      	mov	r2, r4
 800e220:	4628      	mov	r0, r5
 800e222:	f000 fccd 	bl	800ebc0 <__pow5mult>
 800e226:	465a      	mov	r2, fp
 800e228:	4601      	mov	r1, r0
 800e22a:	4606      	mov	r6, r0
 800e22c:	4628      	mov	r0, r5
 800e22e:	f000 fc1f 	bl	800ea70 <__multiply>
 800e232:	4680      	mov	r8, r0
 800e234:	4659      	mov	r1, fp
 800e236:	4628      	mov	r0, r5
 800e238:	f000 fb4e 	bl	800e8d8 <_Bfree>
 800e23c:	46c3      	mov	fp, r8
 800e23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e240:	1b1a      	subs	r2, r3, r4
 800e242:	d004      	beq.n	800e24e <_dtoa_r+0x7be>
 800e244:	4659      	mov	r1, fp
 800e246:	4628      	mov	r0, r5
 800e248:	f000 fcba 	bl	800ebc0 <__pow5mult>
 800e24c:	4683      	mov	fp, r0
 800e24e:	2101      	movs	r1, #1
 800e250:	4628      	mov	r0, r5
 800e252:	f000 fbf7 	bl	800ea44 <__i2b>
 800e256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e258:	4604      	mov	r4, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f340 8086 	ble.w	800e36c <_dtoa_r+0x8dc>
 800e260:	461a      	mov	r2, r3
 800e262:	4601      	mov	r1, r0
 800e264:	4628      	mov	r0, r5
 800e266:	f000 fcab 	bl	800ebc0 <__pow5mult>
 800e26a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e26c:	4604      	mov	r4, r0
 800e26e:	2b01      	cmp	r3, #1
 800e270:	dd7f      	ble.n	800e372 <_dtoa_r+0x8e2>
 800e272:	f04f 0800 	mov.w	r8, #0
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e27c:	6918      	ldr	r0, [r3, #16]
 800e27e:	f000 fb93 	bl	800e9a8 <__hi0bits>
 800e282:	f1c0 0020 	rsb	r0, r0, #32
 800e286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e288:	4418      	add	r0, r3
 800e28a:	f010 001f 	ands.w	r0, r0, #31
 800e28e:	f000 8092 	beq.w	800e3b6 <_dtoa_r+0x926>
 800e292:	f1c0 0320 	rsb	r3, r0, #32
 800e296:	2b04      	cmp	r3, #4
 800e298:	f340 808a 	ble.w	800e3b0 <_dtoa_r+0x920>
 800e29c:	f1c0 001c 	rsb	r0, r0, #28
 800e2a0:	9b06      	ldr	r3, [sp, #24]
 800e2a2:	4407      	add	r7, r0
 800e2a4:	4403      	add	r3, r0
 800e2a6:	9306      	str	r3, [sp, #24]
 800e2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2aa:	4403      	add	r3, r0
 800e2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ae:	9b06      	ldr	r3, [sp, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dd05      	ble.n	800e2c0 <_dtoa_r+0x830>
 800e2b4:	4659      	mov	r1, fp
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	f000 fcdb 	bl	800ec74 <__lshift>
 800e2be:	4683      	mov	fp, r0
 800e2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	dd05      	ble.n	800e2d2 <_dtoa_r+0x842>
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f000 fcd2 	bl	800ec74 <__lshift>
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d070      	beq.n	800e3ba <_dtoa_r+0x92a>
 800e2d8:	4621      	mov	r1, r4
 800e2da:	4658      	mov	r0, fp
 800e2dc:	f000 fd3a 	bl	800ed54 <__mcmp>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	da6a      	bge.n	800e3ba <_dtoa_r+0x92a>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4659      	mov	r1, fp
 800e2e8:	220a      	movs	r2, #10
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f000 fb16 	bl	800e91c <__multadd>
 800e2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2f2:	4683      	mov	fp, r0
 800e2f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 8194 	beq.w	800e626 <_dtoa_r+0xb96>
 800e2fe:	4631      	mov	r1, r6
 800e300:	2300      	movs	r3, #0
 800e302:	220a      	movs	r2, #10
 800e304:	4628      	mov	r0, r5
 800e306:	f000 fb09 	bl	800e91c <__multadd>
 800e30a:	f1b9 0f00 	cmp.w	r9, #0
 800e30e:	4606      	mov	r6, r0
 800e310:	f300 8093 	bgt.w	800e43a <_dtoa_r+0x9aa>
 800e314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e316:	2b02      	cmp	r3, #2
 800e318:	dc57      	bgt.n	800e3ca <_dtoa_r+0x93a>
 800e31a:	e08e      	b.n	800e43a <_dtoa_r+0x9aa>
 800e31c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e31e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e322:	e757      	b.n	800e1d4 <_dtoa_r+0x744>
 800e324:	9b08      	ldr	r3, [sp, #32]
 800e326:	1e5c      	subs	r4, r3, #1
 800e328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e32a:	42a3      	cmp	r3, r4
 800e32c:	bfb7      	itett	lt
 800e32e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e330:	1b1c      	subge	r4, r3, r4
 800e332:	1ae2      	sublt	r2, r4, r3
 800e334:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e336:	bfbe      	ittt	lt
 800e338:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e33a:	189b      	addlt	r3, r3, r2
 800e33c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e33e:	9b08      	ldr	r3, [sp, #32]
 800e340:	bfb8      	it	lt
 800e342:	2400      	movlt	r4, #0
 800e344:	2b00      	cmp	r3, #0
 800e346:	bfbb      	ittet	lt
 800e348:	9b06      	ldrlt	r3, [sp, #24]
 800e34a:	9a08      	ldrlt	r2, [sp, #32]
 800e34c:	9f06      	ldrge	r7, [sp, #24]
 800e34e:	1a9f      	sublt	r7, r3, r2
 800e350:	bfac      	ite	ge
 800e352:	9b08      	ldrge	r3, [sp, #32]
 800e354:	2300      	movlt	r3, #0
 800e356:	e73f      	b.n	800e1d8 <_dtoa_r+0x748>
 800e358:	3fe00000 	.word	0x3fe00000
 800e35c:	40240000 	.word	0x40240000
 800e360:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e362:	9f06      	ldr	r7, [sp, #24]
 800e364:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e366:	e742      	b.n	800e1ee <_dtoa_r+0x75e>
 800e368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e36a:	e76b      	b.n	800e244 <_dtoa_r+0x7b4>
 800e36c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e36e:	2b01      	cmp	r3, #1
 800e370:	dc19      	bgt.n	800e3a6 <_dtoa_r+0x916>
 800e372:	9b04      	ldr	r3, [sp, #16]
 800e374:	b9bb      	cbnz	r3, 800e3a6 <_dtoa_r+0x916>
 800e376:	9b05      	ldr	r3, [sp, #20]
 800e378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e37c:	b99b      	cbnz	r3, 800e3a6 <_dtoa_r+0x916>
 800e37e:	9b05      	ldr	r3, [sp, #20]
 800e380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e384:	0d1b      	lsrs	r3, r3, #20
 800e386:	051b      	lsls	r3, r3, #20
 800e388:	b183      	cbz	r3, 800e3ac <_dtoa_r+0x91c>
 800e38a:	f04f 0801 	mov.w	r8, #1
 800e38e:	9b06      	ldr	r3, [sp, #24]
 800e390:	3301      	adds	r3, #1
 800e392:	9306      	str	r3, [sp, #24]
 800e394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e396:	3301      	adds	r3, #1
 800e398:	9309      	str	r3, [sp, #36]	; 0x24
 800e39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f47f af6a 	bne.w	800e276 <_dtoa_r+0x7e6>
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	e76f      	b.n	800e286 <_dtoa_r+0x7f6>
 800e3a6:	f04f 0800 	mov.w	r8, #0
 800e3aa:	e7f6      	b.n	800e39a <_dtoa_r+0x90a>
 800e3ac:	4698      	mov	r8, r3
 800e3ae:	e7f4      	b.n	800e39a <_dtoa_r+0x90a>
 800e3b0:	f43f af7d 	beq.w	800e2ae <_dtoa_r+0x81e>
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	301c      	adds	r0, #28
 800e3b8:	e772      	b.n	800e2a0 <_dtoa_r+0x810>
 800e3ba:	9b08      	ldr	r3, [sp, #32]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	dc36      	bgt.n	800e42e <_dtoa_r+0x99e>
 800e3c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	dd33      	ble.n	800e42e <_dtoa_r+0x99e>
 800e3c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e3ca:	f1b9 0f00 	cmp.w	r9, #0
 800e3ce:	d10d      	bne.n	800e3ec <_dtoa_r+0x95c>
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	464b      	mov	r3, r9
 800e3d4:	2205      	movs	r2, #5
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f000 faa0 	bl	800e91c <__multadd>
 800e3dc:	4601      	mov	r1, r0
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4658      	mov	r0, fp
 800e3e2:	f000 fcb7 	bl	800ed54 <__mcmp>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	f73f adb8 	bgt.w	800df5c <_dtoa_r+0x4cc>
 800e3ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e3ee:	9f03      	ldr	r7, [sp, #12]
 800e3f0:	ea6f 0a03 	mvn.w	sl, r3
 800e3f4:	f04f 0800 	mov.w	r8, #0
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f000 fa6c 	bl	800e8d8 <_Bfree>
 800e400:	2e00      	cmp	r6, #0
 800e402:	f43f aea7 	beq.w	800e154 <_dtoa_r+0x6c4>
 800e406:	f1b8 0f00 	cmp.w	r8, #0
 800e40a:	d005      	beq.n	800e418 <_dtoa_r+0x988>
 800e40c:	45b0      	cmp	r8, r6
 800e40e:	d003      	beq.n	800e418 <_dtoa_r+0x988>
 800e410:	4641      	mov	r1, r8
 800e412:	4628      	mov	r0, r5
 800e414:	f000 fa60 	bl	800e8d8 <_Bfree>
 800e418:	4631      	mov	r1, r6
 800e41a:	4628      	mov	r0, r5
 800e41c:	f000 fa5c 	bl	800e8d8 <_Bfree>
 800e420:	e698      	b.n	800e154 <_dtoa_r+0x6c4>
 800e422:	2400      	movs	r4, #0
 800e424:	4626      	mov	r6, r4
 800e426:	e7e1      	b.n	800e3ec <_dtoa_r+0x95c>
 800e428:	46c2      	mov	sl, r8
 800e42a:	4626      	mov	r6, r4
 800e42c:	e596      	b.n	800df5c <_dtoa_r+0x4cc>
 800e42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 80fd 	beq.w	800e634 <_dtoa_r+0xba4>
 800e43a:	2f00      	cmp	r7, #0
 800e43c:	dd05      	ble.n	800e44a <_dtoa_r+0x9ba>
 800e43e:	4631      	mov	r1, r6
 800e440:	463a      	mov	r2, r7
 800e442:	4628      	mov	r0, r5
 800e444:	f000 fc16 	bl	800ec74 <__lshift>
 800e448:	4606      	mov	r6, r0
 800e44a:	f1b8 0f00 	cmp.w	r8, #0
 800e44e:	d05c      	beq.n	800e50a <_dtoa_r+0xa7a>
 800e450:	4628      	mov	r0, r5
 800e452:	6871      	ldr	r1, [r6, #4]
 800e454:	f000 fa00 	bl	800e858 <_Balloc>
 800e458:	4607      	mov	r7, r0
 800e45a:	b928      	cbnz	r0, 800e468 <_dtoa_r+0x9d8>
 800e45c:	4602      	mov	r2, r0
 800e45e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e462:	4b7f      	ldr	r3, [pc, #508]	; (800e660 <_dtoa_r+0xbd0>)
 800e464:	f7ff bb28 	b.w	800dab8 <_dtoa_r+0x28>
 800e468:	6932      	ldr	r2, [r6, #16]
 800e46a:	f106 010c 	add.w	r1, r6, #12
 800e46e:	3202      	adds	r2, #2
 800e470:	0092      	lsls	r2, r2, #2
 800e472:	300c      	adds	r0, #12
 800e474:	f7fe fc73 	bl	800cd5e <memcpy>
 800e478:	2201      	movs	r2, #1
 800e47a:	4639      	mov	r1, r7
 800e47c:	4628      	mov	r0, r5
 800e47e:	f000 fbf9 	bl	800ec74 <__lshift>
 800e482:	46b0      	mov	r8, r6
 800e484:	4606      	mov	r6, r0
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	3301      	adds	r3, #1
 800e48a:	9308      	str	r3, [sp, #32]
 800e48c:	9b03      	ldr	r3, [sp, #12]
 800e48e:	444b      	add	r3, r9
 800e490:	930a      	str	r3, [sp, #40]	; 0x28
 800e492:	9b04      	ldr	r3, [sp, #16]
 800e494:	f003 0301 	and.w	r3, r3, #1
 800e498:	9309      	str	r3, [sp, #36]	; 0x24
 800e49a:	9b08      	ldr	r3, [sp, #32]
 800e49c:	4621      	mov	r1, r4
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	4658      	mov	r0, fp
 800e4a2:	9304      	str	r3, [sp, #16]
 800e4a4:	f7ff fa66 	bl	800d974 <quorem>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	4641      	mov	r1, r8
 800e4ac:	3330      	adds	r3, #48	; 0x30
 800e4ae:	9006      	str	r0, [sp, #24]
 800e4b0:	4658      	mov	r0, fp
 800e4b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4b4:	f000 fc4e 	bl	800ed54 <__mcmp>
 800e4b8:	4632      	mov	r2, r6
 800e4ba:	4681      	mov	r9, r0
 800e4bc:	4621      	mov	r1, r4
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f000 fc64 	bl	800ed8c <__mdiff>
 800e4c4:	68c2      	ldr	r2, [r0, #12]
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ca:	bb02      	cbnz	r2, 800e50e <_dtoa_r+0xa7e>
 800e4cc:	4601      	mov	r1, r0
 800e4ce:	4658      	mov	r0, fp
 800e4d0:	f000 fc40 	bl	800ed54 <__mcmp>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4d8:	4639      	mov	r1, r7
 800e4da:	4628      	mov	r0, r5
 800e4dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e4e0:	f000 f9fa 	bl	800e8d8 <_Bfree>
 800e4e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e4e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4e8:	9f08      	ldr	r7, [sp, #32]
 800e4ea:	ea43 0102 	orr.w	r1, r3, r2
 800e4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f0:	430b      	orrs	r3, r1
 800e4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f4:	d10d      	bne.n	800e512 <_dtoa_r+0xa82>
 800e4f6:	2b39      	cmp	r3, #57	; 0x39
 800e4f8:	d029      	beq.n	800e54e <_dtoa_r+0xabe>
 800e4fa:	f1b9 0f00 	cmp.w	r9, #0
 800e4fe:	dd01      	ble.n	800e504 <_dtoa_r+0xa74>
 800e500:	9b06      	ldr	r3, [sp, #24]
 800e502:	3331      	adds	r3, #49	; 0x31
 800e504:	9a04      	ldr	r2, [sp, #16]
 800e506:	7013      	strb	r3, [r2, #0]
 800e508:	e776      	b.n	800e3f8 <_dtoa_r+0x968>
 800e50a:	4630      	mov	r0, r6
 800e50c:	e7b9      	b.n	800e482 <_dtoa_r+0x9f2>
 800e50e:	2201      	movs	r2, #1
 800e510:	e7e2      	b.n	800e4d8 <_dtoa_r+0xa48>
 800e512:	f1b9 0f00 	cmp.w	r9, #0
 800e516:	db06      	blt.n	800e526 <_dtoa_r+0xa96>
 800e518:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e51a:	ea41 0909 	orr.w	r9, r1, r9
 800e51e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e520:	ea59 0101 	orrs.w	r1, r9, r1
 800e524:	d120      	bne.n	800e568 <_dtoa_r+0xad8>
 800e526:	2a00      	cmp	r2, #0
 800e528:	ddec      	ble.n	800e504 <_dtoa_r+0xa74>
 800e52a:	4659      	mov	r1, fp
 800e52c:	2201      	movs	r2, #1
 800e52e:	4628      	mov	r0, r5
 800e530:	9308      	str	r3, [sp, #32]
 800e532:	f000 fb9f 	bl	800ec74 <__lshift>
 800e536:	4621      	mov	r1, r4
 800e538:	4683      	mov	fp, r0
 800e53a:	f000 fc0b 	bl	800ed54 <__mcmp>
 800e53e:	2800      	cmp	r0, #0
 800e540:	9b08      	ldr	r3, [sp, #32]
 800e542:	dc02      	bgt.n	800e54a <_dtoa_r+0xaba>
 800e544:	d1de      	bne.n	800e504 <_dtoa_r+0xa74>
 800e546:	07da      	lsls	r2, r3, #31
 800e548:	d5dc      	bpl.n	800e504 <_dtoa_r+0xa74>
 800e54a:	2b39      	cmp	r3, #57	; 0x39
 800e54c:	d1d8      	bne.n	800e500 <_dtoa_r+0xa70>
 800e54e:	2339      	movs	r3, #57	; 0x39
 800e550:	9a04      	ldr	r2, [sp, #16]
 800e552:	7013      	strb	r3, [r2, #0]
 800e554:	463b      	mov	r3, r7
 800e556:	461f      	mov	r7, r3
 800e558:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	2a39      	cmp	r2, #57	; 0x39
 800e560:	d050      	beq.n	800e604 <_dtoa_r+0xb74>
 800e562:	3201      	adds	r2, #1
 800e564:	701a      	strb	r2, [r3, #0]
 800e566:	e747      	b.n	800e3f8 <_dtoa_r+0x968>
 800e568:	2a00      	cmp	r2, #0
 800e56a:	dd03      	ble.n	800e574 <_dtoa_r+0xae4>
 800e56c:	2b39      	cmp	r3, #57	; 0x39
 800e56e:	d0ee      	beq.n	800e54e <_dtoa_r+0xabe>
 800e570:	3301      	adds	r3, #1
 800e572:	e7c7      	b.n	800e504 <_dtoa_r+0xa74>
 800e574:	9a08      	ldr	r2, [sp, #32]
 800e576:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e578:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e57c:	428a      	cmp	r2, r1
 800e57e:	d02a      	beq.n	800e5d6 <_dtoa_r+0xb46>
 800e580:	4659      	mov	r1, fp
 800e582:	2300      	movs	r3, #0
 800e584:	220a      	movs	r2, #10
 800e586:	4628      	mov	r0, r5
 800e588:	f000 f9c8 	bl	800e91c <__multadd>
 800e58c:	45b0      	cmp	r8, r6
 800e58e:	4683      	mov	fp, r0
 800e590:	f04f 0300 	mov.w	r3, #0
 800e594:	f04f 020a 	mov.w	r2, #10
 800e598:	4641      	mov	r1, r8
 800e59a:	4628      	mov	r0, r5
 800e59c:	d107      	bne.n	800e5ae <_dtoa_r+0xb1e>
 800e59e:	f000 f9bd 	bl	800e91c <__multadd>
 800e5a2:	4680      	mov	r8, r0
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	9b08      	ldr	r3, [sp, #32]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	9308      	str	r3, [sp, #32]
 800e5ac:	e775      	b.n	800e49a <_dtoa_r+0xa0a>
 800e5ae:	f000 f9b5 	bl	800e91c <__multadd>
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	220a      	movs	r2, #10
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	f000 f9ae 	bl	800e91c <__multadd>
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	e7f0      	b.n	800e5a6 <_dtoa_r+0xb16>
 800e5c4:	f1b9 0f00 	cmp.w	r9, #0
 800e5c8:	bfcc      	ite	gt
 800e5ca:	464f      	movgt	r7, r9
 800e5cc:	2701      	movle	r7, #1
 800e5ce:	f04f 0800 	mov.w	r8, #0
 800e5d2:	9a03      	ldr	r2, [sp, #12]
 800e5d4:	4417      	add	r7, r2
 800e5d6:	4659      	mov	r1, fp
 800e5d8:	2201      	movs	r2, #1
 800e5da:	4628      	mov	r0, r5
 800e5dc:	9308      	str	r3, [sp, #32]
 800e5de:	f000 fb49 	bl	800ec74 <__lshift>
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4683      	mov	fp, r0
 800e5e6:	f000 fbb5 	bl	800ed54 <__mcmp>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	dcb2      	bgt.n	800e554 <_dtoa_r+0xac4>
 800e5ee:	d102      	bne.n	800e5f6 <_dtoa_r+0xb66>
 800e5f0:	9b08      	ldr	r3, [sp, #32]
 800e5f2:	07db      	lsls	r3, r3, #31
 800e5f4:	d4ae      	bmi.n	800e554 <_dtoa_r+0xac4>
 800e5f6:	463b      	mov	r3, r7
 800e5f8:	461f      	mov	r7, r3
 800e5fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5fe:	2a30      	cmp	r2, #48	; 0x30
 800e600:	d0fa      	beq.n	800e5f8 <_dtoa_r+0xb68>
 800e602:	e6f9      	b.n	800e3f8 <_dtoa_r+0x968>
 800e604:	9a03      	ldr	r2, [sp, #12]
 800e606:	429a      	cmp	r2, r3
 800e608:	d1a5      	bne.n	800e556 <_dtoa_r+0xac6>
 800e60a:	2331      	movs	r3, #49	; 0x31
 800e60c:	f10a 0a01 	add.w	sl, sl, #1
 800e610:	e779      	b.n	800e506 <_dtoa_r+0xa76>
 800e612:	4b14      	ldr	r3, [pc, #80]	; (800e664 <_dtoa_r+0xbd4>)
 800e614:	f7ff baa8 	b.w	800db68 <_dtoa_r+0xd8>
 800e618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f47f aa81 	bne.w	800db22 <_dtoa_r+0x92>
 800e620:	4b11      	ldr	r3, [pc, #68]	; (800e668 <_dtoa_r+0xbd8>)
 800e622:	f7ff baa1 	b.w	800db68 <_dtoa_r+0xd8>
 800e626:	f1b9 0f00 	cmp.w	r9, #0
 800e62a:	dc03      	bgt.n	800e634 <_dtoa_r+0xba4>
 800e62c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e62e:	2b02      	cmp	r3, #2
 800e630:	f73f aecb 	bgt.w	800e3ca <_dtoa_r+0x93a>
 800e634:	9f03      	ldr	r7, [sp, #12]
 800e636:	4621      	mov	r1, r4
 800e638:	4658      	mov	r0, fp
 800e63a:	f7ff f99b 	bl	800d974 <quorem>
 800e63e:	9a03      	ldr	r2, [sp, #12]
 800e640:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e644:	f807 3b01 	strb.w	r3, [r7], #1
 800e648:	1aba      	subs	r2, r7, r2
 800e64a:	4591      	cmp	r9, r2
 800e64c:	ddba      	ble.n	800e5c4 <_dtoa_r+0xb34>
 800e64e:	4659      	mov	r1, fp
 800e650:	2300      	movs	r3, #0
 800e652:	220a      	movs	r2, #10
 800e654:	4628      	mov	r0, r5
 800e656:	f000 f961 	bl	800e91c <__multadd>
 800e65a:	4683      	mov	fp, r0
 800e65c:	e7eb      	b.n	800e636 <_dtoa_r+0xba6>
 800e65e:	bf00      	nop
 800e660:	080117cf 	.word	0x080117cf
 800e664:	0801172c 	.word	0x0801172c
 800e668:	08011750 	.word	0x08011750

0800e66c <__sflush_r>:
 800e66c:	898a      	ldrh	r2, [r1, #12]
 800e66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e670:	4605      	mov	r5, r0
 800e672:	0710      	lsls	r0, r2, #28
 800e674:	460c      	mov	r4, r1
 800e676:	d457      	bmi.n	800e728 <__sflush_r+0xbc>
 800e678:	684b      	ldr	r3, [r1, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	dc04      	bgt.n	800e688 <__sflush_r+0x1c>
 800e67e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc01      	bgt.n	800e688 <__sflush_r+0x1c>
 800e684:	2000      	movs	r0, #0
 800e686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e68a:	2e00      	cmp	r6, #0
 800e68c:	d0fa      	beq.n	800e684 <__sflush_r+0x18>
 800e68e:	2300      	movs	r3, #0
 800e690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e694:	682f      	ldr	r7, [r5, #0]
 800e696:	602b      	str	r3, [r5, #0]
 800e698:	d032      	beq.n	800e700 <__sflush_r+0x94>
 800e69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	075a      	lsls	r2, r3, #29
 800e6a0:	d505      	bpl.n	800e6ae <__sflush_r+0x42>
 800e6a2:	6863      	ldr	r3, [r4, #4]
 800e6a4:	1ac0      	subs	r0, r0, r3
 800e6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6a8:	b10b      	cbz	r3, 800e6ae <__sflush_r+0x42>
 800e6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6ac:	1ac0      	subs	r0, r0, r3
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	6a21      	ldr	r1, [r4, #32]
 800e6b8:	47b0      	blx	r6
 800e6ba:	1c43      	adds	r3, r0, #1
 800e6bc:	89a3      	ldrh	r3, [r4, #12]
 800e6be:	d106      	bne.n	800e6ce <__sflush_r+0x62>
 800e6c0:	6829      	ldr	r1, [r5, #0]
 800e6c2:	291d      	cmp	r1, #29
 800e6c4:	d82c      	bhi.n	800e720 <__sflush_r+0xb4>
 800e6c6:	4a29      	ldr	r2, [pc, #164]	; (800e76c <__sflush_r+0x100>)
 800e6c8:	40ca      	lsrs	r2, r1
 800e6ca:	07d6      	lsls	r6, r2, #31
 800e6cc:	d528      	bpl.n	800e720 <__sflush_r+0xb4>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	6062      	str	r2, [r4, #4]
 800e6d2:	6922      	ldr	r2, [r4, #16]
 800e6d4:	04d9      	lsls	r1, r3, #19
 800e6d6:	6022      	str	r2, [r4, #0]
 800e6d8:	d504      	bpl.n	800e6e4 <__sflush_r+0x78>
 800e6da:	1c42      	adds	r2, r0, #1
 800e6dc:	d101      	bne.n	800e6e2 <__sflush_r+0x76>
 800e6de:	682b      	ldr	r3, [r5, #0]
 800e6e0:	b903      	cbnz	r3, 800e6e4 <__sflush_r+0x78>
 800e6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800e6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6e6:	602f      	str	r7, [r5, #0]
 800e6e8:	2900      	cmp	r1, #0
 800e6ea:	d0cb      	beq.n	800e684 <__sflush_r+0x18>
 800e6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6f0:	4299      	cmp	r1, r3
 800e6f2:	d002      	beq.n	800e6fa <__sflush_r+0x8e>
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f000 fc45 	bl	800ef84 <_free_r>
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e6fe:	e7c2      	b.n	800e686 <__sflush_r+0x1a>
 800e700:	6a21      	ldr	r1, [r4, #32]
 800e702:	2301      	movs	r3, #1
 800e704:	4628      	mov	r0, r5
 800e706:	47b0      	blx	r6
 800e708:	1c41      	adds	r1, r0, #1
 800e70a:	d1c7      	bne.n	800e69c <__sflush_r+0x30>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0c4      	beq.n	800e69c <__sflush_r+0x30>
 800e712:	2b1d      	cmp	r3, #29
 800e714:	d001      	beq.n	800e71a <__sflush_r+0xae>
 800e716:	2b16      	cmp	r3, #22
 800e718:	d101      	bne.n	800e71e <__sflush_r+0xb2>
 800e71a:	602f      	str	r7, [r5, #0]
 800e71c:	e7b2      	b.n	800e684 <__sflush_r+0x18>
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e724:	81a3      	strh	r3, [r4, #12]
 800e726:	e7ae      	b.n	800e686 <__sflush_r+0x1a>
 800e728:	690f      	ldr	r7, [r1, #16]
 800e72a:	2f00      	cmp	r7, #0
 800e72c:	d0aa      	beq.n	800e684 <__sflush_r+0x18>
 800e72e:	0793      	lsls	r3, r2, #30
 800e730:	bf18      	it	ne
 800e732:	2300      	movne	r3, #0
 800e734:	680e      	ldr	r6, [r1, #0]
 800e736:	bf08      	it	eq
 800e738:	694b      	ldreq	r3, [r1, #20]
 800e73a:	1bf6      	subs	r6, r6, r7
 800e73c:	600f      	str	r7, [r1, #0]
 800e73e:	608b      	str	r3, [r1, #8]
 800e740:	2e00      	cmp	r6, #0
 800e742:	dd9f      	ble.n	800e684 <__sflush_r+0x18>
 800e744:	4633      	mov	r3, r6
 800e746:	463a      	mov	r2, r7
 800e748:	4628      	mov	r0, r5
 800e74a:	6a21      	ldr	r1, [r4, #32]
 800e74c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e750:	47e0      	blx	ip
 800e752:	2800      	cmp	r0, #0
 800e754:	dc06      	bgt.n	800e764 <__sflush_r+0xf8>
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	f04f 30ff 	mov.w	r0, #4294967295
 800e75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e760:	81a3      	strh	r3, [r4, #12]
 800e762:	e790      	b.n	800e686 <__sflush_r+0x1a>
 800e764:	4407      	add	r7, r0
 800e766:	1a36      	subs	r6, r6, r0
 800e768:	e7ea      	b.n	800e740 <__sflush_r+0xd4>
 800e76a:	bf00      	nop
 800e76c:	20400001 	.word	0x20400001

0800e770 <_fflush_r>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	690b      	ldr	r3, [r1, #16]
 800e774:	4605      	mov	r5, r0
 800e776:	460c      	mov	r4, r1
 800e778:	b913      	cbnz	r3, 800e780 <_fflush_r+0x10>
 800e77a:	2500      	movs	r5, #0
 800e77c:	4628      	mov	r0, r5
 800e77e:	bd38      	pop	{r3, r4, r5, pc}
 800e780:	b118      	cbz	r0, 800e78a <_fflush_r+0x1a>
 800e782:	6983      	ldr	r3, [r0, #24]
 800e784:	b90b      	cbnz	r3, 800e78a <_fflush_r+0x1a>
 800e786:	f7fe fa25 	bl	800cbd4 <__sinit>
 800e78a:	4b14      	ldr	r3, [pc, #80]	; (800e7dc <_fflush_r+0x6c>)
 800e78c:	429c      	cmp	r4, r3
 800e78e:	d11b      	bne.n	800e7c8 <_fflush_r+0x58>
 800e790:	686c      	ldr	r4, [r5, #4]
 800e792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d0ef      	beq.n	800e77a <_fflush_r+0xa>
 800e79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e79c:	07d0      	lsls	r0, r2, #31
 800e79e:	d404      	bmi.n	800e7aa <_fflush_r+0x3a>
 800e7a0:	0599      	lsls	r1, r3, #22
 800e7a2:	d402      	bmi.n	800e7aa <_fflush_r+0x3a>
 800e7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7a6:	f7fe fad8 	bl	800cd5a <__retarget_lock_acquire_recursive>
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	f7ff ff5d 	bl	800e66c <__sflush_r>
 800e7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	07da      	lsls	r2, r3, #31
 800e7b8:	d4e0      	bmi.n	800e77c <_fflush_r+0xc>
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	059b      	lsls	r3, r3, #22
 800e7be:	d4dd      	bmi.n	800e77c <_fflush_r+0xc>
 800e7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7c2:	f7fe facb 	bl	800cd5c <__retarget_lock_release_recursive>
 800e7c6:	e7d9      	b.n	800e77c <_fflush_r+0xc>
 800e7c8:	4b05      	ldr	r3, [pc, #20]	; (800e7e0 <_fflush_r+0x70>)
 800e7ca:	429c      	cmp	r4, r3
 800e7cc:	d101      	bne.n	800e7d2 <_fflush_r+0x62>
 800e7ce:	68ac      	ldr	r4, [r5, #8]
 800e7d0:	e7df      	b.n	800e792 <_fflush_r+0x22>
 800e7d2:	4b04      	ldr	r3, [pc, #16]	; (800e7e4 <_fflush_r+0x74>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	bf08      	it	eq
 800e7d8:	68ec      	ldreq	r4, [r5, #12]
 800e7da:	e7da      	b.n	800e792 <_fflush_r+0x22>
 800e7dc:	080116d8 	.word	0x080116d8
 800e7e0:	080116f8 	.word	0x080116f8
 800e7e4:	080116b8 	.word	0x080116b8

0800e7e8 <_localeconv_r>:
 800e7e8:	4800      	ldr	r0, [pc, #0]	; (800e7ec <_localeconv_r+0x4>)
 800e7ea:	4770      	bx	lr
 800e7ec:	2000018c 	.word	0x2000018c

0800e7f0 <_lseek_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	4d05      	ldr	r5, [pc, #20]	; (800e810 <_lseek_r+0x20>)
 800e7fc:	602a      	str	r2, [r5, #0]
 800e7fe:	461a      	mov	r2, r3
 800e800:	f7f6 fa9e 	bl	8004d40 <_lseek>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d102      	bne.n	800e80e <_lseek_r+0x1e>
 800e808:	682b      	ldr	r3, [r5, #0]
 800e80a:	b103      	cbz	r3, 800e80e <_lseek_r+0x1e>
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	bd38      	pop	{r3, r4, r5, pc}
 800e810:	2000793c 	.word	0x2000793c

0800e814 <malloc>:
 800e814:	4b02      	ldr	r3, [pc, #8]	; (800e820 <malloc+0xc>)
 800e816:	4601      	mov	r1, r0
 800e818:	6818      	ldr	r0, [r3, #0]
 800e81a:	f7fe bad7 	b.w	800cdcc <_malloc_r>
 800e81e:	bf00      	nop
 800e820:	20000038 	.word	0x20000038

0800e824 <memchr>:
 800e824:	4603      	mov	r3, r0
 800e826:	b510      	push	{r4, lr}
 800e828:	b2c9      	uxtb	r1, r1
 800e82a:	4402      	add	r2, r0
 800e82c:	4293      	cmp	r3, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	d101      	bne.n	800e836 <memchr+0x12>
 800e832:	2000      	movs	r0, #0
 800e834:	e003      	b.n	800e83e <memchr+0x1a>
 800e836:	7804      	ldrb	r4, [r0, #0]
 800e838:	3301      	adds	r3, #1
 800e83a:	428c      	cmp	r4, r1
 800e83c:	d1f6      	bne.n	800e82c <memchr+0x8>
 800e83e:	bd10      	pop	{r4, pc}

0800e840 <__malloc_lock>:
 800e840:	4801      	ldr	r0, [pc, #4]	; (800e848 <__malloc_lock+0x8>)
 800e842:	f7fe ba8a 	b.w	800cd5a <__retarget_lock_acquire_recursive>
 800e846:	bf00      	nop
 800e848:	20007930 	.word	0x20007930

0800e84c <__malloc_unlock>:
 800e84c:	4801      	ldr	r0, [pc, #4]	; (800e854 <__malloc_unlock+0x8>)
 800e84e:	f7fe ba85 	b.w	800cd5c <__retarget_lock_release_recursive>
 800e852:	bf00      	nop
 800e854:	20007930 	.word	0x20007930

0800e858 <_Balloc>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e85c:	4604      	mov	r4, r0
 800e85e:	460d      	mov	r5, r1
 800e860:	b976      	cbnz	r6, 800e880 <_Balloc+0x28>
 800e862:	2010      	movs	r0, #16
 800e864:	f7ff ffd6 	bl	800e814 <malloc>
 800e868:	4602      	mov	r2, r0
 800e86a:	6260      	str	r0, [r4, #36]	; 0x24
 800e86c:	b920      	cbnz	r0, 800e878 <_Balloc+0x20>
 800e86e:	2166      	movs	r1, #102	; 0x66
 800e870:	4b17      	ldr	r3, [pc, #92]	; (800e8d0 <_Balloc+0x78>)
 800e872:	4818      	ldr	r0, [pc, #96]	; (800e8d4 <_Balloc+0x7c>)
 800e874:	f000 fd3c 	bl	800f2f0 <__assert_func>
 800e878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e87c:	6006      	str	r6, [r0, #0]
 800e87e:	60c6      	str	r6, [r0, #12]
 800e880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e882:	68f3      	ldr	r3, [r6, #12]
 800e884:	b183      	cbz	r3, 800e8a8 <_Balloc+0x50>
 800e886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e88e:	b9b8      	cbnz	r0, 800e8c0 <_Balloc+0x68>
 800e890:	2101      	movs	r1, #1
 800e892:	fa01 f605 	lsl.w	r6, r1, r5
 800e896:	1d72      	adds	r2, r6, #5
 800e898:	4620      	mov	r0, r4
 800e89a:	0092      	lsls	r2, r2, #2
 800e89c:	f000 fb5e 	bl	800ef5c <_calloc_r>
 800e8a0:	b160      	cbz	r0, 800e8bc <_Balloc+0x64>
 800e8a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e8a6:	e00e      	b.n	800e8c6 <_Balloc+0x6e>
 800e8a8:	2221      	movs	r2, #33	; 0x21
 800e8aa:	2104      	movs	r1, #4
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f000 fb55 	bl	800ef5c <_calloc_r>
 800e8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8b4:	60f0      	str	r0, [r6, #12]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e4      	bne.n	800e886 <_Balloc+0x2e>
 800e8bc:	2000      	movs	r0, #0
 800e8be:	bd70      	pop	{r4, r5, r6, pc}
 800e8c0:	6802      	ldr	r2, [r0, #0]
 800e8c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8cc:	e7f7      	b.n	800e8be <_Balloc+0x66>
 800e8ce:	bf00      	nop
 800e8d0:	0801175d 	.word	0x0801175d
 800e8d4:	080117e0 	.word	0x080117e0

0800e8d8 <_Bfree>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8dc:	4605      	mov	r5, r0
 800e8de:	460c      	mov	r4, r1
 800e8e0:	b976      	cbnz	r6, 800e900 <_Bfree+0x28>
 800e8e2:	2010      	movs	r0, #16
 800e8e4:	f7ff ff96 	bl	800e814 <malloc>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	6268      	str	r0, [r5, #36]	; 0x24
 800e8ec:	b920      	cbnz	r0, 800e8f8 <_Bfree+0x20>
 800e8ee:	218a      	movs	r1, #138	; 0x8a
 800e8f0:	4b08      	ldr	r3, [pc, #32]	; (800e914 <_Bfree+0x3c>)
 800e8f2:	4809      	ldr	r0, [pc, #36]	; (800e918 <_Bfree+0x40>)
 800e8f4:	f000 fcfc 	bl	800f2f0 <__assert_func>
 800e8f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8fc:	6006      	str	r6, [r0, #0]
 800e8fe:	60c6      	str	r6, [r0, #12]
 800e900:	b13c      	cbz	r4, 800e912 <_Bfree+0x3a>
 800e902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e904:	6862      	ldr	r2, [r4, #4]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e90c:	6021      	str	r1, [r4, #0]
 800e90e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e912:	bd70      	pop	{r4, r5, r6, pc}
 800e914:	0801175d 	.word	0x0801175d
 800e918:	080117e0 	.word	0x080117e0

0800e91c <__multadd>:
 800e91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e920:	4607      	mov	r7, r0
 800e922:	460c      	mov	r4, r1
 800e924:	461e      	mov	r6, r3
 800e926:	2000      	movs	r0, #0
 800e928:	690d      	ldr	r5, [r1, #16]
 800e92a:	f101 0c14 	add.w	ip, r1, #20
 800e92e:	f8dc 3000 	ldr.w	r3, [ip]
 800e932:	3001      	adds	r0, #1
 800e934:	b299      	uxth	r1, r3
 800e936:	fb02 6101 	mla	r1, r2, r1, r6
 800e93a:	0c1e      	lsrs	r6, r3, #16
 800e93c:	0c0b      	lsrs	r3, r1, #16
 800e93e:	fb02 3306 	mla	r3, r2, r6, r3
 800e942:	b289      	uxth	r1, r1
 800e944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e948:	4285      	cmp	r5, r0
 800e94a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e94e:	f84c 1b04 	str.w	r1, [ip], #4
 800e952:	dcec      	bgt.n	800e92e <__multadd+0x12>
 800e954:	b30e      	cbz	r6, 800e99a <__multadd+0x7e>
 800e956:	68a3      	ldr	r3, [r4, #8]
 800e958:	42ab      	cmp	r3, r5
 800e95a:	dc19      	bgt.n	800e990 <__multadd+0x74>
 800e95c:	6861      	ldr	r1, [r4, #4]
 800e95e:	4638      	mov	r0, r7
 800e960:	3101      	adds	r1, #1
 800e962:	f7ff ff79 	bl	800e858 <_Balloc>
 800e966:	4680      	mov	r8, r0
 800e968:	b928      	cbnz	r0, 800e976 <__multadd+0x5a>
 800e96a:	4602      	mov	r2, r0
 800e96c:	21b5      	movs	r1, #181	; 0xb5
 800e96e:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <__multadd+0x84>)
 800e970:	480c      	ldr	r0, [pc, #48]	; (800e9a4 <__multadd+0x88>)
 800e972:	f000 fcbd 	bl	800f2f0 <__assert_func>
 800e976:	6922      	ldr	r2, [r4, #16]
 800e978:	f104 010c 	add.w	r1, r4, #12
 800e97c:	3202      	adds	r2, #2
 800e97e:	0092      	lsls	r2, r2, #2
 800e980:	300c      	adds	r0, #12
 800e982:	f7fe f9ec 	bl	800cd5e <memcpy>
 800e986:	4621      	mov	r1, r4
 800e988:	4638      	mov	r0, r7
 800e98a:	f7ff ffa5 	bl	800e8d8 <_Bfree>
 800e98e:	4644      	mov	r4, r8
 800e990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e994:	3501      	adds	r5, #1
 800e996:	615e      	str	r6, [r3, #20]
 800e998:	6125      	str	r5, [r4, #16]
 800e99a:	4620      	mov	r0, r4
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a0:	080117cf 	.word	0x080117cf
 800e9a4:	080117e0 	.word	0x080117e0

0800e9a8 <__hi0bits>:
 800e9a8:	0c02      	lsrs	r2, r0, #16
 800e9aa:	0412      	lsls	r2, r2, #16
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	b9ca      	cbnz	r2, 800e9e4 <__hi0bits+0x3c>
 800e9b0:	0403      	lsls	r3, r0, #16
 800e9b2:	2010      	movs	r0, #16
 800e9b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e9b8:	bf04      	itt	eq
 800e9ba:	021b      	lsleq	r3, r3, #8
 800e9bc:	3008      	addeq	r0, #8
 800e9be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e9c2:	bf04      	itt	eq
 800e9c4:	011b      	lsleq	r3, r3, #4
 800e9c6:	3004      	addeq	r0, #4
 800e9c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e9cc:	bf04      	itt	eq
 800e9ce:	009b      	lsleq	r3, r3, #2
 800e9d0:	3002      	addeq	r0, #2
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	db05      	blt.n	800e9e2 <__hi0bits+0x3a>
 800e9d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e9da:	f100 0001 	add.w	r0, r0, #1
 800e9de:	bf08      	it	eq
 800e9e0:	2020      	moveq	r0, #32
 800e9e2:	4770      	bx	lr
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	e7e5      	b.n	800e9b4 <__hi0bits+0xc>

0800e9e8 <__lo0bits>:
 800e9e8:	6803      	ldr	r3, [r0, #0]
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	f013 0007 	ands.w	r0, r3, #7
 800e9f0:	d00b      	beq.n	800ea0a <__lo0bits+0x22>
 800e9f2:	07d9      	lsls	r1, r3, #31
 800e9f4:	d421      	bmi.n	800ea3a <__lo0bits+0x52>
 800e9f6:	0798      	lsls	r0, r3, #30
 800e9f8:	bf49      	itett	mi
 800e9fa:	085b      	lsrmi	r3, r3, #1
 800e9fc:	089b      	lsrpl	r3, r3, #2
 800e9fe:	2001      	movmi	r0, #1
 800ea00:	6013      	strmi	r3, [r2, #0]
 800ea02:	bf5c      	itt	pl
 800ea04:	2002      	movpl	r0, #2
 800ea06:	6013      	strpl	r3, [r2, #0]
 800ea08:	4770      	bx	lr
 800ea0a:	b299      	uxth	r1, r3
 800ea0c:	b909      	cbnz	r1, 800ea12 <__lo0bits+0x2a>
 800ea0e:	2010      	movs	r0, #16
 800ea10:	0c1b      	lsrs	r3, r3, #16
 800ea12:	b2d9      	uxtb	r1, r3
 800ea14:	b909      	cbnz	r1, 800ea1a <__lo0bits+0x32>
 800ea16:	3008      	adds	r0, #8
 800ea18:	0a1b      	lsrs	r3, r3, #8
 800ea1a:	0719      	lsls	r1, r3, #28
 800ea1c:	bf04      	itt	eq
 800ea1e:	091b      	lsreq	r3, r3, #4
 800ea20:	3004      	addeq	r0, #4
 800ea22:	0799      	lsls	r1, r3, #30
 800ea24:	bf04      	itt	eq
 800ea26:	089b      	lsreq	r3, r3, #2
 800ea28:	3002      	addeq	r0, #2
 800ea2a:	07d9      	lsls	r1, r3, #31
 800ea2c:	d403      	bmi.n	800ea36 <__lo0bits+0x4e>
 800ea2e:	085b      	lsrs	r3, r3, #1
 800ea30:	f100 0001 	add.w	r0, r0, #1
 800ea34:	d003      	beq.n	800ea3e <__lo0bits+0x56>
 800ea36:	6013      	str	r3, [r2, #0]
 800ea38:	4770      	bx	lr
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	4770      	bx	lr
 800ea3e:	2020      	movs	r0, #32
 800ea40:	4770      	bx	lr
	...

0800ea44 <__i2b>:
 800ea44:	b510      	push	{r4, lr}
 800ea46:	460c      	mov	r4, r1
 800ea48:	2101      	movs	r1, #1
 800ea4a:	f7ff ff05 	bl	800e858 <_Balloc>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	b928      	cbnz	r0, 800ea5e <__i2b+0x1a>
 800ea52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea56:	4b04      	ldr	r3, [pc, #16]	; (800ea68 <__i2b+0x24>)
 800ea58:	4804      	ldr	r0, [pc, #16]	; (800ea6c <__i2b+0x28>)
 800ea5a:	f000 fc49 	bl	800f2f0 <__assert_func>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	6144      	str	r4, [r0, #20]
 800ea62:	6103      	str	r3, [r0, #16]
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	bf00      	nop
 800ea68:	080117cf 	.word	0x080117cf
 800ea6c:	080117e0 	.word	0x080117e0

0800ea70 <__multiply>:
 800ea70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	4691      	mov	r9, r2
 800ea76:	690a      	ldr	r2, [r1, #16]
 800ea78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	bfbe      	ittt	lt
 800ea82:	460b      	movlt	r3, r1
 800ea84:	464c      	movlt	r4, r9
 800ea86:	4699      	movlt	r9, r3
 800ea88:	6927      	ldr	r7, [r4, #16]
 800ea8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea8e:	68a3      	ldr	r3, [r4, #8]
 800ea90:	6861      	ldr	r1, [r4, #4]
 800ea92:	eb07 060a 	add.w	r6, r7, sl
 800ea96:	42b3      	cmp	r3, r6
 800ea98:	b085      	sub	sp, #20
 800ea9a:	bfb8      	it	lt
 800ea9c:	3101      	addlt	r1, #1
 800ea9e:	f7ff fedb 	bl	800e858 <_Balloc>
 800eaa2:	b930      	cbnz	r0, 800eab2 <__multiply+0x42>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	f240 115d 	movw	r1, #349	; 0x15d
 800eaaa:	4b43      	ldr	r3, [pc, #268]	; (800ebb8 <__multiply+0x148>)
 800eaac:	4843      	ldr	r0, [pc, #268]	; (800ebbc <__multiply+0x14c>)
 800eaae:	f000 fc1f 	bl	800f2f0 <__assert_func>
 800eab2:	f100 0514 	add.w	r5, r0, #20
 800eab6:	462b      	mov	r3, r5
 800eab8:	2200      	movs	r2, #0
 800eaba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eabe:	4543      	cmp	r3, r8
 800eac0:	d321      	bcc.n	800eb06 <__multiply+0x96>
 800eac2:	f104 0314 	add.w	r3, r4, #20
 800eac6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eaca:	f109 0314 	add.w	r3, r9, #20
 800eace:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ead2:	9202      	str	r2, [sp, #8]
 800ead4:	1b3a      	subs	r2, r7, r4
 800ead6:	3a15      	subs	r2, #21
 800ead8:	f022 0203 	bic.w	r2, r2, #3
 800eadc:	3204      	adds	r2, #4
 800eade:	f104 0115 	add.w	r1, r4, #21
 800eae2:	428f      	cmp	r7, r1
 800eae4:	bf38      	it	cc
 800eae6:	2204      	movcc	r2, #4
 800eae8:	9201      	str	r2, [sp, #4]
 800eaea:	9a02      	ldr	r2, [sp, #8]
 800eaec:	9303      	str	r3, [sp, #12]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d80c      	bhi.n	800eb0c <__multiply+0x9c>
 800eaf2:	2e00      	cmp	r6, #0
 800eaf4:	dd03      	ble.n	800eafe <__multiply+0x8e>
 800eaf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d059      	beq.n	800ebb2 <__multiply+0x142>
 800eafe:	6106      	str	r6, [r0, #16]
 800eb00:	b005      	add	sp, #20
 800eb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb06:	f843 2b04 	str.w	r2, [r3], #4
 800eb0a:	e7d8      	b.n	800eabe <__multiply+0x4e>
 800eb0c:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb10:	f1ba 0f00 	cmp.w	sl, #0
 800eb14:	d023      	beq.n	800eb5e <__multiply+0xee>
 800eb16:	46a9      	mov	r9, r5
 800eb18:	f04f 0c00 	mov.w	ip, #0
 800eb1c:	f104 0e14 	add.w	lr, r4, #20
 800eb20:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eb24:	f8d9 1000 	ldr.w	r1, [r9]
 800eb28:	fa1f fb82 	uxth.w	fp, r2
 800eb2c:	b289      	uxth	r1, r1
 800eb2e:	fb0a 110b 	mla	r1, sl, fp, r1
 800eb32:	4461      	add	r1, ip
 800eb34:	f8d9 c000 	ldr.w	ip, [r9]
 800eb38:	0c12      	lsrs	r2, r2, #16
 800eb3a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800eb3e:	fb0a c202 	mla	r2, sl, r2, ip
 800eb42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb46:	b289      	uxth	r1, r1
 800eb48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb4c:	4577      	cmp	r7, lr
 800eb4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb52:	f849 1b04 	str.w	r1, [r9], #4
 800eb56:	d8e3      	bhi.n	800eb20 <__multiply+0xb0>
 800eb58:	9a01      	ldr	r2, [sp, #4]
 800eb5a:	f845 c002 	str.w	ip, [r5, r2]
 800eb5e:	9a03      	ldr	r2, [sp, #12]
 800eb60:	3304      	adds	r3, #4
 800eb62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb66:	f1b9 0f00 	cmp.w	r9, #0
 800eb6a:	d020      	beq.n	800ebae <__multiply+0x13e>
 800eb6c:	46ae      	mov	lr, r5
 800eb6e:	f04f 0a00 	mov.w	sl, #0
 800eb72:	6829      	ldr	r1, [r5, #0]
 800eb74:	f104 0c14 	add.w	ip, r4, #20
 800eb78:	f8bc b000 	ldrh.w	fp, [ip]
 800eb7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb80:	b289      	uxth	r1, r1
 800eb82:	fb09 220b 	mla	r2, r9, fp, r2
 800eb86:	4492      	add	sl, r2
 800eb88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb8c:	f84e 1b04 	str.w	r1, [lr], #4
 800eb90:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb94:	f8be 1000 	ldrh.w	r1, [lr]
 800eb98:	0c12      	lsrs	r2, r2, #16
 800eb9a:	fb09 1102 	mla	r1, r9, r2, r1
 800eb9e:	4567      	cmp	r7, ip
 800eba0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eba8:	d8e6      	bhi.n	800eb78 <__multiply+0x108>
 800ebaa:	9a01      	ldr	r2, [sp, #4]
 800ebac:	50a9      	str	r1, [r5, r2]
 800ebae:	3504      	adds	r5, #4
 800ebb0:	e79b      	b.n	800eaea <__multiply+0x7a>
 800ebb2:	3e01      	subs	r6, #1
 800ebb4:	e79d      	b.n	800eaf2 <__multiply+0x82>
 800ebb6:	bf00      	nop
 800ebb8:	080117cf 	.word	0x080117cf
 800ebbc:	080117e0 	.word	0x080117e0

0800ebc0 <__pow5mult>:
 800ebc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebc4:	4615      	mov	r5, r2
 800ebc6:	f012 0203 	ands.w	r2, r2, #3
 800ebca:	4606      	mov	r6, r0
 800ebcc:	460f      	mov	r7, r1
 800ebce:	d007      	beq.n	800ebe0 <__pow5mult+0x20>
 800ebd0:	4c25      	ldr	r4, [pc, #148]	; (800ec68 <__pow5mult+0xa8>)
 800ebd2:	3a01      	subs	r2, #1
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebda:	f7ff fe9f 	bl	800e91c <__multadd>
 800ebde:	4607      	mov	r7, r0
 800ebe0:	10ad      	asrs	r5, r5, #2
 800ebe2:	d03d      	beq.n	800ec60 <__pow5mult+0xa0>
 800ebe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebe6:	b97c      	cbnz	r4, 800ec08 <__pow5mult+0x48>
 800ebe8:	2010      	movs	r0, #16
 800ebea:	f7ff fe13 	bl	800e814 <malloc>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	6270      	str	r0, [r6, #36]	; 0x24
 800ebf2:	b928      	cbnz	r0, 800ec00 <__pow5mult+0x40>
 800ebf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ebf8:	4b1c      	ldr	r3, [pc, #112]	; (800ec6c <__pow5mult+0xac>)
 800ebfa:	481d      	ldr	r0, [pc, #116]	; (800ec70 <__pow5mult+0xb0>)
 800ebfc:	f000 fb78 	bl	800f2f0 <__assert_func>
 800ec00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec04:	6004      	str	r4, [r0, #0]
 800ec06:	60c4      	str	r4, [r0, #12]
 800ec08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec10:	b94c      	cbnz	r4, 800ec26 <__pow5mult+0x66>
 800ec12:	f240 2171 	movw	r1, #625	; 0x271
 800ec16:	4630      	mov	r0, r6
 800ec18:	f7ff ff14 	bl	800ea44 <__i2b>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	4604      	mov	r4, r0
 800ec20:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec24:	6003      	str	r3, [r0, #0]
 800ec26:	f04f 0900 	mov.w	r9, #0
 800ec2a:	07eb      	lsls	r3, r5, #31
 800ec2c:	d50a      	bpl.n	800ec44 <__pow5mult+0x84>
 800ec2e:	4639      	mov	r1, r7
 800ec30:	4622      	mov	r2, r4
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7ff ff1c 	bl	800ea70 <__multiply>
 800ec38:	4680      	mov	r8, r0
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	f7ff fe4b 	bl	800e8d8 <_Bfree>
 800ec42:	4647      	mov	r7, r8
 800ec44:	106d      	asrs	r5, r5, #1
 800ec46:	d00b      	beq.n	800ec60 <__pow5mult+0xa0>
 800ec48:	6820      	ldr	r0, [r4, #0]
 800ec4a:	b938      	cbnz	r0, 800ec5c <__pow5mult+0x9c>
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff ff0d 	bl	800ea70 <__multiply>
 800ec56:	6020      	str	r0, [r4, #0]
 800ec58:	f8c0 9000 	str.w	r9, [r0]
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	e7e4      	b.n	800ec2a <__pow5mult+0x6a>
 800ec60:	4638      	mov	r0, r7
 800ec62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec66:	bf00      	nop
 800ec68:	08011930 	.word	0x08011930
 800ec6c:	0801175d 	.word	0x0801175d
 800ec70:	080117e0 	.word	0x080117e0

0800ec74 <__lshift>:
 800ec74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec78:	460c      	mov	r4, r1
 800ec7a:	4607      	mov	r7, r0
 800ec7c:	4691      	mov	r9, r2
 800ec7e:	6923      	ldr	r3, [r4, #16]
 800ec80:	6849      	ldr	r1, [r1, #4]
 800ec82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec86:	68a3      	ldr	r3, [r4, #8]
 800ec88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec8c:	f108 0601 	add.w	r6, r8, #1
 800ec90:	42b3      	cmp	r3, r6
 800ec92:	db0b      	blt.n	800ecac <__lshift+0x38>
 800ec94:	4638      	mov	r0, r7
 800ec96:	f7ff fddf 	bl	800e858 <_Balloc>
 800ec9a:	4605      	mov	r5, r0
 800ec9c:	b948      	cbnz	r0, 800ecb2 <__lshift+0x3e>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eca4:	4b29      	ldr	r3, [pc, #164]	; (800ed4c <__lshift+0xd8>)
 800eca6:	482a      	ldr	r0, [pc, #168]	; (800ed50 <__lshift+0xdc>)
 800eca8:	f000 fb22 	bl	800f2f0 <__assert_func>
 800ecac:	3101      	adds	r1, #1
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	e7ee      	b.n	800ec90 <__lshift+0x1c>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f100 0114 	add.w	r1, r0, #20
 800ecb8:	f100 0210 	add.w	r2, r0, #16
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	4553      	cmp	r3, sl
 800ecc0:	db37      	blt.n	800ed32 <__lshift+0xbe>
 800ecc2:	6920      	ldr	r0, [r4, #16]
 800ecc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecc8:	f104 0314 	add.w	r3, r4, #20
 800eccc:	f019 091f 	ands.w	r9, r9, #31
 800ecd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ecd8:	d02f      	beq.n	800ed3a <__lshift+0xc6>
 800ecda:	468a      	mov	sl, r1
 800ecdc:	f04f 0c00 	mov.w	ip, #0
 800ece0:	f1c9 0e20 	rsb	lr, r9, #32
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	fa02 f209 	lsl.w	r2, r2, r9
 800ecea:	ea42 020c 	orr.w	r2, r2, ip
 800ecee:	f84a 2b04 	str.w	r2, [sl], #4
 800ecf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf6:	4298      	cmp	r0, r3
 800ecf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ecfc:	d8f2      	bhi.n	800ece4 <__lshift+0x70>
 800ecfe:	1b03      	subs	r3, r0, r4
 800ed00:	3b15      	subs	r3, #21
 800ed02:	f023 0303 	bic.w	r3, r3, #3
 800ed06:	3304      	adds	r3, #4
 800ed08:	f104 0215 	add.w	r2, r4, #21
 800ed0c:	4290      	cmp	r0, r2
 800ed0e:	bf38      	it	cc
 800ed10:	2304      	movcc	r3, #4
 800ed12:	f841 c003 	str.w	ip, [r1, r3]
 800ed16:	f1bc 0f00 	cmp.w	ip, #0
 800ed1a:	d001      	beq.n	800ed20 <__lshift+0xac>
 800ed1c:	f108 0602 	add.w	r6, r8, #2
 800ed20:	3e01      	subs	r6, #1
 800ed22:	4638      	mov	r0, r7
 800ed24:	4621      	mov	r1, r4
 800ed26:	612e      	str	r6, [r5, #16]
 800ed28:	f7ff fdd6 	bl	800e8d8 <_Bfree>
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed32:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed36:	3301      	adds	r3, #1
 800ed38:	e7c1      	b.n	800ecbe <__lshift+0x4a>
 800ed3a:	3904      	subs	r1, #4
 800ed3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed40:	4298      	cmp	r0, r3
 800ed42:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed46:	d8f9      	bhi.n	800ed3c <__lshift+0xc8>
 800ed48:	e7ea      	b.n	800ed20 <__lshift+0xac>
 800ed4a:	bf00      	nop
 800ed4c:	080117cf 	.word	0x080117cf
 800ed50:	080117e0 	.word	0x080117e0

0800ed54 <__mcmp>:
 800ed54:	4603      	mov	r3, r0
 800ed56:	690a      	ldr	r2, [r1, #16]
 800ed58:	6900      	ldr	r0, [r0, #16]
 800ed5a:	b530      	push	{r4, r5, lr}
 800ed5c:	1a80      	subs	r0, r0, r2
 800ed5e:	d10d      	bne.n	800ed7c <__mcmp+0x28>
 800ed60:	3314      	adds	r3, #20
 800ed62:	3114      	adds	r1, #20
 800ed64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed74:	4295      	cmp	r5, r2
 800ed76:	d002      	beq.n	800ed7e <__mcmp+0x2a>
 800ed78:	d304      	bcc.n	800ed84 <__mcmp+0x30>
 800ed7a:	2001      	movs	r0, #1
 800ed7c:	bd30      	pop	{r4, r5, pc}
 800ed7e:	42a3      	cmp	r3, r4
 800ed80:	d3f4      	bcc.n	800ed6c <__mcmp+0x18>
 800ed82:	e7fb      	b.n	800ed7c <__mcmp+0x28>
 800ed84:	f04f 30ff 	mov.w	r0, #4294967295
 800ed88:	e7f8      	b.n	800ed7c <__mcmp+0x28>
	...

0800ed8c <__mdiff>:
 800ed8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	460d      	mov	r5, r1
 800ed92:	4607      	mov	r7, r0
 800ed94:	4611      	mov	r1, r2
 800ed96:	4628      	mov	r0, r5
 800ed98:	4614      	mov	r4, r2
 800ed9a:	f7ff ffdb 	bl	800ed54 <__mcmp>
 800ed9e:	1e06      	subs	r6, r0, #0
 800eda0:	d111      	bne.n	800edc6 <__mdiff+0x3a>
 800eda2:	4631      	mov	r1, r6
 800eda4:	4638      	mov	r0, r7
 800eda6:	f7ff fd57 	bl	800e858 <_Balloc>
 800edaa:	4602      	mov	r2, r0
 800edac:	b928      	cbnz	r0, 800edba <__mdiff+0x2e>
 800edae:	f240 2132 	movw	r1, #562	; 0x232
 800edb2:	4b3a      	ldr	r3, [pc, #232]	; (800ee9c <__mdiff+0x110>)
 800edb4:	483a      	ldr	r0, [pc, #232]	; (800eea0 <__mdiff+0x114>)
 800edb6:	f000 fa9b 	bl	800f2f0 <__assert_func>
 800edba:	2301      	movs	r3, #1
 800edbc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800edc0:	4610      	mov	r0, r2
 800edc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc6:	bfa4      	itt	ge
 800edc8:	4623      	movge	r3, r4
 800edca:	462c      	movge	r4, r5
 800edcc:	4638      	mov	r0, r7
 800edce:	6861      	ldr	r1, [r4, #4]
 800edd0:	bfa6      	itte	ge
 800edd2:	461d      	movge	r5, r3
 800edd4:	2600      	movge	r6, #0
 800edd6:	2601      	movlt	r6, #1
 800edd8:	f7ff fd3e 	bl	800e858 <_Balloc>
 800eddc:	4602      	mov	r2, r0
 800edde:	b918      	cbnz	r0, 800ede8 <__mdiff+0x5c>
 800ede0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ede4:	4b2d      	ldr	r3, [pc, #180]	; (800ee9c <__mdiff+0x110>)
 800ede6:	e7e5      	b.n	800edb4 <__mdiff+0x28>
 800ede8:	f102 0814 	add.w	r8, r2, #20
 800edec:	46c2      	mov	sl, r8
 800edee:	f04f 0c00 	mov.w	ip, #0
 800edf2:	6927      	ldr	r7, [r4, #16]
 800edf4:	60c6      	str	r6, [r0, #12]
 800edf6:	692e      	ldr	r6, [r5, #16]
 800edf8:	f104 0014 	add.w	r0, r4, #20
 800edfc:	f105 0914 	add.w	r9, r5, #20
 800ee00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ee04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee08:	3410      	adds	r4, #16
 800ee0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ee0e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee12:	fa1f f18b 	uxth.w	r1, fp
 800ee16:	448c      	add	ip, r1
 800ee18:	b299      	uxth	r1, r3
 800ee1a:	0c1b      	lsrs	r3, r3, #16
 800ee1c:	ebac 0101 	sub.w	r1, ip, r1
 800ee20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee24:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ee28:	b289      	uxth	r1, r1
 800ee2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ee2e:	454e      	cmp	r6, r9
 800ee30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ee34:	f84a 3b04 	str.w	r3, [sl], #4
 800ee38:	d8e7      	bhi.n	800ee0a <__mdiff+0x7e>
 800ee3a:	1b73      	subs	r3, r6, r5
 800ee3c:	3b15      	subs	r3, #21
 800ee3e:	f023 0303 	bic.w	r3, r3, #3
 800ee42:	3515      	adds	r5, #21
 800ee44:	3304      	adds	r3, #4
 800ee46:	42ae      	cmp	r6, r5
 800ee48:	bf38      	it	cc
 800ee4a:	2304      	movcc	r3, #4
 800ee4c:	4418      	add	r0, r3
 800ee4e:	4443      	add	r3, r8
 800ee50:	461e      	mov	r6, r3
 800ee52:	4605      	mov	r5, r0
 800ee54:	4575      	cmp	r5, lr
 800ee56:	d30e      	bcc.n	800ee76 <__mdiff+0xea>
 800ee58:	f10e 0103 	add.w	r1, lr, #3
 800ee5c:	1a09      	subs	r1, r1, r0
 800ee5e:	f021 0103 	bic.w	r1, r1, #3
 800ee62:	3803      	subs	r0, #3
 800ee64:	4586      	cmp	lr, r0
 800ee66:	bf38      	it	cc
 800ee68:	2100      	movcc	r1, #0
 800ee6a:	4419      	add	r1, r3
 800ee6c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ee70:	b18b      	cbz	r3, 800ee96 <__mdiff+0x10a>
 800ee72:	6117      	str	r7, [r2, #16]
 800ee74:	e7a4      	b.n	800edc0 <__mdiff+0x34>
 800ee76:	f855 8b04 	ldr.w	r8, [r5], #4
 800ee7a:	fa1f f188 	uxth.w	r1, r8
 800ee7e:	4461      	add	r1, ip
 800ee80:	140c      	asrs	r4, r1, #16
 800ee82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee86:	b289      	uxth	r1, r1
 800ee88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee8c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ee90:	f846 1b04 	str.w	r1, [r6], #4
 800ee94:	e7de      	b.n	800ee54 <__mdiff+0xc8>
 800ee96:	3f01      	subs	r7, #1
 800ee98:	e7e8      	b.n	800ee6c <__mdiff+0xe0>
 800ee9a:	bf00      	nop
 800ee9c:	080117cf 	.word	0x080117cf
 800eea0:	080117e0 	.word	0x080117e0

0800eea4 <__d2b>:
 800eea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eea8:	2101      	movs	r1, #1
 800eeaa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800eeae:	4690      	mov	r8, r2
 800eeb0:	461d      	mov	r5, r3
 800eeb2:	f7ff fcd1 	bl	800e858 <_Balloc>
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	b930      	cbnz	r0, 800eec8 <__d2b+0x24>
 800eeba:	4602      	mov	r2, r0
 800eebc:	f240 310a 	movw	r1, #778	; 0x30a
 800eec0:	4b24      	ldr	r3, [pc, #144]	; (800ef54 <__d2b+0xb0>)
 800eec2:	4825      	ldr	r0, [pc, #148]	; (800ef58 <__d2b+0xb4>)
 800eec4:	f000 fa14 	bl	800f2f0 <__assert_func>
 800eec8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800eecc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800eed0:	bb2d      	cbnz	r5, 800ef1e <__d2b+0x7a>
 800eed2:	9301      	str	r3, [sp, #4]
 800eed4:	f1b8 0300 	subs.w	r3, r8, #0
 800eed8:	d026      	beq.n	800ef28 <__d2b+0x84>
 800eeda:	4668      	mov	r0, sp
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	f7ff fd83 	bl	800e9e8 <__lo0bits>
 800eee2:	9900      	ldr	r1, [sp, #0]
 800eee4:	b1f0      	cbz	r0, 800ef24 <__d2b+0x80>
 800eee6:	9a01      	ldr	r2, [sp, #4]
 800eee8:	f1c0 0320 	rsb	r3, r0, #32
 800eeec:	fa02 f303 	lsl.w	r3, r2, r3
 800eef0:	430b      	orrs	r3, r1
 800eef2:	40c2      	lsrs	r2, r0
 800eef4:	6163      	str	r3, [r4, #20]
 800eef6:	9201      	str	r2, [sp, #4]
 800eef8:	9b01      	ldr	r3, [sp, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	bf14      	ite	ne
 800eefe:	2102      	movne	r1, #2
 800ef00:	2101      	moveq	r1, #1
 800ef02:	61a3      	str	r3, [r4, #24]
 800ef04:	6121      	str	r1, [r4, #16]
 800ef06:	b1c5      	cbz	r5, 800ef3a <__d2b+0x96>
 800ef08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ef0c:	4405      	add	r5, r0
 800ef0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef12:	603d      	str	r5, [r7, #0]
 800ef14:	6030      	str	r0, [r6, #0]
 800ef16:	4620      	mov	r0, r4
 800ef18:	b002      	add	sp, #8
 800ef1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef22:	e7d6      	b.n	800eed2 <__d2b+0x2e>
 800ef24:	6161      	str	r1, [r4, #20]
 800ef26:	e7e7      	b.n	800eef8 <__d2b+0x54>
 800ef28:	a801      	add	r0, sp, #4
 800ef2a:	f7ff fd5d 	bl	800e9e8 <__lo0bits>
 800ef2e:	2101      	movs	r1, #1
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	6121      	str	r1, [r4, #16]
 800ef34:	6163      	str	r3, [r4, #20]
 800ef36:	3020      	adds	r0, #32
 800ef38:	e7e5      	b.n	800ef06 <__d2b+0x62>
 800ef3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ef3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ef42:	6038      	str	r0, [r7, #0]
 800ef44:	6918      	ldr	r0, [r3, #16]
 800ef46:	f7ff fd2f 	bl	800e9a8 <__hi0bits>
 800ef4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ef4e:	6031      	str	r1, [r6, #0]
 800ef50:	e7e1      	b.n	800ef16 <__d2b+0x72>
 800ef52:	bf00      	nop
 800ef54:	080117cf 	.word	0x080117cf
 800ef58:	080117e0 	.word	0x080117e0

0800ef5c <_calloc_r>:
 800ef5c:	b570      	push	{r4, r5, r6, lr}
 800ef5e:	fba1 5402 	umull	r5, r4, r1, r2
 800ef62:	b934      	cbnz	r4, 800ef72 <_calloc_r+0x16>
 800ef64:	4629      	mov	r1, r5
 800ef66:	f7fd ff31 	bl	800cdcc <_malloc_r>
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	b928      	cbnz	r0, 800ef7a <_calloc_r+0x1e>
 800ef6e:	4630      	mov	r0, r6
 800ef70:	bd70      	pop	{r4, r5, r6, pc}
 800ef72:	220c      	movs	r2, #12
 800ef74:	2600      	movs	r6, #0
 800ef76:	6002      	str	r2, [r0, #0]
 800ef78:	e7f9      	b.n	800ef6e <_calloc_r+0x12>
 800ef7a:	462a      	mov	r2, r5
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	f7fd fefc 	bl	800cd7a <memset>
 800ef82:	e7f4      	b.n	800ef6e <_calloc_r+0x12>

0800ef84 <_free_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4605      	mov	r5, r0
 800ef88:	2900      	cmp	r1, #0
 800ef8a:	d040      	beq.n	800f00e <_free_r+0x8a>
 800ef8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef90:	1f0c      	subs	r4, r1, #4
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bfb8      	it	lt
 800ef96:	18e4      	addlt	r4, r4, r3
 800ef98:	f7ff fc52 	bl	800e840 <__malloc_lock>
 800ef9c:	4a1c      	ldr	r2, [pc, #112]	; (800f010 <_free_r+0x8c>)
 800ef9e:	6813      	ldr	r3, [r2, #0]
 800efa0:	b933      	cbnz	r3, 800efb0 <_free_r+0x2c>
 800efa2:	6063      	str	r3, [r4, #4]
 800efa4:	6014      	str	r4, [r2, #0]
 800efa6:	4628      	mov	r0, r5
 800efa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efac:	f7ff bc4e 	b.w	800e84c <__malloc_unlock>
 800efb0:	42a3      	cmp	r3, r4
 800efb2:	d908      	bls.n	800efc6 <_free_r+0x42>
 800efb4:	6820      	ldr	r0, [r4, #0]
 800efb6:	1821      	adds	r1, r4, r0
 800efb8:	428b      	cmp	r3, r1
 800efba:	bf01      	itttt	eq
 800efbc:	6819      	ldreq	r1, [r3, #0]
 800efbe:	685b      	ldreq	r3, [r3, #4]
 800efc0:	1809      	addeq	r1, r1, r0
 800efc2:	6021      	streq	r1, [r4, #0]
 800efc4:	e7ed      	b.n	800efa2 <_free_r+0x1e>
 800efc6:	461a      	mov	r2, r3
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	b10b      	cbz	r3, 800efd0 <_free_r+0x4c>
 800efcc:	42a3      	cmp	r3, r4
 800efce:	d9fa      	bls.n	800efc6 <_free_r+0x42>
 800efd0:	6811      	ldr	r1, [r2, #0]
 800efd2:	1850      	adds	r0, r2, r1
 800efd4:	42a0      	cmp	r0, r4
 800efd6:	d10b      	bne.n	800eff0 <_free_r+0x6c>
 800efd8:	6820      	ldr	r0, [r4, #0]
 800efda:	4401      	add	r1, r0
 800efdc:	1850      	adds	r0, r2, r1
 800efde:	4283      	cmp	r3, r0
 800efe0:	6011      	str	r1, [r2, #0]
 800efe2:	d1e0      	bne.n	800efa6 <_free_r+0x22>
 800efe4:	6818      	ldr	r0, [r3, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	4401      	add	r1, r0
 800efea:	6011      	str	r1, [r2, #0]
 800efec:	6053      	str	r3, [r2, #4]
 800efee:	e7da      	b.n	800efa6 <_free_r+0x22>
 800eff0:	d902      	bls.n	800eff8 <_free_r+0x74>
 800eff2:	230c      	movs	r3, #12
 800eff4:	602b      	str	r3, [r5, #0]
 800eff6:	e7d6      	b.n	800efa6 <_free_r+0x22>
 800eff8:	6820      	ldr	r0, [r4, #0]
 800effa:	1821      	adds	r1, r4, r0
 800effc:	428b      	cmp	r3, r1
 800effe:	bf01      	itttt	eq
 800f000:	6819      	ldreq	r1, [r3, #0]
 800f002:	685b      	ldreq	r3, [r3, #4]
 800f004:	1809      	addeq	r1, r1, r0
 800f006:	6021      	streq	r1, [r4, #0]
 800f008:	6063      	str	r3, [r4, #4]
 800f00a:	6054      	str	r4, [r2, #4]
 800f00c:	e7cb      	b.n	800efa6 <_free_r+0x22>
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	20007934 	.word	0x20007934

0800f014 <__ssputs_r>:
 800f014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f018:	688e      	ldr	r6, [r1, #8]
 800f01a:	4682      	mov	sl, r0
 800f01c:	429e      	cmp	r6, r3
 800f01e:	460c      	mov	r4, r1
 800f020:	4690      	mov	r8, r2
 800f022:	461f      	mov	r7, r3
 800f024:	d838      	bhi.n	800f098 <__ssputs_r+0x84>
 800f026:	898a      	ldrh	r2, [r1, #12]
 800f028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f02c:	d032      	beq.n	800f094 <__ssputs_r+0x80>
 800f02e:	6825      	ldr	r5, [r4, #0]
 800f030:	6909      	ldr	r1, [r1, #16]
 800f032:	3301      	adds	r3, #1
 800f034:	eba5 0901 	sub.w	r9, r5, r1
 800f038:	6965      	ldr	r5, [r4, #20]
 800f03a:	444b      	add	r3, r9
 800f03c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f044:	106d      	asrs	r5, r5, #1
 800f046:	429d      	cmp	r5, r3
 800f048:	bf38      	it	cc
 800f04a:	461d      	movcc	r5, r3
 800f04c:	0553      	lsls	r3, r2, #21
 800f04e:	d531      	bpl.n	800f0b4 <__ssputs_r+0xa0>
 800f050:	4629      	mov	r1, r5
 800f052:	f7fd febb 	bl	800cdcc <_malloc_r>
 800f056:	4606      	mov	r6, r0
 800f058:	b950      	cbnz	r0, 800f070 <__ssputs_r+0x5c>
 800f05a:	230c      	movs	r3, #12
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295
 800f060:	f8ca 3000 	str.w	r3, [sl]
 800f064:	89a3      	ldrh	r3, [r4, #12]
 800f066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f06a:	81a3      	strh	r3, [r4, #12]
 800f06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f070:	464a      	mov	r2, r9
 800f072:	6921      	ldr	r1, [r4, #16]
 800f074:	f7fd fe73 	bl	800cd5e <memcpy>
 800f078:	89a3      	ldrh	r3, [r4, #12]
 800f07a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f082:	81a3      	strh	r3, [r4, #12]
 800f084:	6126      	str	r6, [r4, #16]
 800f086:	444e      	add	r6, r9
 800f088:	6026      	str	r6, [r4, #0]
 800f08a:	463e      	mov	r6, r7
 800f08c:	6165      	str	r5, [r4, #20]
 800f08e:	eba5 0509 	sub.w	r5, r5, r9
 800f092:	60a5      	str	r5, [r4, #8]
 800f094:	42be      	cmp	r6, r7
 800f096:	d900      	bls.n	800f09a <__ssputs_r+0x86>
 800f098:	463e      	mov	r6, r7
 800f09a:	4632      	mov	r2, r6
 800f09c:	4641      	mov	r1, r8
 800f09e:	6820      	ldr	r0, [r4, #0]
 800f0a0:	f000 f968 	bl	800f374 <memmove>
 800f0a4:	68a3      	ldr	r3, [r4, #8]
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	1b9b      	subs	r3, r3, r6
 800f0aa:	60a3      	str	r3, [r4, #8]
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	4433      	add	r3, r6
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	e7db      	b.n	800f06c <__ssputs_r+0x58>
 800f0b4:	462a      	mov	r2, r5
 800f0b6:	f000 f977 	bl	800f3a8 <_realloc_r>
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d1e1      	bne.n	800f084 <__ssputs_r+0x70>
 800f0c0:	4650      	mov	r0, sl
 800f0c2:	6921      	ldr	r1, [r4, #16]
 800f0c4:	f7ff ff5e 	bl	800ef84 <_free_r>
 800f0c8:	e7c7      	b.n	800f05a <__ssputs_r+0x46>
	...

0800f0cc <_svfiprintf_r>:
 800f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d0:	4698      	mov	r8, r3
 800f0d2:	898b      	ldrh	r3, [r1, #12]
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	061b      	lsls	r3, r3, #24
 800f0d8:	460d      	mov	r5, r1
 800f0da:	4614      	mov	r4, r2
 800f0dc:	b09d      	sub	sp, #116	; 0x74
 800f0de:	d50e      	bpl.n	800f0fe <_svfiprintf_r+0x32>
 800f0e0:	690b      	ldr	r3, [r1, #16]
 800f0e2:	b963      	cbnz	r3, 800f0fe <_svfiprintf_r+0x32>
 800f0e4:	2140      	movs	r1, #64	; 0x40
 800f0e6:	f7fd fe71 	bl	800cdcc <_malloc_r>
 800f0ea:	6028      	str	r0, [r5, #0]
 800f0ec:	6128      	str	r0, [r5, #16]
 800f0ee:	b920      	cbnz	r0, 800f0fa <_svfiprintf_r+0x2e>
 800f0f0:	230c      	movs	r3, #12
 800f0f2:	603b      	str	r3, [r7, #0]
 800f0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f8:	e0d1      	b.n	800f29e <_svfiprintf_r+0x1d2>
 800f0fa:	2340      	movs	r3, #64	; 0x40
 800f0fc:	616b      	str	r3, [r5, #20]
 800f0fe:	2300      	movs	r3, #0
 800f100:	9309      	str	r3, [sp, #36]	; 0x24
 800f102:	2320      	movs	r3, #32
 800f104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f108:	2330      	movs	r3, #48	; 0x30
 800f10a:	f04f 0901 	mov.w	r9, #1
 800f10e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f2b8 <_svfiprintf_r+0x1ec>
 800f116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f11a:	4623      	mov	r3, r4
 800f11c:	469a      	mov	sl, r3
 800f11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f122:	b10a      	cbz	r2, 800f128 <_svfiprintf_r+0x5c>
 800f124:	2a25      	cmp	r2, #37	; 0x25
 800f126:	d1f9      	bne.n	800f11c <_svfiprintf_r+0x50>
 800f128:	ebba 0b04 	subs.w	fp, sl, r4
 800f12c:	d00b      	beq.n	800f146 <_svfiprintf_r+0x7a>
 800f12e:	465b      	mov	r3, fp
 800f130:	4622      	mov	r2, r4
 800f132:	4629      	mov	r1, r5
 800f134:	4638      	mov	r0, r7
 800f136:	f7ff ff6d 	bl	800f014 <__ssputs_r>
 800f13a:	3001      	adds	r0, #1
 800f13c:	f000 80aa 	beq.w	800f294 <_svfiprintf_r+0x1c8>
 800f140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f142:	445a      	add	r2, fp
 800f144:	9209      	str	r2, [sp, #36]	; 0x24
 800f146:	f89a 3000 	ldrb.w	r3, [sl]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 80a2 	beq.w	800f294 <_svfiprintf_r+0x1c8>
 800f150:	2300      	movs	r3, #0
 800f152:	f04f 32ff 	mov.w	r2, #4294967295
 800f156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f15a:	f10a 0a01 	add.w	sl, sl, #1
 800f15e:	9304      	str	r3, [sp, #16]
 800f160:	9307      	str	r3, [sp, #28]
 800f162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f166:	931a      	str	r3, [sp, #104]	; 0x68
 800f168:	4654      	mov	r4, sl
 800f16a:	2205      	movs	r2, #5
 800f16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f170:	4851      	ldr	r0, [pc, #324]	; (800f2b8 <_svfiprintf_r+0x1ec>)
 800f172:	f7ff fb57 	bl	800e824 <memchr>
 800f176:	9a04      	ldr	r2, [sp, #16]
 800f178:	b9d8      	cbnz	r0, 800f1b2 <_svfiprintf_r+0xe6>
 800f17a:	06d0      	lsls	r0, r2, #27
 800f17c:	bf44      	itt	mi
 800f17e:	2320      	movmi	r3, #32
 800f180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f184:	0711      	lsls	r1, r2, #28
 800f186:	bf44      	itt	mi
 800f188:	232b      	movmi	r3, #43	; 0x2b
 800f18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f18e:	f89a 3000 	ldrb.w	r3, [sl]
 800f192:	2b2a      	cmp	r3, #42	; 0x2a
 800f194:	d015      	beq.n	800f1c2 <_svfiprintf_r+0xf6>
 800f196:	4654      	mov	r4, sl
 800f198:	2000      	movs	r0, #0
 800f19a:	f04f 0c0a 	mov.w	ip, #10
 800f19e:	9a07      	ldr	r2, [sp, #28]
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a6:	3b30      	subs	r3, #48	; 0x30
 800f1a8:	2b09      	cmp	r3, #9
 800f1aa:	d94e      	bls.n	800f24a <_svfiprintf_r+0x17e>
 800f1ac:	b1b0      	cbz	r0, 800f1dc <_svfiprintf_r+0x110>
 800f1ae:	9207      	str	r2, [sp, #28]
 800f1b0:	e014      	b.n	800f1dc <_svfiprintf_r+0x110>
 800f1b2:	eba0 0308 	sub.w	r3, r0, r8
 800f1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	46a2      	mov	sl, r4
 800f1be:	9304      	str	r3, [sp, #16]
 800f1c0:	e7d2      	b.n	800f168 <_svfiprintf_r+0x9c>
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	1d19      	adds	r1, r3, #4
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	9103      	str	r1, [sp, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	bfbb      	ittet	lt
 800f1ce:	425b      	neglt	r3, r3
 800f1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d4:	9307      	strge	r3, [sp, #28]
 800f1d6:	9307      	strlt	r3, [sp, #28]
 800f1d8:	bfb8      	it	lt
 800f1da:	9204      	strlt	r2, [sp, #16]
 800f1dc:	7823      	ldrb	r3, [r4, #0]
 800f1de:	2b2e      	cmp	r3, #46	; 0x2e
 800f1e0:	d10c      	bne.n	800f1fc <_svfiprintf_r+0x130>
 800f1e2:	7863      	ldrb	r3, [r4, #1]
 800f1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e6:	d135      	bne.n	800f254 <_svfiprintf_r+0x188>
 800f1e8:	9b03      	ldr	r3, [sp, #12]
 800f1ea:	3402      	adds	r4, #2
 800f1ec:	1d1a      	adds	r2, r3, #4
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	9203      	str	r2, [sp, #12]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	bfb8      	it	lt
 800f1f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1fa:	9305      	str	r3, [sp, #20]
 800f1fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f2bc <_svfiprintf_r+0x1f0>
 800f200:	2203      	movs	r2, #3
 800f202:	4650      	mov	r0, sl
 800f204:	7821      	ldrb	r1, [r4, #0]
 800f206:	f7ff fb0d 	bl	800e824 <memchr>
 800f20a:	b140      	cbz	r0, 800f21e <_svfiprintf_r+0x152>
 800f20c:	2340      	movs	r3, #64	; 0x40
 800f20e:	eba0 000a 	sub.w	r0, r0, sl
 800f212:	fa03 f000 	lsl.w	r0, r3, r0
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	3401      	adds	r4, #1
 800f21a:	4303      	orrs	r3, r0
 800f21c:	9304      	str	r3, [sp, #16]
 800f21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f222:	2206      	movs	r2, #6
 800f224:	4826      	ldr	r0, [pc, #152]	; (800f2c0 <_svfiprintf_r+0x1f4>)
 800f226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f22a:	f7ff fafb 	bl	800e824 <memchr>
 800f22e:	2800      	cmp	r0, #0
 800f230:	d038      	beq.n	800f2a4 <_svfiprintf_r+0x1d8>
 800f232:	4b24      	ldr	r3, [pc, #144]	; (800f2c4 <_svfiprintf_r+0x1f8>)
 800f234:	bb1b      	cbnz	r3, 800f27e <_svfiprintf_r+0x1b2>
 800f236:	9b03      	ldr	r3, [sp, #12]
 800f238:	3307      	adds	r3, #7
 800f23a:	f023 0307 	bic.w	r3, r3, #7
 800f23e:	3308      	adds	r3, #8
 800f240:	9303      	str	r3, [sp, #12]
 800f242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f244:	4433      	add	r3, r6
 800f246:	9309      	str	r3, [sp, #36]	; 0x24
 800f248:	e767      	b.n	800f11a <_svfiprintf_r+0x4e>
 800f24a:	460c      	mov	r4, r1
 800f24c:	2001      	movs	r0, #1
 800f24e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f252:	e7a5      	b.n	800f1a0 <_svfiprintf_r+0xd4>
 800f254:	2300      	movs	r3, #0
 800f256:	f04f 0c0a 	mov.w	ip, #10
 800f25a:	4619      	mov	r1, r3
 800f25c:	3401      	adds	r4, #1
 800f25e:	9305      	str	r3, [sp, #20]
 800f260:	4620      	mov	r0, r4
 800f262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f266:	3a30      	subs	r2, #48	; 0x30
 800f268:	2a09      	cmp	r2, #9
 800f26a:	d903      	bls.n	800f274 <_svfiprintf_r+0x1a8>
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0c5      	beq.n	800f1fc <_svfiprintf_r+0x130>
 800f270:	9105      	str	r1, [sp, #20]
 800f272:	e7c3      	b.n	800f1fc <_svfiprintf_r+0x130>
 800f274:	4604      	mov	r4, r0
 800f276:	2301      	movs	r3, #1
 800f278:	fb0c 2101 	mla	r1, ip, r1, r2
 800f27c:	e7f0      	b.n	800f260 <_svfiprintf_r+0x194>
 800f27e:	ab03      	add	r3, sp, #12
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	462a      	mov	r2, r5
 800f284:	4638      	mov	r0, r7
 800f286:	4b10      	ldr	r3, [pc, #64]	; (800f2c8 <_svfiprintf_r+0x1fc>)
 800f288:	a904      	add	r1, sp, #16
 800f28a:	f7fd feb1 	bl	800cff0 <_printf_float>
 800f28e:	1c42      	adds	r2, r0, #1
 800f290:	4606      	mov	r6, r0
 800f292:	d1d6      	bne.n	800f242 <_svfiprintf_r+0x176>
 800f294:	89ab      	ldrh	r3, [r5, #12]
 800f296:	065b      	lsls	r3, r3, #25
 800f298:	f53f af2c 	bmi.w	800f0f4 <_svfiprintf_r+0x28>
 800f29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f29e:	b01d      	add	sp, #116	; 0x74
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a4:	ab03      	add	r3, sp, #12
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	462a      	mov	r2, r5
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	4b06      	ldr	r3, [pc, #24]	; (800f2c8 <_svfiprintf_r+0x1fc>)
 800f2ae:	a904      	add	r1, sp, #16
 800f2b0:	f7fe f93a 	bl	800d528 <_printf_i>
 800f2b4:	e7eb      	b.n	800f28e <_svfiprintf_r+0x1c2>
 800f2b6:	bf00      	nop
 800f2b8:	0801193c 	.word	0x0801193c
 800f2bc:	08011942 	.word	0x08011942
 800f2c0:	08011946 	.word	0x08011946
 800f2c4:	0800cff1 	.word	0x0800cff1
 800f2c8:	0800f015 	.word	0x0800f015

0800f2cc <_read_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	4608      	mov	r0, r1
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	4d05      	ldr	r5, [pc, #20]	; (800f2ec <_read_r+0x20>)
 800f2d8:	602a      	str	r2, [r5, #0]
 800f2da:	461a      	mov	r2, r3
 800f2dc:	f7f5 fcd3 	bl	8004c86 <_read>
 800f2e0:	1c43      	adds	r3, r0, #1
 800f2e2:	d102      	bne.n	800f2ea <_read_r+0x1e>
 800f2e4:	682b      	ldr	r3, [r5, #0]
 800f2e6:	b103      	cbz	r3, 800f2ea <_read_r+0x1e>
 800f2e8:	6023      	str	r3, [r4, #0]
 800f2ea:	bd38      	pop	{r3, r4, r5, pc}
 800f2ec:	2000793c 	.word	0x2000793c

0800f2f0 <__assert_func>:
 800f2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2f2:	4614      	mov	r4, r2
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	4b09      	ldr	r3, [pc, #36]	; (800f31c <__assert_func+0x2c>)
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68d8      	ldr	r0, [r3, #12]
 800f2fe:	b14c      	cbz	r4, 800f314 <__assert_func+0x24>
 800f300:	4b07      	ldr	r3, [pc, #28]	; (800f320 <__assert_func+0x30>)
 800f302:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f306:	9100      	str	r1, [sp, #0]
 800f308:	462b      	mov	r3, r5
 800f30a:	4906      	ldr	r1, [pc, #24]	; (800f324 <__assert_func+0x34>)
 800f30c:	f000 f80e 	bl	800f32c <fiprintf>
 800f310:	f000 fa9e 	bl	800f850 <abort>
 800f314:	4b04      	ldr	r3, [pc, #16]	; (800f328 <__assert_func+0x38>)
 800f316:	461c      	mov	r4, r3
 800f318:	e7f3      	b.n	800f302 <__assert_func+0x12>
 800f31a:	bf00      	nop
 800f31c:	20000038 	.word	0x20000038
 800f320:	0801194d 	.word	0x0801194d
 800f324:	0801195a 	.word	0x0801195a
 800f328:	08011988 	.word	0x08011988

0800f32c <fiprintf>:
 800f32c:	b40e      	push	{r1, r2, r3}
 800f32e:	b503      	push	{r0, r1, lr}
 800f330:	4601      	mov	r1, r0
 800f332:	ab03      	add	r3, sp, #12
 800f334:	4805      	ldr	r0, [pc, #20]	; (800f34c <fiprintf+0x20>)
 800f336:	f853 2b04 	ldr.w	r2, [r3], #4
 800f33a:	6800      	ldr	r0, [r0, #0]
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	f000 f889 	bl	800f454 <_vfiprintf_r>
 800f342:	b002      	add	sp, #8
 800f344:	f85d eb04 	ldr.w	lr, [sp], #4
 800f348:	b003      	add	sp, #12
 800f34a:	4770      	bx	lr
 800f34c:	20000038 	.word	0x20000038

0800f350 <__ascii_mbtowc>:
 800f350:	b082      	sub	sp, #8
 800f352:	b901      	cbnz	r1, 800f356 <__ascii_mbtowc+0x6>
 800f354:	a901      	add	r1, sp, #4
 800f356:	b142      	cbz	r2, 800f36a <__ascii_mbtowc+0x1a>
 800f358:	b14b      	cbz	r3, 800f36e <__ascii_mbtowc+0x1e>
 800f35a:	7813      	ldrb	r3, [r2, #0]
 800f35c:	600b      	str	r3, [r1, #0]
 800f35e:	7812      	ldrb	r2, [r2, #0]
 800f360:	1e10      	subs	r0, r2, #0
 800f362:	bf18      	it	ne
 800f364:	2001      	movne	r0, #1
 800f366:	b002      	add	sp, #8
 800f368:	4770      	bx	lr
 800f36a:	4610      	mov	r0, r2
 800f36c:	e7fb      	b.n	800f366 <__ascii_mbtowc+0x16>
 800f36e:	f06f 0001 	mvn.w	r0, #1
 800f372:	e7f8      	b.n	800f366 <__ascii_mbtowc+0x16>

0800f374 <memmove>:
 800f374:	4288      	cmp	r0, r1
 800f376:	b510      	push	{r4, lr}
 800f378:	eb01 0402 	add.w	r4, r1, r2
 800f37c:	d902      	bls.n	800f384 <memmove+0x10>
 800f37e:	4284      	cmp	r4, r0
 800f380:	4623      	mov	r3, r4
 800f382:	d807      	bhi.n	800f394 <memmove+0x20>
 800f384:	1e43      	subs	r3, r0, #1
 800f386:	42a1      	cmp	r1, r4
 800f388:	d008      	beq.n	800f39c <memmove+0x28>
 800f38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f38e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f392:	e7f8      	b.n	800f386 <memmove+0x12>
 800f394:	4601      	mov	r1, r0
 800f396:	4402      	add	r2, r0
 800f398:	428a      	cmp	r2, r1
 800f39a:	d100      	bne.n	800f39e <memmove+0x2a>
 800f39c:	bd10      	pop	{r4, pc}
 800f39e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3a6:	e7f7      	b.n	800f398 <memmove+0x24>

0800f3a8 <_realloc_r>:
 800f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	4614      	mov	r4, r2
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	b921      	cbnz	r1, 800f3be <_realloc_r+0x16>
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ba:	f7fd bd07 	b.w	800cdcc <_malloc_r>
 800f3be:	b92a      	cbnz	r2, 800f3cc <_realloc_r+0x24>
 800f3c0:	f7ff fde0 	bl	800ef84 <_free_r>
 800f3c4:	4625      	mov	r5, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3cc:	f000 faac 	bl	800f928 <_malloc_usable_size_r>
 800f3d0:	4284      	cmp	r4, r0
 800f3d2:	4607      	mov	r7, r0
 800f3d4:	d802      	bhi.n	800f3dc <_realloc_r+0x34>
 800f3d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3da:	d812      	bhi.n	800f402 <_realloc_r+0x5a>
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4640      	mov	r0, r8
 800f3e0:	f7fd fcf4 	bl	800cdcc <_malloc_r>
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d0ed      	beq.n	800f3c6 <_realloc_r+0x1e>
 800f3ea:	42bc      	cmp	r4, r7
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	bf28      	it	cs
 800f3f2:	463a      	movcs	r2, r7
 800f3f4:	f7fd fcb3 	bl	800cd5e <memcpy>
 800f3f8:	4631      	mov	r1, r6
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	f7ff fdc2 	bl	800ef84 <_free_r>
 800f400:	e7e1      	b.n	800f3c6 <_realloc_r+0x1e>
 800f402:	4635      	mov	r5, r6
 800f404:	e7df      	b.n	800f3c6 <_realloc_r+0x1e>

0800f406 <__sfputc_r>:
 800f406:	6893      	ldr	r3, [r2, #8]
 800f408:	b410      	push	{r4}
 800f40a:	3b01      	subs	r3, #1
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	6093      	str	r3, [r2, #8]
 800f410:	da07      	bge.n	800f422 <__sfputc_r+0x1c>
 800f412:	6994      	ldr	r4, [r2, #24]
 800f414:	42a3      	cmp	r3, r4
 800f416:	db01      	blt.n	800f41c <__sfputc_r+0x16>
 800f418:	290a      	cmp	r1, #10
 800f41a:	d102      	bne.n	800f422 <__sfputc_r+0x1c>
 800f41c:	bc10      	pop	{r4}
 800f41e:	f000 b949 	b.w	800f6b4 <__swbuf_r>
 800f422:	6813      	ldr	r3, [r2, #0]
 800f424:	1c58      	adds	r0, r3, #1
 800f426:	6010      	str	r0, [r2, #0]
 800f428:	7019      	strb	r1, [r3, #0]
 800f42a:	4608      	mov	r0, r1
 800f42c:	bc10      	pop	{r4}
 800f42e:	4770      	bx	lr

0800f430 <__sfputs_r>:
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	4606      	mov	r6, r0
 800f434:	460f      	mov	r7, r1
 800f436:	4614      	mov	r4, r2
 800f438:	18d5      	adds	r5, r2, r3
 800f43a:	42ac      	cmp	r4, r5
 800f43c:	d101      	bne.n	800f442 <__sfputs_r+0x12>
 800f43e:	2000      	movs	r0, #0
 800f440:	e007      	b.n	800f452 <__sfputs_r+0x22>
 800f442:	463a      	mov	r2, r7
 800f444:	4630      	mov	r0, r6
 800f446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f44a:	f7ff ffdc 	bl	800f406 <__sfputc_r>
 800f44e:	1c43      	adds	r3, r0, #1
 800f450:	d1f3      	bne.n	800f43a <__sfputs_r+0xa>
 800f452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f454 <_vfiprintf_r>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	460d      	mov	r5, r1
 800f45a:	4614      	mov	r4, r2
 800f45c:	4698      	mov	r8, r3
 800f45e:	4606      	mov	r6, r0
 800f460:	b09d      	sub	sp, #116	; 0x74
 800f462:	b118      	cbz	r0, 800f46c <_vfiprintf_r+0x18>
 800f464:	6983      	ldr	r3, [r0, #24]
 800f466:	b90b      	cbnz	r3, 800f46c <_vfiprintf_r+0x18>
 800f468:	f7fd fbb4 	bl	800cbd4 <__sinit>
 800f46c:	4b89      	ldr	r3, [pc, #548]	; (800f694 <_vfiprintf_r+0x240>)
 800f46e:	429d      	cmp	r5, r3
 800f470:	d11b      	bne.n	800f4aa <_vfiprintf_r+0x56>
 800f472:	6875      	ldr	r5, [r6, #4]
 800f474:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f476:	07d9      	lsls	r1, r3, #31
 800f478:	d405      	bmi.n	800f486 <_vfiprintf_r+0x32>
 800f47a:	89ab      	ldrh	r3, [r5, #12]
 800f47c:	059a      	lsls	r2, r3, #22
 800f47e:	d402      	bmi.n	800f486 <_vfiprintf_r+0x32>
 800f480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f482:	f7fd fc6a 	bl	800cd5a <__retarget_lock_acquire_recursive>
 800f486:	89ab      	ldrh	r3, [r5, #12]
 800f488:	071b      	lsls	r3, r3, #28
 800f48a:	d501      	bpl.n	800f490 <_vfiprintf_r+0x3c>
 800f48c:	692b      	ldr	r3, [r5, #16]
 800f48e:	b9eb      	cbnz	r3, 800f4cc <_vfiprintf_r+0x78>
 800f490:	4629      	mov	r1, r5
 800f492:	4630      	mov	r0, r6
 800f494:	f000 f96e 	bl	800f774 <__swsetup_r>
 800f498:	b1c0      	cbz	r0, 800f4cc <_vfiprintf_r+0x78>
 800f49a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f49c:	07dc      	lsls	r4, r3, #31
 800f49e:	d50e      	bpl.n	800f4be <_vfiprintf_r+0x6a>
 800f4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a4:	b01d      	add	sp, #116	; 0x74
 800f4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4aa:	4b7b      	ldr	r3, [pc, #492]	; (800f698 <_vfiprintf_r+0x244>)
 800f4ac:	429d      	cmp	r5, r3
 800f4ae:	d101      	bne.n	800f4b4 <_vfiprintf_r+0x60>
 800f4b0:	68b5      	ldr	r5, [r6, #8]
 800f4b2:	e7df      	b.n	800f474 <_vfiprintf_r+0x20>
 800f4b4:	4b79      	ldr	r3, [pc, #484]	; (800f69c <_vfiprintf_r+0x248>)
 800f4b6:	429d      	cmp	r5, r3
 800f4b8:	bf08      	it	eq
 800f4ba:	68f5      	ldreq	r5, [r6, #12]
 800f4bc:	e7da      	b.n	800f474 <_vfiprintf_r+0x20>
 800f4be:	89ab      	ldrh	r3, [r5, #12]
 800f4c0:	0598      	lsls	r0, r3, #22
 800f4c2:	d4ed      	bmi.n	800f4a0 <_vfiprintf_r+0x4c>
 800f4c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4c6:	f7fd fc49 	bl	800cd5c <__retarget_lock_release_recursive>
 800f4ca:	e7e9      	b.n	800f4a0 <_vfiprintf_r+0x4c>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f4d0:	2320      	movs	r3, #32
 800f4d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4d6:	2330      	movs	r3, #48	; 0x30
 800f4d8:	f04f 0901 	mov.w	r9, #1
 800f4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f6a0 <_vfiprintf_r+0x24c>
 800f4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4e8:	4623      	mov	r3, r4
 800f4ea:	469a      	mov	sl, r3
 800f4ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4f0:	b10a      	cbz	r2, 800f4f6 <_vfiprintf_r+0xa2>
 800f4f2:	2a25      	cmp	r2, #37	; 0x25
 800f4f4:	d1f9      	bne.n	800f4ea <_vfiprintf_r+0x96>
 800f4f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f4fa:	d00b      	beq.n	800f514 <_vfiprintf_r+0xc0>
 800f4fc:	465b      	mov	r3, fp
 800f4fe:	4622      	mov	r2, r4
 800f500:	4629      	mov	r1, r5
 800f502:	4630      	mov	r0, r6
 800f504:	f7ff ff94 	bl	800f430 <__sfputs_r>
 800f508:	3001      	adds	r0, #1
 800f50a:	f000 80aa 	beq.w	800f662 <_vfiprintf_r+0x20e>
 800f50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f510:	445a      	add	r2, fp
 800f512:	9209      	str	r2, [sp, #36]	; 0x24
 800f514:	f89a 3000 	ldrb.w	r3, [sl]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 80a2 	beq.w	800f662 <_vfiprintf_r+0x20e>
 800f51e:	2300      	movs	r3, #0
 800f520:	f04f 32ff 	mov.w	r2, #4294967295
 800f524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f528:	f10a 0a01 	add.w	sl, sl, #1
 800f52c:	9304      	str	r3, [sp, #16]
 800f52e:	9307      	str	r3, [sp, #28]
 800f530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f534:	931a      	str	r3, [sp, #104]	; 0x68
 800f536:	4654      	mov	r4, sl
 800f538:	2205      	movs	r2, #5
 800f53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f53e:	4858      	ldr	r0, [pc, #352]	; (800f6a0 <_vfiprintf_r+0x24c>)
 800f540:	f7ff f970 	bl	800e824 <memchr>
 800f544:	9a04      	ldr	r2, [sp, #16]
 800f546:	b9d8      	cbnz	r0, 800f580 <_vfiprintf_r+0x12c>
 800f548:	06d1      	lsls	r1, r2, #27
 800f54a:	bf44      	itt	mi
 800f54c:	2320      	movmi	r3, #32
 800f54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f552:	0713      	lsls	r3, r2, #28
 800f554:	bf44      	itt	mi
 800f556:	232b      	movmi	r3, #43	; 0x2b
 800f558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f55c:	f89a 3000 	ldrb.w	r3, [sl]
 800f560:	2b2a      	cmp	r3, #42	; 0x2a
 800f562:	d015      	beq.n	800f590 <_vfiprintf_r+0x13c>
 800f564:	4654      	mov	r4, sl
 800f566:	2000      	movs	r0, #0
 800f568:	f04f 0c0a 	mov.w	ip, #10
 800f56c:	9a07      	ldr	r2, [sp, #28]
 800f56e:	4621      	mov	r1, r4
 800f570:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f574:	3b30      	subs	r3, #48	; 0x30
 800f576:	2b09      	cmp	r3, #9
 800f578:	d94e      	bls.n	800f618 <_vfiprintf_r+0x1c4>
 800f57a:	b1b0      	cbz	r0, 800f5aa <_vfiprintf_r+0x156>
 800f57c:	9207      	str	r2, [sp, #28]
 800f57e:	e014      	b.n	800f5aa <_vfiprintf_r+0x156>
 800f580:	eba0 0308 	sub.w	r3, r0, r8
 800f584:	fa09 f303 	lsl.w	r3, r9, r3
 800f588:	4313      	orrs	r3, r2
 800f58a:	46a2      	mov	sl, r4
 800f58c:	9304      	str	r3, [sp, #16]
 800f58e:	e7d2      	b.n	800f536 <_vfiprintf_r+0xe2>
 800f590:	9b03      	ldr	r3, [sp, #12]
 800f592:	1d19      	adds	r1, r3, #4
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	9103      	str	r1, [sp, #12]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	bfbb      	ittet	lt
 800f59c:	425b      	neglt	r3, r3
 800f59e:	f042 0202 	orrlt.w	r2, r2, #2
 800f5a2:	9307      	strge	r3, [sp, #28]
 800f5a4:	9307      	strlt	r3, [sp, #28]
 800f5a6:	bfb8      	it	lt
 800f5a8:	9204      	strlt	r2, [sp, #16]
 800f5aa:	7823      	ldrb	r3, [r4, #0]
 800f5ac:	2b2e      	cmp	r3, #46	; 0x2e
 800f5ae:	d10c      	bne.n	800f5ca <_vfiprintf_r+0x176>
 800f5b0:	7863      	ldrb	r3, [r4, #1]
 800f5b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f5b4:	d135      	bne.n	800f622 <_vfiprintf_r+0x1ce>
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	3402      	adds	r4, #2
 800f5ba:	1d1a      	adds	r2, r3, #4
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	9203      	str	r2, [sp, #12]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	bfb8      	it	lt
 800f5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5c8:	9305      	str	r3, [sp, #20]
 800f5ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f6a4 <_vfiprintf_r+0x250>
 800f5ce:	2203      	movs	r2, #3
 800f5d0:	4650      	mov	r0, sl
 800f5d2:	7821      	ldrb	r1, [r4, #0]
 800f5d4:	f7ff f926 	bl	800e824 <memchr>
 800f5d8:	b140      	cbz	r0, 800f5ec <_vfiprintf_r+0x198>
 800f5da:	2340      	movs	r3, #64	; 0x40
 800f5dc:	eba0 000a 	sub.w	r0, r0, sl
 800f5e0:	fa03 f000 	lsl.w	r0, r3, r0
 800f5e4:	9b04      	ldr	r3, [sp, #16]
 800f5e6:	3401      	adds	r4, #1
 800f5e8:	4303      	orrs	r3, r0
 800f5ea:	9304      	str	r3, [sp, #16]
 800f5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5f0:	2206      	movs	r2, #6
 800f5f2:	482d      	ldr	r0, [pc, #180]	; (800f6a8 <_vfiprintf_r+0x254>)
 800f5f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5f8:	f7ff f914 	bl	800e824 <memchr>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d03f      	beq.n	800f680 <_vfiprintf_r+0x22c>
 800f600:	4b2a      	ldr	r3, [pc, #168]	; (800f6ac <_vfiprintf_r+0x258>)
 800f602:	bb1b      	cbnz	r3, 800f64c <_vfiprintf_r+0x1f8>
 800f604:	9b03      	ldr	r3, [sp, #12]
 800f606:	3307      	adds	r3, #7
 800f608:	f023 0307 	bic.w	r3, r3, #7
 800f60c:	3308      	adds	r3, #8
 800f60e:	9303      	str	r3, [sp, #12]
 800f610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f612:	443b      	add	r3, r7
 800f614:	9309      	str	r3, [sp, #36]	; 0x24
 800f616:	e767      	b.n	800f4e8 <_vfiprintf_r+0x94>
 800f618:	460c      	mov	r4, r1
 800f61a:	2001      	movs	r0, #1
 800f61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f620:	e7a5      	b.n	800f56e <_vfiprintf_r+0x11a>
 800f622:	2300      	movs	r3, #0
 800f624:	f04f 0c0a 	mov.w	ip, #10
 800f628:	4619      	mov	r1, r3
 800f62a:	3401      	adds	r4, #1
 800f62c:	9305      	str	r3, [sp, #20]
 800f62e:	4620      	mov	r0, r4
 800f630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f634:	3a30      	subs	r2, #48	; 0x30
 800f636:	2a09      	cmp	r2, #9
 800f638:	d903      	bls.n	800f642 <_vfiprintf_r+0x1ee>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d0c5      	beq.n	800f5ca <_vfiprintf_r+0x176>
 800f63e:	9105      	str	r1, [sp, #20]
 800f640:	e7c3      	b.n	800f5ca <_vfiprintf_r+0x176>
 800f642:	4604      	mov	r4, r0
 800f644:	2301      	movs	r3, #1
 800f646:	fb0c 2101 	mla	r1, ip, r1, r2
 800f64a:	e7f0      	b.n	800f62e <_vfiprintf_r+0x1da>
 800f64c:	ab03      	add	r3, sp, #12
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	462a      	mov	r2, r5
 800f652:	4630      	mov	r0, r6
 800f654:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <_vfiprintf_r+0x25c>)
 800f656:	a904      	add	r1, sp, #16
 800f658:	f7fd fcca 	bl	800cff0 <_printf_float>
 800f65c:	4607      	mov	r7, r0
 800f65e:	1c78      	adds	r0, r7, #1
 800f660:	d1d6      	bne.n	800f610 <_vfiprintf_r+0x1bc>
 800f662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f664:	07d9      	lsls	r1, r3, #31
 800f666:	d405      	bmi.n	800f674 <_vfiprintf_r+0x220>
 800f668:	89ab      	ldrh	r3, [r5, #12]
 800f66a:	059a      	lsls	r2, r3, #22
 800f66c:	d402      	bmi.n	800f674 <_vfiprintf_r+0x220>
 800f66e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f670:	f7fd fb74 	bl	800cd5c <__retarget_lock_release_recursive>
 800f674:	89ab      	ldrh	r3, [r5, #12]
 800f676:	065b      	lsls	r3, r3, #25
 800f678:	f53f af12 	bmi.w	800f4a0 <_vfiprintf_r+0x4c>
 800f67c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f67e:	e711      	b.n	800f4a4 <_vfiprintf_r+0x50>
 800f680:	ab03      	add	r3, sp, #12
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	462a      	mov	r2, r5
 800f686:	4630      	mov	r0, r6
 800f688:	4b09      	ldr	r3, [pc, #36]	; (800f6b0 <_vfiprintf_r+0x25c>)
 800f68a:	a904      	add	r1, sp, #16
 800f68c:	f7fd ff4c 	bl	800d528 <_printf_i>
 800f690:	e7e4      	b.n	800f65c <_vfiprintf_r+0x208>
 800f692:	bf00      	nop
 800f694:	080116d8 	.word	0x080116d8
 800f698:	080116f8 	.word	0x080116f8
 800f69c:	080116b8 	.word	0x080116b8
 800f6a0:	0801193c 	.word	0x0801193c
 800f6a4:	08011942 	.word	0x08011942
 800f6a8:	08011946 	.word	0x08011946
 800f6ac:	0800cff1 	.word	0x0800cff1
 800f6b0:	0800f431 	.word	0x0800f431

0800f6b4 <__swbuf_r>:
 800f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b6:	460e      	mov	r6, r1
 800f6b8:	4614      	mov	r4, r2
 800f6ba:	4605      	mov	r5, r0
 800f6bc:	b118      	cbz	r0, 800f6c6 <__swbuf_r+0x12>
 800f6be:	6983      	ldr	r3, [r0, #24]
 800f6c0:	b90b      	cbnz	r3, 800f6c6 <__swbuf_r+0x12>
 800f6c2:	f7fd fa87 	bl	800cbd4 <__sinit>
 800f6c6:	4b21      	ldr	r3, [pc, #132]	; (800f74c <__swbuf_r+0x98>)
 800f6c8:	429c      	cmp	r4, r3
 800f6ca:	d12b      	bne.n	800f724 <__swbuf_r+0x70>
 800f6cc:	686c      	ldr	r4, [r5, #4]
 800f6ce:	69a3      	ldr	r3, [r4, #24]
 800f6d0:	60a3      	str	r3, [r4, #8]
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	071a      	lsls	r2, r3, #28
 800f6d6:	d52f      	bpl.n	800f738 <__swbuf_r+0x84>
 800f6d8:	6923      	ldr	r3, [r4, #16]
 800f6da:	b36b      	cbz	r3, 800f738 <__swbuf_r+0x84>
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	6820      	ldr	r0, [r4, #0]
 800f6e0:	b2f6      	uxtb	r6, r6
 800f6e2:	1ac0      	subs	r0, r0, r3
 800f6e4:	6963      	ldr	r3, [r4, #20]
 800f6e6:	4637      	mov	r7, r6
 800f6e8:	4283      	cmp	r3, r0
 800f6ea:	dc04      	bgt.n	800f6f6 <__swbuf_r+0x42>
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	f7ff f83e 	bl	800e770 <_fflush_r>
 800f6f4:	bb30      	cbnz	r0, 800f744 <__swbuf_r+0x90>
 800f6f6:	68a3      	ldr	r3, [r4, #8]
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	60a3      	str	r3, [r4, #8]
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	6022      	str	r2, [r4, #0]
 800f704:	701e      	strb	r6, [r3, #0]
 800f706:	6963      	ldr	r3, [r4, #20]
 800f708:	4283      	cmp	r3, r0
 800f70a:	d004      	beq.n	800f716 <__swbuf_r+0x62>
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	07db      	lsls	r3, r3, #31
 800f710:	d506      	bpl.n	800f720 <__swbuf_r+0x6c>
 800f712:	2e0a      	cmp	r6, #10
 800f714:	d104      	bne.n	800f720 <__swbuf_r+0x6c>
 800f716:	4621      	mov	r1, r4
 800f718:	4628      	mov	r0, r5
 800f71a:	f7ff f829 	bl	800e770 <_fflush_r>
 800f71e:	b988      	cbnz	r0, 800f744 <__swbuf_r+0x90>
 800f720:	4638      	mov	r0, r7
 800f722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f724:	4b0a      	ldr	r3, [pc, #40]	; (800f750 <__swbuf_r+0x9c>)
 800f726:	429c      	cmp	r4, r3
 800f728:	d101      	bne.n	800f72e <__swbuf_r+0x7a>
 800f72a:	68ac      	ldr	r4, [r5, #8]
 800f72c:	e7cf      	b.n	800f6ce <__swbuf_r+0x1a>
 800f72e:	4b09      	ldr	r3, [pc, #36]	; (800f754 <__swbuf_r+0xa0>)
 800f730:	429c      	cmp	r4, r3
 800f732:	bf08      	it	eq
 800f734:	68ec      	ldreq	r4, [r5, #12]
 800f736:	e7ca      	b.n	800f6ce <__swbuf_r+0x1a>
 800f738:	4621      	mov	r1, r4
 800f73a:	4628      	mov	r0, r5
 800f73c:	f000 f81a 	bl	800f774 <__swsetup_r>
 800f740:	2800      	cmp	r0, #0
 800f742:	d0cb      	beq.n	800f6dc <__swbuf_r+0x28>
 800f744:	f04f 37ff 	mov.w	r7, #4294967295
 800f748:	e7ea      	b.n	800f720 <__swbuf_r+0x6c>
 800f74a:	bf00      	nop
 800f74c:	080116d8 	.word	0x080116d8
 800f750:	080116f8 	.word	0x080116f8
 800f754:	080116b8 	.word	0x080116b8

0800f758 <__ascii_wctomb>:
 800f758:	4603      	mov	r3, r0
 800f75a:	4608      	mov	r0, r1
 800f75c:	b141      	cbz	r1, 800f770 <__ascii_wctomb+0x18>
 800f75e:	2aff      	cmp	r2, #255	; 0xff
 800f760:	d904      	bls.n	800f76c <__ascii_wctomb+0x14>
 800f762:	228a      	movs	r2, #138	; 0x8a
 800f764:	f04f 30ff 	mov.w	r0, #4294967295
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	4770      	bx	lr
 800f76c:	2001      	movs	r0, #1
 800f76e:	700a      	strb	r2, [r1, #0]
 800f770:	4770      	bx	lr
	...

0800f774 <__swsetup_r>:
 800f774:	4b32      	ldr	r3, [pc, #200]	; (800f840 <__swsetup_r+0xcc>)
 800f776:	b570      	push	{r4, r5, r6, lr}
 800f778:	681d      	ldr	r5, [r3, #0]
 800f77a:	4606      	mov	r6, r0
 800f77c:	460c      	mov	r4, r1
 800f77e:	b125      	cbz	r5, 800f78a <__swsetup_r+0x16>
 800f780:	69ab      	ldr	r3, [r5, #24]
 800f782:	b913      	cbnz	r3, 800f78a <__swsetup_r+0x16>
 800f784:	4628      	mov	r0, r5
 800f786:	f7fd fa25 	bl	800cbd4 <__sinit>
 800f78a:	4b2e      	ldr	r3, [pc, #184]	; (800f844 <__swsetup_r+0xd0>)
 800f78c:	429c      	cmp	r4, r3
 800f78e:	d10f      	bne.n	800f7b0 <__swsetup_r+0x3c>
 800f790:	686c      	ldr	r4, [r5, #4]
 800f792:	89a3      	ldrh	r3, [r4, #12]
 800f794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f798:	0719      	lsls	r1, r3, #28
 800f79a:	d42c      	bmi.n	800f7f6 <__swsetup_r+0x82>
 800f79c:	06dd      	lsls	r5, r3, #27
 800f79e:	d411      	bmi.n	800f7c4 <__swsetup_r+0x50>
 800f7a0:	2309      	movs	r3, #9
 800f7a2:	6033      	str	r3, [r6, #0]
 800f7a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ac:	81a3      	strh	r3, [r4, #12]
 800f7ae:	e03e      	b.n	800f82e <__swsetup_r+0xba>
 800f7b0:	4b25      	ldr	r3, [pc, #148]	; (800f848 <__swsetup_r+0xd4>)
 800f7b2:	429c      	cmp	r4, r3
 800f7b4:	d101      	bne.n	800f7ba <__swsetup_r+0x46>
 800f7b6:	68ac      	ldr	r4, [r5, #8]
 800f7b8:	e7eb      	b.n	800f792 <__swsetup_r+0x1e>
 800f7ba:	4b24      	ldr	r3, [pc, #144]	; (800f84c <__swsetup_r+0xd8>)
 800f7bc:	429c      	cmp	r4, r3
 800f7be:	bf08      	it	eq
 800f7c0:	68ec      	ldreq	r4, [r5, #12]
 800f7c2:	e7e6      	b.n	800f792 <__swsetup_r+0x1e>
 800f7c4:	0758      	lsls	r0, r3, #29
 800f7c6:	d512      	bpl.n	800f7ee <__swsetup_r+0x7a>
 800f7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7ca:	b141      	cbz	r1, 800f7de <__swsetup_r+0x6a>
 800f7cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7d0:	4299      	cmp	r1, r3
 800f7d2:	d002      	beq.n	800f7da <__swsetup_r+0x66>
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f7ff fbd5 	bl	800ef84 <_free_r>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	6363      	str	r3, [r4, #52]	; 0x34
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7e4:	81a3      	strh	r3, [r4, #12]
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	6063      	str	r3, [r4, #4]
 800f7ea:	6923      	ldr	r3, [r4, #16]
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	89a3      	ldrh	r3, [r4, #12]
 800f7f0:	f043 0308 	orr.w	r3, r3, #8
 800f7f4:	81a3      	strh	r3, [r4, #12]
 800f7f6:	6923      	ldr	r3, [r4, #16]
 800f7f8:	b94b      	cbnz	r3, 800f80e <__swsetup_r+0x9a>
 800f7fa:	89a3      	ldrh	r3, [r4, #12]
 800f7fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f804:	d003      	beq.n	800f80e <__swsetup_r+0x9a>
 800f806:	4621      	mov	r1, r4
 800f808:	4630      	mov	r0, r6
 800f80a:	f000 f84d 	bl	800f8a8 <__smakebuf_r>
 800f80e:	89a0      	ldrh	r0, [r4, #12]
 800f810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f814:	f010 0301 	ands.w	r3, r0, #1
 800f818:	d00a      	beq.n	800f830 <__swsetup_r+0xbc>
 800f81a:	2300      	movs	r3, #0
 800f81c:	60a3      	str	r3, [r4, #8]
 800f81e:	6963      	ldr	r3, [r4, #20]
 800f820:	425b      	negs	r3, r3
 800f822:	61a3      	str	r3, [r4, #24]
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	b943      	cbnz	r3, 800f83a <__swsetup_r+0xc6>
 800f828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f82c:	d1ba      	bne.n	800f7a4 <__swsetup_r+0x30>
 800f82e:	bd70      	pop	{r4, r5, r6, pc}
 800f830:	0781      	lsls	r1, r0, #30
 800f832:	bf58      	it	pl
 800f834:	6963      	ldrpl	r3, [r4, #20]
 800f836:	60a3      	str	r3, [r4, #8]
 800f838:	e7f4      	b.n	800f824 <__swsetup_r+0xb0>
 800f83a:	2000      	movs	r0, #0
 800f83c:	e7f7      	b.n	800f82e <__swsetup_r+0xba>
 800f83e:	bf00      	nop
 800f840:	20000038 	.word	0x20000038
 800f844:	080116d8 	.word	0x080116d8
 800f848:	080116f8 	.word	0x080116f8
 800f84c:	080116b8 	.word	0x080116b8

0800f850 <abort>:
 800f850:	2006      	movs	r0, #6
 800f852:	b508      	push	{r3, lr}
 800f854:	f000 f898 	bl	800f988 <raise>
 800f858:	2001      	movs	r0, #1
 800f85a:	f7f5 fa0a 	bl	8004c72 <_exit>

0800f85e <__swhatbuf_r>:
 800f85e:	b570      	push	{r4, r5, r6, lr}
 800f860:	460e      	mov	r6, r1
 800f862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f866:	4614      	mov	r4, r2
 800f868:	2900      	cmp	r1, #0
 800f86a:	461d      	mov	r5, r3
 800f86c:	b096      	sub	sp, #88	; 0x58
 800f86e:	da08      	bge.n	800f882 <__swhatbuf_r+0x24>
 800f870:	2200      	movs	r2, #0
 800f872:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f876:	602a      	str	r2, [r5, #0]
 800f878:	061a      	lsls	r2, r3, #24
 800f87a:	d410      	bmi.n	800f89e <__swhatbuf_r+0x40>
 800f87c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f880:	e00e      	b.n	800f8a0 <__swhatbuf_r+0x42>
 800f882:	466a      	mov	r2, sp
 800f884:	f000 f89c 	bl	800f9c0 <_fstat_r>
 800f888:	2800      	cmp	r0, #0
 800f88a:	dbf1      	blt.n	800f870 <__swhatbuf_r+0x12>
 800f88c:	9a01      	ldr	r2, [sp, #4]
 800f88e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f896:	425a      	negs	r2, r3
 800f898:	415a      	adcs	r2, r3
 800f89a:	602a      	str	r2, [r5, #0]
 800f89c:	e7ee      	b.n	800f87c <__swhatbuf_r+0x1e>
 800f89e:	2340      	movs	r3, #64	; 0x40
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	6023      	str	r3, [r4, #0]
 800f8a4:	b016      	add	sp, #88	; 0x58
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}

0800f8a8 <__smakebuf_r>:
 800f8a8:	898b      	ldrh	r3, [r1, #12]
 800f8aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f8ac:	079d      	lsls	r5, r3, #30
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	d507      	bpl.n	800f8c4 <__smakebuf_r+0x1c>
 800f8b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f8b8:	6023      	str	r3, [r4, #0]
 800f8ba:	6123      	str	r3, [r4, #16]
 800f8bc:	2301      	movs	r3, #1
 800f8be:	6163      	str	r3, [r4, #20]
 800f8c0:	b002      	add	sp, #8
 800f8c2:	bd70      	pop	{r4, r5, r6, pc}
 800f8c4:	466a      	mov	r2, sp
 800f8c6:	ab01      	add	r3, sp, #4
 800f8c8:	f7ff ffc9 	bl	800f85e <__swhatbuf_r>
 800f8cc:	9900      	ldr	r1, [sp, #0]
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7fd fa7b 	bl	800cdcc <_malloc_r>
 800f8d6:	b948      	cbnz	r0, 800f8ec <__smakebuf_r+0x44>
 800f8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8dc:	059a      	lsls	r2, r3, #22
 800f8de:	d4ef      	bmi.n	800f8c0 <__smakebuf_r+0x18>
 800f8e0:	f023 0303 	bic.w	r3, r3, #3
 800f8e4:	f043 0302 	orr.w	r3, r3, #2
 800f8e8:	81a3      	strh	r3, [r4, #12]
 800f8ea:	e7e3      	b.n	800f8b4 <__smakebuf_r+0xc>
 800f8ec:	4b0d      	ldr	r3, [pc, #52]	; (800f924 <__smakebuf_r+0x7c>)
 800f8ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	6020      	str	r0, [r4, #0]
 800f8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f8:	81a3      	strh	r3, [r4, #12]
 800f8fa:	9b00      	ldr	r3, [sp, #0]
 800f8fc:	6120      	str	r0, [r4, #16]
 800f8fe:	6163      	str	r3, [r4, #20]
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	b15b      	cbz	r3, 800f91c <__smakebuf_r+0x74>
 800f904:	4630      	mov	r0, r6
 800f906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f90a:	f000 f86b 	bl	800f9e4 <_isatty_r>
 800f90e:	b128      	cbz	r0, 800f91c <__smakebuf_r+0x74>
 800f910:	89a3      	ldrh	r3, [r4, #12]
 800f912:	f023 0303 	bic.w	r3, r3, #3
 800f916:	f043 0301 	orr.w	r3, r3, #1
 800f91a:	81a3      	strh	r3, [r4, #12]
 800f91c:	89a0      	ldrh	r0, [r4, #12]
 800f91e:	4305      	orrs	r5, r0
 800f920:	81a5      	strh	r5, [r4, #12]
 800f922:	e7cd      	b.n	800f8c0 <__smakebuf_r+0x18>
 800f924:	0800cb6d 	.word	0x0800cb6d

0800f928 <_malloc_usable_size_r>:
 800f928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f92c:	1f18      	subs	r0, r3, #4
 800f92e:	2b00      	cmp	r3, #0
 800f930:	bfbc      	itt	lt
 800f932:	580b      	ldrlt	r3, [r1, r0]
 800f934:	18c0      	addlt	r0, r0, r3
 800f936:	4770      	bx	lr

0800f938 <_raise_r>:
 800f938:	291f      	cmp	r1, #31
 800f93a:	b538      	push	{r3, r4, r5, lr}
 800f93c:	4604      	mov	r4, r0
 800f93e:	460d      	mov	r5, r1
 800f940:	d904      	bls.n	800f94c <_raise_r+0x14>
 800f942:	2316      	movs	r3, #22
 800f944:	6003      	str	r3, [r0, #0]
 800f946:	f04f 30ff 	mov.w	r0, #4294967295
 800f94a:	bd38      	pop	{r3, r4, r5, pc}
 800f94c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f94e:	b112      	cbz	r2, 800f956 <_raise_r+0x1e>
 800f950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f954:	b94b      	cbnz	r3, 800f96a <_raise_r+0x32>
 800f956:	4620      	mov	r0, r4
 800f958:	f000 f830 	bl	800f9bc <_getpid_r>
 800f95c:	462a      	mov	r2, r5
 800f95e:	4601      	mov	r1, r0
 800f960:	4620      	mov	r0, r4
 800f962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f966:	f000 b817 	b.w	800f998 <_kill_r>
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d00a      	beq.n	800f984 <_raise_r+0x4c>
 800f96e:	1c59      	adds	r1, r3, #1
 800f970:	d103      	bne.n	800f97a <_raise_r+0x42>
 800f972:	2316      	movs	r3, #22
 800f974:	6003      	str	r3, [r0, #0]
 800f976:	2001      	movs	r0, #1
 800f978:	e7e7      	b.n	800f94a <_raise_r+0x12>
 800f97a:	2400      	movs	r4, #0
 800f97c:	4628      	mov	r0, r5
 800f97e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f982:	4798      	blx	r3
 800f984:	2000      	movs	r0, #0
 800f986:	e7e0      	b.n	800f94a <_raise_r+0x12>

0800f988 <raise>:
 800f988:	4b02      	ldr	r3, [pc, #8]	; (800f994 <raise+0xc>)
 800f98a:	4601      	mov	r1, r0
 800f98c:	6818      	ldr	r0, [r3, #0]
 800f98e:	f7ff bfd3 	b.w	800f938 <_raise_r>
 800f992:	bf00      	nop
 800f994:	20000038 	.word	0x20000038

0800f998 <_kill_r>:
 800f998:	b538      	push	{r3, r4, r5, lr}
 800f99a:	2300      	movs	r3, #0
 800f99c:	4d06      	ldr	r5, [pc, #24]	; (800f9b8 <_kill_r+0x20>)
 800f99e:	4604      	mov	r4, r0
 800f9a0:	4608      	mov	r0, r1
 800f9a2:	4611      	mov	r1, r2
 800f9a4:	602b      	str	r3, [r5, #0]
 800f9a6:	f7f5 f954 	bl	8004c52 <_kill>
 800f9aa:	1c43      	adds	r3, r0, #1
 800f9ac:	d102      	bne.n	800f9b4 <_kill_r+0x1c>
 800f9ae:	682b      	ldr	r3, [r5, #0]
 800f9b0:	b103      	cbz	r3, 800f9b4 <_kill_r+0x1c>
 800f9b2:	6023      	str	r3, [r4, #0]
 800f9b4:	bd38      	pop	{r3, r4, r5, pc}
 800f9b6:	bf00      	nop
 800f9b8:	2000793c 	.word	0x2000793c

0800f9bc <_getpid_r>:
 800f9bc:	f7f5 b942 	b.w	8004c44 <_getpid>

0800f9c0 <_fstat_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	4d06      	ldr	r5, [pc, #24]	; (800f9e0 <_fstat_r+0x20>)
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	4608      	mov	r0, r1
 800f9ca:	4611      	mov	r1, r2
 800f9cc:	602b      	str	r3, [r5, #0]
 800f9ce:	f7f5 f99e 	bl	8004d0e <_fstat>
 800f9d2:	1c43      	adds	r3, r0, #1
 800f9d4:	d102      	bne.n	800f9dc <_fstat_r+0x1c>
 800f9d6:	682b      	ldr	r3, [r5, #0]
 800f9d8:	b103      	cbz	r3, 800f9dc <_fstat_r+0x1c>
 800f9da:	6023      	str	r3, [r4, #0]
 800f9dc:	bd38      	pop	{r3, r4, r5, pc}
 800f9de:	bf00      	nop
 800f9e0:	2000793c 	.word	0x2000793c

0800f9e4 <_isatty_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	4d05      	ldr	r5, [pc, #20]	; (800fa00 <_isatty_r+0x1c>)
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	f7f5 f99c 	bl	8004d2c <_isatty>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_isatty_r+0x1a>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_isatty_r+0x1a>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	2000793c 	.word	0x2000793c

0800fa04 <sin>:
 800fa04:	b530      	push	{r4, r5, lr}
 800fa06:	4a20      	ldr	r2, [pc, #128]	; (800fa88 <sin+0x84>)
 800fa08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	b087      	sub	sp, #28
 800fa10:	dc06      	bgt.n	800fa20 <sin+0x1c>
 800fa12:	2300      	movs	r3, #0
 800fa14:	2200      	movs	r2, #0
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f001 f855 	bl	8010ac8 <__kernel_sin>
 800fa1e:	e006      	b.n	800fa2e <sin+0x2a>
 800fa20:	4a1a      	ldr	r2, [pc, #104]	; (800fa8c <sin+0x88>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	dd05      	ble.n	800fa32 <sin+0x2e>
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	f7f0 fc0d 	bl	8000248 <__aeabi_dsub>
 800fa2e:	b007      	add	sp, #28
 800fa30:	bd30      	pop	{r4, r5, pc}
 800fa32:	aa02      	add	r2, sp, #8
 800fa34:	f000 fa50 	bl	800fed8 <__ieee754_rem_pio2>
 800fa38:	f000 0003 	and.w	r0, r0, #3
 800fa3c:	2801      	cmp	r0, #1
 800fa3e:	d009      	beq.n	800fa54 <sin+0x50>
 800fa40:	2802      	cmp	r0, #2
 800fa42:	d00e      	beq.n	800fa62 <sin+0x5e>
 800fa44:	b9c0      	cbnz	r0, 800fa78 <sin+0x74>
 800fa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	9300      	str	r3, [sp, #0]
 800fa4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa52:	e7e2      	b.n	800fa1a <sin+0x16>
 800fa54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa5c:	f000 fc34 	bl	80102c8 <__kernel_cos>
 800fa60:	e7e5      	b.n	800fa2e <sin+0x2a>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa6e:	f001 f82b 	bl	8010ac8 <__kernel_sin>
 800fa72:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fa76:	e7da      	b.n	800fa2e <sin+0x2a>
 800fa78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa80:	f000 fc22 	bl	80102c8 <__kernel_cos>
 800fa84:	e7f5      	b.n	800fa72 <sin+0x6e>
 800fa86:	bf00      	nop
 800fa88:	3fe921fb 	.word	0x3fe921fb
 800fa8c:	7fefffff 	.word	0x7fefffff

0800fa90 <tanh>:
 800fa90:	4a36      	ldr	r2, [pc, #216]	; (800fb6c <tanh+0xdc>)
 800fa92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa96:	4293      	cmp	r3, r2
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	4606      	mov	r6, r0
 800fa9e:	460c      	mov	r4, r1
 800faa0:	460d      	mov	r5, r1
 800faa2:	dd15      	ble.n	800fad0 <tanh+0x40>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	2000      	movs	r0, #0
 800faaa:	4931      	ldr	r1, [pc, #196]	; (800fb70 <tanh+0xe0>)
 800faac:	f7f0 feae 	bl	800080c <__aeabi_ddiv>
 800fab0:	2c00      	cmp	r4, #0
 800fab2:	f04f 0200 	mov.w	r2, #0
 800fab6:	4b2e      	ldr	r3, [pc, #184]	; (800fb70 <tanh+0xe0>)
 800fab8:	db07      	blt.n	800faca <tanh+0x3a>
 800faba:	f7f0 fbc7 	bl	800024c <__adddf3>
 800fabe:	4602      	mov	r2, r0
 800fac0:	460b      	mov	r3, r1
 800fac2:	4610      	mov	r0, r2
 800fac4:	4619      	mov	r1, r3
 800fac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faca:	f7f0 fbbd 	bl	8000248 <__aeabi_dsub>
 800face:	e7f6      	b.n	800fabe <tanh+0x2e>
 800fad0:	4a28      	ldr	r2, [pc, #160]	; (800fb74 <tanh+0xe4>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	dc47      	bgt.n	800fb66 <tanh+0xd6>
 800fad6:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 800fada:	da08      	bge.n	800faee <tanh+0x5e>
 800fadc:	2200      	movs	r2, #0
 800fade:	4b24      	ldr	r3, [pc, #144]	; (800fb70 <tanh+0xe0>)
 800fae0:	f7f0 fbb4 	bl	800024c <__adddf3>
 800fae4:	4632      	mov	r2, r6
 800fae6:	4623      	mov	r3, r4
 800fae8:	f7f0 fd66 	bl	80005b8 <__aeabi_dmul>
 800faec:	e7e7      	b.n	800fabe <tanh+0x2e>
 800faee:	4a22      	ldr	r2, [pc, #136]	; (800fb78 <tanh+0xe8>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	dd20      	ble.n	800fb36 <tanh+0xa6>
 800faf4:	f001 fad8 	bl	80110a8 <fabs>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	f7f0 fba6 	bl	800024c <__adddf3>
 800fb00:	f001 f8c6 	bl	8010c90 <expm1>
 800fb04:	2200      	movs	r2, #0
 800fb06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb0a:	f7f0 fb9f 	bl	800024c <__adddf3>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	460b      	mov	r3, r1
 800fb12:	2000      	movs	r0, #0
 800fb14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fb18:	f7f0 fe78 	bl	800080c <__aeabi_ddiv>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	2000      	movs	r0, #0
 800fb22:	4913      	ldr	r1, [pc, #76]	; (800fb70 <tanh+0xe0>)
 800fb24:	f7f0 fb90 	bl	8000248 <__aeabi_dsub>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	2d00      	cmp	r5, #0
 800fb2e:	bfb8      	it	lt
 800fb30:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fb34:	e7c5      	b.n	800fac2 <tanh+0x32>
 800fb36:	f001 fab7 	bl	80110a8 <fabs>
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800fb40:	f7f0 fd3a 	bl	80005b8 <__aeabi_dmul>
 800fb44:	f001 f8a4 	bl	8010c90 <expm1>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb4e:	4604      	mov	r4, r0
 800fb50:	f101 4800 	add.w	r8, r1, #2147483648	; 0x80000000
 800fb54:	f7f0 fb7a 	bl	800024c <__adddf3>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	4641      	mov	r1, r8
 800fb60:	f7f0 fe54 	bl	800080c <__aeabi_ddiv>
 800fb64:	e7e0      	b.n	800fb28 <tanh+0x98>
 800fb66:	2200      	movs	r2, #0
 800fb68:	4b01      	ldr	r3, [pc, #4]	; (800fb70 <tanh+0xe0>)
 800fb6a:	e7df      	b.n	800fb2c <tanh+0x9c>
 800fb6c:	7fefffff 	.word	0x7fefffff
 800fb70:	3ff00000 	.word	0x3ff00000
 800fb74:	4035ffff 	.word	0x4035ffff
 800fb78:	3fefffff 	.word	0x3fefffff
 800fb7c:	00000000 	.word	0x00000000

0800fb80 <exp>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	4606      	mov	r6, r0
 800fb84:	460f      	mov	r7, r1
 800fb86:	f000 f837 	bl	800fbf8 <__ieee754_exp>
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	460d      	mov	r5, r1
 800fb8e:	4630      	mov	r0, r6
 800fb90:	4639      	mov	r1, r7
 800fb92:	f001 fa8c 	bl	80110ae <finite>
 800fb96:	b168      	cbz	r0, 800fbb4 <exp+0x34>
 800fb98:	a311      	add	r3, pc, #68	; (adr r3, 800fbe0 <exp+0x60>)
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	4630      	mov	r0, r6
 800fba0:	4639      	mov	r1, r7
 800fba2:	f7f0 ff99 	bl	8000ad8 <__aeabi_dcmpgt>
 800fba6:	b140      	cbz	r0, 800fbba <exp+0x3a>
 800fba8:	f7fc ffb6 	bl	800cb18 <__errno>
 800fbac:	2322      	movs	r3, #34	; 0x22
 800fbae:	2400      	movs	r4, #0
 800fbb0:	4d0f      	ldr	r5, [pc, #60]	; (800fbf0 <exp+0x70>)
 800fbb2:	6003      	str	r3, [r0, #0]
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbba:	4630      	mov	r0, r6
 800fbbc:	a30a      	add	r3, pc, #40	; (adr r3, 800fbe8 <exp+0x68>)
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	f7f0 ff6a 	bl	8000a9c <__aeabi_dcmplt>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d0f3      	beq.n	800fbb4 <exp+0x34>
 800fbcc:	f7fc ffa4 	bl	800cb18 <__errno>
 800fbd0:	2322      	movs	r3, #34	; 0x22
 800fbd2:	2400      	movs	r4, #0
 800fbd4:	2500      	movs	r5, #0
 800fbd6:	6003      	str	r3, [r0, #0]
 800fbd8:	e7ec      	b.n	800fbb4 <exp+0x34>
 800fbda:	bf00      	nop
 800fbdc:	f3af 8000 	nop.w
 800fbe0:	fefa39ef 	.word	0xfefa39ef
 800fbe4:	40862e42 	.word	0x40862e42
 800fbe8:	d52d3051 	.word	0xd52d3051
 800fbec:	c0874910 	.word	0xc0874910
 800fbf0:	7ff00000 	.word	0x7ff00000
 800fbf4:	00000000 	.word	0x00000000

0800fbf8 <__ieee754_exp>:
 800fbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbfc:	4fac      	ldr	r7, [pc, #688]	; (800feb0 <__ieee754_exp+0x2b8>)
 800fbfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc02:	42bb      	cmp	r3, r7
 800fc04:	4605      	mov	r5, r0
 800fc06:	460c      	mov	r4, r1
 800fc08:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800fc0c:	d933      	bls.n	800fc76 <__ieee754_exp+0x7e>
 800fc0e:	4fa9      	ldr	r7, [pc, #676]	; (800feb4 <__ieee754_exp+0x2bc>)
 800fc10:	42bb      	cmp	r3, r7
 800fc12:	d913      	bls.n	800fc3c <__ieee754_exp+0x44>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	d006      	beq.n	800fc2c <__ieee754_exp+0x34>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	460b      	mov	r3, r1
 800fc22:	f7f0 fb13 	bl	800024c <__adddf3>
 800fc26:	4605      	mov	r5, r0
 800fc28:	460c      	mov	r4, r1
 800fc2a:	e002      	b.n	800fc32 <__ieee754_exp+0x3a>
 800fc2c:	b10e      	cbz	r6, 800fc32 <__ieee754_exp+0x3a>
 800fc2e:	2500      	movs	r5, #0
 800fc30:	462c      	mov	r4, r5
 800fc32:	4628      	mov	r0, r5
 800fc34:	4621      	mov	r1, r4
 800fc36:	b004      	add	sp, #16
 800fc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc3c:	a386      	add	r3, pc, #536	; (adr r3, 800fe58 <__ieee754_exp+0x260>)
 800fc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc42:	f7f0 ff49 	bl	8000ad8 <__aeabi_dcmpgt>
 800fc46:	4607      	mov	r7, r0
 800fc48:	b128      	cbz	r0, 800fc56 <__ieee754_exp+0x5e>
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	b004      	add	sp, #16
 800fc4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc52:	f001 b816 	b.w	8010c82 <__math_oflow>
 800fc56:	4628      	mov	r0, r5
 800fc58:	a381      	add	r3, pc, #516	; (adr r3, 800fe60 <__ieee754_exp+0x268>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	4621      	mov	r1, r4
 800fc60:	f7f0 ff1c 	bl	8000a9c <__aeabi_dcmplt>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	f000 8085 	beq.w	800fd74 <__ieee754_exp+0x17c>
 800fc6a:	4638      	mov	r0, r7
 800fc6c:	b004      	add	sp, #16
 800fc6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc72:	f001 b801 	b.w	8010c78 <__math_uflow>
 800fc76:	4a90      	ldr	r2, [pc, #576]	; (800feb8 <__ieee754_exp+0x2c0>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	f240 80a7 	bls.w	800fdcc <__ieee754_exp+0x1d4>
 800fc7e:	4a8f      	ldr	r2, [pc, #572]	; (800febc <__ieee754_exp+0x2c4>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d877      	bhi.n	800fd74 <__ieee754_exp+0x17c>
 800fc84:	4b8e      	ldr	r3, [pc, #568]	; (800fec0 <__ieee754_exp+0x2c8>)
 800fc86:	00f4      	lsls	r4, r6, #3
 800fc88:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc90:	f7f0 fada 	bl	8000248 <__aeabi_dsub>
 800fc94:	4680      	mov	r8, r0
 800fc96:	4689      	mov	r9, r1
 800fc98:	4b8a      	ldr	r3, [pc, #552]	; (800fec4 <__ieee754_exp+0x2cc>)
 800fc9a:	f1c6 0a01 	rsb	sl, r6, #1
 800fc9e:	4423      	add	r3, r4
 800fca0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fca4:	e9cd 3400 	strd	r3, r4, [sp]
 800fca8:	ebaa 0a06 	sub.w	sl, sl, r6
 800fcac:	4640      	mov	r0, r8
 800fcae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	f7f0 fac8 	bl	8000248 <__aeabi_dsub>
 800fcb8:	4605      	mov	r5, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	462a      	mov	r2, r5
 800fcbe:	4623      	mov	r3, r4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	f7f0 fc78 	bl	80005b8 <__aeabi_dmul>
 800fcc8:	a367      	add	r3, pc, #412	; (adr r3, 800fe68 <__ieee754_exp+0x270>)
 800fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcce:	4606      	mov	r6, r0
 800fcd0:	460f      	mov	r7, r1
 800fcd2:	f7f0 fc71 	bl	80005b8 <__aeabi_dmul>
 800fcd6:	a366      	add	r3, pc, #408	; (adr r3, 800fe70 <__ieee754_exp+0x278>)
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	f7f0 fab4 	bl	8000248 <__aeabi_dsub>
 800fce0:	4632      	mov	r2, r6
 800fce2:	463b      	mov	r3, r7
 800fce4:	f7f0 fc68 	bl	80005b8 <__aeabi_dmul>
 800fce8:	a363      	add	r3, pc, #396	; (adr r3, 800fe78 <__ieee754_exp+0x280>)
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	f7f0 faad 	bl	800024c <__adddf3>
 800fcf2:	4632      	mov	r2, r6
 800fcf4:	463b      	mov	r3, r7
 800fcf6:	f7f0 fc5f 	bl	80005b8 <__aeabi_dmul>
 800fcfa:	a361      	add	r3, pc, #388	; (adr r3, 800fe80 <__ieee754_exp+0x288>)
 800fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd00:	f7f0 faa2 	bl	8000248 <__aeabi_dsub>
 800fd04:	4632      	mov	r2, r6
 800fd06:	463b      	mov	r3, r7
 800fd08:	f7f0 fc56 	bl	80005b8 <__aeabi_dmul>
 800fd0c:	a35e      	add	r3, pc, #376	; (adr r3, 800fe88 <__ieee754_exp+0x290>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fa9b 	bl	800024c <__adddf3>
 800fd16:	4632      	mov	r2, r6
 800fd18:	463b      	mov	r3, r7
 800fd1a:	f7f0 fc4d 	bl	80005b8 <__aeabi_dmul>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	4628      	mov	r0, r5
 800fd24:	4621      	mov	r1, r4
 800fd26:	f7f0 fa8f 	bl	8000248 <__aeabi_dsub>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	4606      	mov	r6, r0
 800fd30:	460f      	mov	r7, r1
 800fd32:	4628      	mov	r0, r5
 800fd34:	4621      	mov	r1, r4
 800fd36:	f7f0 fc3f 	bl	80005b8 <__aeabi_dmul>
 800fd3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd3e:	f1ba 0f00 	cmp.w	sl, #0
 800fd42:	d15a      	bne.n	800fdfa <__ieee754_exp+0x202>
 800fd44:	2200      	movs	r2, #0
 800fd46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 fa7b 	bl	8000248 <__aeabi_dsub>
 800fd52:	4602      	mov	r2, r0
 800fd54:	460b      	mov	r3, r1
 800fd56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd5a:	f7f0 fd57 	bl	800080c <__aeabi_ddiv>
 800fd5e:	462a      	mov	r2, r5
 800fd60:	4623      	mov	r3, r4
 800fd62:	f7f0 fa71 	bl	8000248 <__aeabi_dsub>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	4956      	ldr	r1, [pc, #344]	; (800fec8 <__ieee754_exp+0x2d0>)
 800fd6e:	f7f0 fa6b 	bl	8000248 <__aeabi_dsub>
 800fd72:	e758      	b.n	800fc26 <__ieee754_exp+0x2e>
 800fd74:	4855      	ldr	r0, [pc, #340]	; (800fecc <__ieee754_exp+0x2d4>)
 800fd76:	a346      	add	r3, pc, #280	; (adr r3, 800fe90 <__ieee754_exp+0x298>)
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800fd80:	4621      	mov	r1, r4
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7f0 fc18 	bl	80005b8 <__aeabi_dmul>
 800fd88:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd8c:	f7f0 fa5e 	bl	800024c <__adddf3>
 800fd90:	f7f0 fec2 	bl	8000b18 <__aeabi_d2iz>
 800fd94:	4682      	mov	sl, r0
 800fd96:	f7f0 fba5 	bl	80004e4 <__aeabi_i2d>
 800fd9a:	a33f      	add	r3, pc, #252	; (adr r3, 800fe98 <__ieee754_exp+0x2a0>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	4606      	mov	r6, r0
 800fda2:	460f      	mov	r7, r1
 800fda4:	f7f0 fc08 	bl	80005b8 <__aeabi_dmul>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4628      	mov	r0, r5
 800fdae:	4621      	mov	r1, r4
 800fdb0:	f7f0 fa4a 	bl	8000248 <__aeabi_dsub>
 800fdb4:	a33a      	add	r3, pc, #232	; (adr r3, 800fea0 <__ieee754_exp+0x2a8>)
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	4680      	mov	r8, r0
 800fdbc:	4689      	mov	r9, r1
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f7f0 fbf9 	bl	80005b8 <__aeabi_dmul>
 800fdc6:	e9cd 0100 	strd	r0, r1, [sp]
 800fdca:	e76f      	b.n	800fcac <__ieee754_exp+0xb4>
 800fdcc:	4a40      	ldr	r2, [pc, #256]	; (800fed0 <__ieee754_exp+0x2d8>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d80e      	bhi.n	800fdf0 <__ieee754_exp+0x1f8>
 800fdd2:	a335      	add	r3, pc, #212	; (adr r3, 800fea8 <__ieee754_exp+0x2b0>)
 800fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd8:	f7f0 fa38 	bl	800024c <__adddf3>
 800fddc:	2200      	movs	r2, #0
 800fdde:	4b3a      	ldr	r3, [pc, #232]	; (800fec8 <__ieee754_exp+0x2d0>)
 800fde0:	f7f0 fe7a 	bl	8000ad8 <__aeabi_dcmpgt>
 800fde4:	b138      	cbz	r0, 800fdf6 <__ieee754_exp+0x1fe>
 800fde6:	2200      	movs	r2, #0
 800fde8:	4628      	mov	r0, r5
 800fdea:	4621      	mov	r1, r4
 800fdec:	4b36      	ldr	r3, [pc, #216]	; (800fec8 <__ieee754_exp+0x2d0>)
 800fdee:	e718      	b.n	800fc22 <__ieee754_exp+0x2a>
 800fdf0:	f04f 0a00 	mov.w	sl, #0
 800fdf4:	e762      	b.n	800fcbc <__ieee754_exp+0xc4>
 800fdf6:	4682      	mov	sl, r0
 800fdf8:	e760      	b.n	800fcbc <__ieee754_exp+0xc4>
 800fdfa:	4632      	mov	r2, r6
 800fdfc:	463b      	mov	r3, r7
 800fdfe:	2000      	movs	r0, #0
 800fe00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fe04:	f7f0 fa20 	bl	8000248 <__aeabi_dsub>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe10:	f7f0 fcfc 	bl	800080c <__aeabi_ddiv>
 800fe14:	4602      	mov	r2, r0
 800fe16:	460b      	mov	r3, r1
 800fe18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe1c:	f7f0 fa14 	bl	8000248 <__aeabi_dsub>
 800fe20:	4642      	mov	r2, r8
 800fe22:	464b      	mov	r3, r9
 800fe24:	f7f0 fa10 	bl	8000248 <__aeabi_dsub>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	4926      	ldr	r1, [pc, #152]	; (800fec8 <__ieee754_exp+0x2d0>)
 800fe30:	f7f0 fa0a 	bl	8000248 <__aeabi_dsub>
 800fe34:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800fe38:	4592      	cmp	sl, r2
 800fe3a:	db02      	blt.n	800fe42 <__ieee754_exp+0x24a>
 800fe3c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800fe40:	e6f1      	b.n	800fc26 <__ieee754_exp+0x2e>
 800fe42:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800fe46:	2200      	movs	r2, #0
 800fe48:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800fe4c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800fe50:	f7f0 fbb2 	bl	80005b8 <__aeabi_dmul>
 800fe54:	e6e7      	b.n	800fc26 <__ieee754_exp+0x2e>
 800fe56:	bf00      	nop
 800fe58:	fefa39ef 	.word	0xfefa39ef
 800fe5c:	40862e42 	.word	0x40862e42
 800fe60:	d52d3051 	.word	0xd52d3051
 800fe64:	c0874910 	.word	0xc0874910
 800fe68:	72bea4d0 	.word	0x72bea4d0
 800fe6c:	3e663769 	.word	0x3e663769
 800fe70:	c5d26bf1 	.word	0xc5d26bf1
 800fe74:	3ebbbd41 	.word	0x3ebbbd41
 800fe78:	af25de2c 	.word	0xaf25de2c
 800fe7c:	3f11566a 	.word	0x3f11566a
 800fe80:	16bebd93 	.word	0x16bebd93
 800fe84:	3f66c16c 	.word	0x3f66c16c
 800fe88:	5555553e 	.word	0x5555553e
 800fe8c:	3fc55555 	.word	0x3fc55555
 800fe90:	652b82fe 	.word	0x652b82fe
 800fe94:	3ff71547 	.word	0x3ff71547
 800fe98:	fee00000 	.word	0xfee00000
 800fe9c:	3fe62e42 	.word	0x3fe62e42
 800fea0:	35793c76 	.word	0x35793c76
 800fea4:	3dea39ef 	.word	0x3dea39ef
 800fea8:	8800759c 	.word	0x8800759c
 800feac:	7e37e43c 	.word	0x7e37e43c
 800feb0:	40862e41 	.word	0x40862e41
 800feb4:	7fefffff 	.word	0x7fefffff
 800feb8:	3fd62e42 	.word	0x3fd62e42
 800febc:	3ff0a2b1 	.word	0x3ff0a2b1
 800fec0:	08011aa8 	.word	0x08011aa8
 800fec4:	08011ab8 	.word	0x08011ab8
 800fec8:	3ff00000 	.word	0x3ff00000
 800fecc:	08011a98 	.word	0x08011a98
 800fed0:	3defffff 	.word	0x3defffff
 800fed4:	00000000 	.word	0x00000000

0800fed8 <__ieee754_rem_pio2>:
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	4614      	mov	r4, r2
 800fede:	4ac4      	ldr	r2, [pc, #784]	; (80101f0 <__ieee754_rem_pio2+0x318>)
 800fee0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800fee4:	b08d      	sub	sp, #52	; 0x34
 800fee6:	4592      	cmp	sl, r2
 800fee8:	9104      	str	r1, [sp, #16]
 800feea:	dc07      	bgt.n	800fefc <__ieee754_rem_pio2+0x24>
 800feec:	2200      	movs	r2, #0
 800feee:	2300      	movs	r3, #0
 800fef0:	e9c4 0100 	strd	r0, r1, [r4]
 800fef4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fef8:	2500      	movs	r5, #0
 800fefa:	e024      	b.n	800ff46 <__ieee754_rem_pio2+0x6e>
 800fefc:	4abd      	ldr	r2, [pc, #756]	; (80101f4 <__ieee754_rem_pio2+0x31c>)
 800fefe:	4592      	cmp	sl, r2
 800ff00:	dc72      	bgt.n	800ffe8 <__ieee754_rem_pio2+0x110>
 800ff02:	9b04      	ldr	r3, [sp, #16]
 800ff04:	4dbc      	ldr	r5, [pc, #752]	; (80101f8 <__ieee754_rem_pio2+0x320>)
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	a3ab      	add	r3, pc, #684	; (adr r3, 80101b8 <__ieee754_rem_pio2+0x2e0>)
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	dd36      	ble.n	800ff7e <__ieee754_rem_pio2+0xa6>
 800ff10:	f7f0 f99a 	bl	8000248 <__aeabi_dsub>
 800ff14:	45aa      	cmp	sl, r5
 800ff16:	4606      	mov	r6, r0
 800ff18:	460f      	mov	r7, r1
 800ff1a:	d018      	beq.n	800ff4e <__ieee754_rem_pio2+0x76>
 800ff1c:	a3a8      	add	r3, pc, #672	; (adr r3, 80101c0 <__ieee754_rem_pio2+0x2e8>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	f7f0 f991 	bl	8000248 <__aeabi_dsub>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ff30:	4639      	mov	r1, r7
 800ff32:	f7f0 f989 	bl	8000248 <__aeabi_dsub>
 800ff36:	a3a2      	add	r3, pc, #648	; (adr r3, 80101c0 <__ieee754_rem_pio2+0x2e8>)
 800ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3c:	f7f0 f984 	bl	8000248 <__aeabi_dsub>
 800ff40:	2501      	movs	r5, #1
 800ff42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff46:	4628      	mov	r0, r5
 800ff48:	b00d      	add	sp, #52	; 0x34
 800ff4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4e:	a39e      	add	r3, pc, #632	; (adr r3, 80101c8 <__ieee754_rem_pio2+0x2f0>)
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	f7f0 f978 	bl	8000248 <__aeabi_dsub>
 800ff58:	a39d      	add	r3, pc, #628	; (adr r3, 80101d0 <__ieee754_rem_pio2+0x2f8>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	4606      	mov	r6, r0
 800ff60:	460f      	mov	r7, r1
 800ff62:	f7f0 f971 	bl	8000248 <__aeabi_dsub>
 800ff66:	4602      	mov	r2, r0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	e9c4 2300 	strd	r2, r3, [r4]
 800ff70:	4639      	mov	r1, r7
 800ff72:	f7f0 f969 	bl	8000248 <__aeabi_dsub>
 800ff76:	a396      	add	r3, pc, #600	; (adr r3, 80101d0 <__ieee754_rem_pio2+0x2f8>)
 800ff78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7c:	e7de      	b.n	800ff3c <__ieee754_rem_pio2+0x64>
 800ff7e:	f7f0 f965 	bl	800024c <__adddf3>
 800ff82:	45aa      	cmp	sl, r5
 800ff84:	4606      	mov	r6, r0
 800ff86:	460f      	mov	r7, r1
 800ff88:	d016      	beq.n	800ffb8 <__ieee754_rem_pio2+0xe0>
 800ff8a:	a38d      	add	r3, pc, #564	; (adr r3, 80101c0 <__ieee754_rem_pio2+0x2e8>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 f95c 	bl	800024c <__adddf3>
 800ff94:	4602      	mov	r2, r0
 800ff96:	460b      	mov	r3, r1
 800ff98:	4630      	mov	r0, r6
 800ff9a:	e9c4 2300 	strd	r2, r3, [r4]
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	f7f0 f952 	bl	8000248 <__aeabi_dsub>
 800ffa4:	a386      	add	r3, pc, #536	; (adr r3, 80101c0 <__ieee754_rem_pio2+0x2e8>)
 800ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffaa:	f7f0 f94f 	bl	800024c <__adddf3>
 800ffae:	f04f 35ff 	mov.w	r5, #4294967295
 800ffb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ffb6:	e7c6      	b.n	800ff46 <__ieee754_rem_pio2+0x6e>
 800ffb8:	a383      	add	r3, pc, #524	; (adr r3, 80101c8 <__ieee754_rem_pio2+0x2f0>)
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	f7f0 f945 	bl	800024c <__adddf3>
 800ffc2:	a383      	add	r3, pc, #524	; (adr r3, 80101d0 <__ieee754_rem_pio2+0x2f8>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	4606      	mov	r6, r0
 800ffca:	460f      	mov	r7, r1
 800ffcc:	f7f0 f93e 	bl	800024c <__adddf3>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	e9c4 2300 	strd	r2, r3, [r4]
 800ffda:	4639      	mov	r1, r7
 800ffdc:	f7f0 f934 	bl	8000248 <__aeabi_dsub>
 800ffe0:	a37b      	add	r3, pc, #492	; (adr r3, 80101d0 <__ieee754_rem_pio2+0x2f8>)
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	e7e0      	b.n	800ffaa <__ieee754_rem_pio2+0xd2>
 800ffe8:	4a84      	ldr	r2, [pc, #528]	; (80101fc <__ieee754_rem_pio2+0x324>)
 800ffea:	4592      	cmp	sl, r2
 800ffec:	f300 80d5 	bgt.w	801019a <__ieee754_rem_pio2+0x2c2>
 800fff0:	f001 f85a 	bl	80110a8 <fabs>
 800fff4:	a378      	add	r3, pc, #480	; (adr r3, 80101d8 <__ieee754_rem_pio2+0x300>)
 800fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffa:	4606      	mov	r6, r0
 800fffc:	460f      	mov	r7, r1
 800fffe:	f7f0 fadb 	bl	80005b8 <__aeabi_dmul>
 8010002:	2200      	movs	r2, #0
 8010004:	4b7e      	ldr	r3, [pc, #504]	; (8010200 <__ieee754_rem_pio2+0x328>)
 8010006:	f7f0 f921 	bl	800024c <__adddf3>
 801000a:	f7f0 fd85 	bl	8000b18 <__aeabi_d2iz>
 801000e:	4605      	mov	r5, r0
 8010010:	f7f0 fa68 	bl	80004e4 <__aeabi_i2d>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801001c:	a366      	add	r3, pc, #408	; (adr r3, 80101b8 <__ieee754_rem_pio2+0x2e0>)
 801001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010022:	f7f0 fac9 	bl	80005b8 <__aeabi_dmul>
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	4630      	mov	r0, r6
 801002c:	4639      	mov	r1, r7
 801002e:	f7f0 f90b 	bl	8000248 <__aeabi_dsub>
 8010032:	a363      	add	r3, pc, #396	; (adr r3, 80101c0 <__ieee754_rem_pio2+0x2e8>)
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	4680      	mov	r8, r0
 801003a:	4689      	mov	r9, r1
 801003c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010040:	f7f0 faba 	bl	80005b8 <__aeabi_dmul>
 8010044:	2d1f      	cmp	r5, #31
 8010046:	4606      	mov	r6, r0
 8010048:	460f      	mov	r7, r1
 801004a:	dc0e      	bgt.n	801006a <__ieee754_rem_pio2+0x192>
 801004c:	4b6d      	ldr	r3, [pc, #436]	; (8010204 <__ieee754_rem_pio2+0x32c>)
 801004e:	1e6a      	subs	r2, r5, #1
 8010050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010054:	4553      	cmp	r3, sl
 8010056:	d008      	beq.n	801006a <__ieee754_rem_pio2+0x192>
 8010058:	4632      	mov	r2, r6
 801005a:	463b      	mov	r3, r7
 801005c:	4640      	mov	r0, r8
 801005e:	4649      	mov	r1, r9
 8010060:	f7f0 f8f2 	bl	8000248 <__aeabi_dsub>
 8010064:	e9c4 0100 	strd	r0, r1, [r4]
 8010068:	e013      	b.n	8010092 <__ieee754_rem_pio2+0x1ba>
 801006a:	463b      	mov	r3, r7
 801006c:	4632      	mov	r2, r6
 801006e:	4640      	mov	r0, r8
 8010070:	4649      	mov	r1, r9
 8010072:	f7f0 f8e9 	bl	8000248 <__aeabi_dsub>
 8010076:	ea4f 532a 	mov.w	r3, sl, asr #20
 801007a:	9305      	str	r3, [sp, #20]
 801007c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010080:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8010084:	f1ba 0f10 	cmp.w	sl, #16
 8010088:	dc1f      	bgt.n	80100ca <__ieee754_rem_pio2+0x1f2>
 801008a:	4602      	mov	r2, r0
 801008c:	460b      	mov	r3, r1
 801008e:	e9c4 2300 	strd	r2, r3, [r4]
 8010092:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8010096:	4640      	mov	r0, r8
 8010098:	4653      	mov	r3, sl
 801009a:	4649      	mov	r1, r9
 801009c:	f7f0 f8d4 	bl	8000248 <__aeabi_dsub>
 80100a0:	4632      	mov	r2, r6
 80100a2:	463b      	mov	r3, r7
 80100a4:	f7f0 f8d0 	bl	8000248 <__aeabi_dsub>
 80100a8:	460b      	mov	r3, r1
 80100aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80100ae:	9904      	ldr	r1, [sp, #16]
 80100b0:	4602      	mov	r2, r0
 80100b2:	2900      	cmp	r1, #0
 80100b4:	f6bf af47 	bge.w	800ff46 <__ieee754_rem_pio2+0x6e>
 80100b8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80100bc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80100c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80100c4:	60e3      	str	r3, [r4, #12]
 80100c6:	426d      	negs	r5, r5
 80100c8:	e73d      	b.n	800ff46 <__ieee754_rem_pio2+0x6e>
 80100ca:	a33f      	add	r3, pc, #252	; (adr r3, 80101c8 <__ieee754_rem_pio2+0x2f0>)
 80100cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100d4:	f7f0 fa70 	bl	80005b8 <__aeabi_dmul>
 80100d8:	4606      	mov	r6, r0
 80100da:	460f      	mov	r7, r1
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	4640      	mov	r0, r8
 80100e2:	4649      	mov	r1, r9
 80100e4:	f7f0 f8b0 	bl	8000248 <__aeabi_dsub>
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	4682      	mov	sl, r0
 80100ee:	468b      	mov	fp, r1
 80100f0:	4640      	mov	r0, r8
 80100f2:	4649      	mov	r1, r9
 80100f4:	f7f0 f8a8 	bl	8000248 <__aeabi_dsub>
 80100f8:	4632      	mov	r2, r6
 80100fa:	463b      	mov	r3, r7
 80100fc:	f7f0 f8a4 	bl	8000248 <__aeabi_dsub>
 8010100:	a333      	add	r3, pc, #204	; (adr r3, 80101d0 <__ieee754_rem_pio2+0x2f8>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	4606      	mov	r6, r0
 8010108:	460f      	mov	r7, r1
 801010a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801010e:	f7f0 fa53 	bl	80005b8 <__aeabi_dmul>
 8010112:	4632      	mov	r2, r6
 8010114:	463b      	mov	r3, r7
 8010116:	f7f0 f897 	bl	8000248 <__aeabi_dsub>
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	4606      	mov	r6, r0
 8010120:	460f      	mov	r7, r1
 8010122:	4650      	mov	r0, sl
 8010124:	4659      	mov	r1, fp
 8010126:	f7f0 f88f 	bl	8000248 <__aeabi_dsub>
 801012a:	9a05      	ldr	r2, [sp, #20]
 801012c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	2b31      	cmp	r3, #49	; 0x31
 8010134:	dc06      	bgt.n	8010144 <__ieee754_rem_pio2+0x26c>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	46d0      	mov	r8, sl
 801013c:	46d9      	mov	r9, fp
 801013e:	e9c4 2300 	strd	r2, r3, [r4]
 8010142:	e7a6      	b.n	8010092 <__ieee754_rem_pio2+0x1ba>
 8010144:	a326      	add	r3, pc, #152	; (adr r3, 80101e0 <__ieee754_rem_pio2+0x308>)
 8010146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801014e:	f7f0 fa33 	bl	80005b8 <__aeabi_dmul>
 8010152:	4606      	mov	r6, r0
 8010154:	460f      	mov	r7, r1
 8010156:	4602      	mov	r2, r0
 8010158:	460b      	mov	r3, r1
 801015a:	4650      	mov	r0, sl
 801015c:	4659      	mov	r1, fp
 801015e:	f7f0 f873 	bl	8000248 <__aeabi_dsub>
 8010162:	4602      	mov	r2, r0
 8010164:	460b      	mov	r3, r1
 8010166:	4680      	mov	r8, r0
 8010168:	4689      	mov	r9, r1
 801016a:	4650      	mov	r0, sl
 801016c:	4659      	mov	r1, fp
 801016e:	f7f0 f86b 	bl	8000248 <__aeabi_dsub>
 8010172:	4632      	mov	r2, r6
 8010174:	463b      	mov	r3, r7
 8010176:	f7f0 f867 	bl	8000248 <__aeabi_dsub>
 801017a:	a31b      	add	r3, pc, #108	; (adr r3, 80101e8 <__ieee754_rem_pio2+0x310>)
 801017c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010180:	4606      	mov	r6, r0
 8010182:	460f      	mov	r7, r1
 8010184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010188:	f7f0 fa16 	bl	80005b8 <__aeabi_dmul>
 801018c:	4632      	mov	r2, r6
 801018e:	463b      	mov	r3, r7
 8010190:	f7f0 f85a 	bl	8000248 <__aeabi_dsub>
 8010194:	4606      	mov	r6, r0
 8010196:	460f      	mov	r7, r1
 8010198:	e75e      	b.n	8010058 <__ieee754_rem_pio2+0x180>
 801019a:	4a1b      	ldr	r2, [pc, #108]	; (8010208 <__ieee754_rem_pio2+0x330>)
 801019c:	4592      	cmp	sl, r2
 801019e:	dd35      	ble.n	801020c <__ieee754_rem_pio2+0x334>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	f7f0 f850 	bl	8000248 <__aeabi_dsub>
 80101a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101ac:	e9c4 0100 	strd	r0, r1, [r4]
 80101b0:	e6a2      	b.n	800fef8 <__ieee754_rem_pio2+0x20>
 80101b2:	bf00      	nop
 80101b4:	f3af 8000 	nop.w
 80101b8:	54400000 	.word	0x54400000
 80101bc:	3ff921fb 	.word	0x3ff921fb
 80101c0:	1a626331 	.word	0x1a626331
 80101c4:	3dd0b461 	.word	0x3dd0b461
 80101c8:	1a600000 	.word	0x1a600000
 80101cc:	3dd0b461 	.word	0x3dd0b461
 80101d0:	2e037073 	.word	0x2e037073
 80101d4:	3ba3198a 	.word	0x3ba3198a
 80101d8:	6dc9c883 	.word	0x6dc9c883
 80101dc:	3fe45f30 	.word	0x3fe45f30
 80101e0:	2e000000 	.word	0x2e000000
 80101e4:	3ba3198a 	.word	0x3ba3198a
 80101e8:	252049c1 	.word	0x252049c1
 80101ec:	397b839a 	.word	0x397b839a
 80101f0:	3fe921fb 	.word	0x3fe921fb
 80101f4:	4002d97b 	.word	0x4002d97b
 80101f8:	3ff921fb 	.word	0x3ff921fb
 80101fc:	413921fb 	.word	0x413921fb
 8010200:	3fe00000 	.word	0x3fe00000
 8010204:	08011ac8 	.word	0x08011ac8
 8010208:	7fefffff 	.word	0x7fefffff
 801020c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8010210:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010214:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8010218:	460f      	mov	r7, r1
 801021a:	4606      	mov	r6, r0
 801021c:	f7f0 fc7c 	bl	8000b18 <__aeabi_d2iz>
 8010220:	f7f0 f960 	bl	80004e4 <__aeabi_i2d>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	4630      	mov	r0, r6
 801022a:	4639      	mov	r1, r7
 801022c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010230:	f7f0 f80a 	bl	8000248 <__aeabi_dsub>
 8010234:	2200      	movs	r2, #0
 8010236:	4b22      	ldr	r3, [pc, #136]	; (80102c0 <__ieee754_rem_pio2+0x3e8>)
 8010238:	f7f0 f9be 	bl	80005b8 <__aeabi_dmul>
 801023c:	460f      	mov	r7, r1
 801023e:	4606      	mov	r6, r0
 8010240:	f7f0 fc6a 	bl	8000b18 <__aeabi_d2iz>
 8010244:	f7f0 f94e 	bl	80004e4 <__aeabi_i2d>
 8010248:	4602      	mov	r2, r0
 801024a:	460b      	mov	r3, r1
 801024c:	4630      	mov	r0, r6
 801024e:	4639      	mov	r1, r7
 8010250:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010254:	f7ef fff8 	bl	8000248 <__aeabi_dsub>
 8010258:	2200      	movs	r2, #0
 801025a:	4b19      	ldr	r3, [pc, #100]	; (80102c0 <__ieee754_rem_pio2+0x3e8>)
 801025c:	f7f0 f9ac 	bl	80005b8 <__aeabi_dmul>
 8010260:	f04f 0803 	mov.w	r8, #3
 8010264:	2600      	movs	r6, #0
 8010266:	2700      	movs	r7, #0
 8010268:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801026c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010270:	4632      	mov	r2, r6
 8010272:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010276:	463b      	mov	r3, r7
 8010278:	46c2      	mov	sl, r8
 801027a:	f108 38ff 	add.w	r8, r8, #4294967295
 801027e:	f7f0 fc03 	bl	8000a88 <__aeabi_dcmpeq>
 8010282:	2800      	cmp	r0, #0
 8010284:	d1f4      	bne.n	8010270 <__ieee754_rem_pio2+0x398>
 8010286:	4b0f      	ldr	r3, [pc, #60]	; (80102c4 <__ieee754_rem_pio2+0x3ec>)
 8010288:	462a      	mov	r2, r5
 801028a:	9301      	str	r3, [sp, #4]
 801028c:	2302      	movs	r3, #2
 801028e:	4621      	mov	r1, r4
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	a806      	add	r0, sp, #24
 8010294:	4653      	mov	r3, sl
 8010296:	f000 f8d5 	bl	8010444 <__kernel_rem_pio2>
 801029a:	9b04      	ldr	r3, [sp, #16]
 801029c:	4605      	mov	r5, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f6bf ae51 	bge.w	800ff46 <__ieee754_rem_pio2+0x6e>
 80102a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80102a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102ac:	e9c4 2300 	strd	r2, r3, [r4]
 80102b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80102b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80102bc:	e703      	b.n	80100c6 <__ieee754_rem_pio2+0x1ee>
 80102be:	bf00      	nop
 80102c0:	41700000 	.word	0x41700000
 80102c4:	08011b48 	.word	0x08011b48

080102c8 <__kernel_cos>:
 80102c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80102d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80102d4:	4680      	mov	r8, r0
 80102d6:	460f      	mov	r7, r1
 80102d8:	e9cd 2300 	strd	r2, r3, [sp]
 80102dc:	da04      	bge.n	80102e8 <__kernel_cos+0x20>
 80102de:	f7f0 fc1b 	bl	8000b18 <__aeabi_d2iz>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	f000 8086 	beq.w	80103f4 <__kernel_cos+0x12c>
 80102e8:	4642      	mov	r2, r8
 80102ea:	463b      	mov	r3, r7
 80102ec:	4640      	mov	r0, r8
 80102ee:	4639      	mov	r1, r7
 80102f0:	f7f0 f962 	bl	80005b8 <__aeabi_dmul>
 80102f4:	2200      	movs	r2, #0
 80102f6:	4b4e      	ldr	r3, [pc, #312]	; (8010430 <__kernel_cos+0x168>)
 80102f8:	4604      	mov	r4, r0
 80102fa:	460d      	mov	r5, r1
 80102fc:	f7f0 f95c 	bl	80005b8 <__aeabi_dmul>
 8010300:	a33f      	add	r3, pc, #252	; (adr r3, 8010400 <__kernel_cos+0x138>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	4682      	mov	sl, r0
 8010308:	468b      	mov	fp, r1
 801030a:	4620      	mov	r0, r4
 801030c:	4629      	mov	r1, r5
 801030e:	f7f0 f953 	bl	80005b8 <__aeabi_dmul>
 8010312:	a33d      	add	r3, pc, #244	; (adr r3, 8010408 <__kernel_cos+0x140>)
 8010314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010318:	f7ef ff98 	bl	800024c <__adddf3>
 801031c:	4622      	mov	r2, r4
 801031e:	462b      	mov	r3, r5
 8010320:	f7f0 f94a 	bl	80005b8 <__aeabi_dmul>
 8010324:	a33a      	add	r3, pc, #232	; (adr r3, 8010410 <__kernel_cos+0x148>)
 8010326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032a:	f7ef ff8d 	bl	8000248 <__aeabi_dsub>
 801032e:	4622      	mov	r2, r4
 8010330:	462b      	mov	r3, r5
 8010332:	f7f0 f941 	bl	80005b8 <__aeabi_dmul>
 8010336:	a338      	add	r3, pc, #224	; (adr r3, 8010418 <__kernel_cos+0x150>)
 8010338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033c:	f7ef ff86 	bl	800024c <__adddf3>
 8010340:	4622      	mov	r2, r4
 8010342:	462b      	mov	r3, r5
 8010344:	f7f0 f938 	bl	80005b8 <__aeabi_dmul>
 8010348:	a335      	add	r3, pc, #212	; (adr r3, 8010420 <__kernel_cos+0x158>)
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	f7ef ff7b 	bl	8000248 <__aeabi_dsub>
 8010352:	4622      	mov	r2, r4
 8010354:	462b      	mov	r3, r5
 8010356:	f7f0 f92f 	bl	80005b8 <__aeabi_dmul>
 801035a:	a333      	add	r3, pc, #204	; (adr r3, 8010428 <__kernel_cos+0x160>)
 801035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010360:	f7ef ff74 	bl	800024c <__adddf3>
 8010364:	4622      	mov	r2, r4
 8010366:	462b      	mov	r3, r5
 8010368:	f7f0 f926 	bl	80005b8 <__aeabi_dmul>
 801036c:	4622      	mov	r2, r4
 801036e:	462b      	mov	r3, r5
 8010370:	f7f0 f922 	bl	80005b8 <__aeabi_dmul>
 8010374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010378:	4604      	mov	r4, r0
 801037a:	460d      	mov	r5, r1
 801037c:	4640      	mov	r0, r8
 801037e:	4639      	mov	r1, r7
 8010380:	f7f0 f91a 	bl	80005b8 <__aeabi_dmul>
 8010384:	460b      	mov	r3, r1
 8010386:	4602      	mov	r2, r0
 8010388:	4629      	mov	r1, r5
 801038a:	4620      	mov	r0, r4
 801038c:	f7ef ff5c 	bl	8000248 <__aeabi_dsub>
 8010390:	4b28      	ldr	r3, [pc, #160]	; (8010434 <__kernel_cos+0x16c>)
 8010392:	4680      	mov	r8, r0
 8010394:	429e      	cmp	r6, r3
 8010396:	4689      	mov	r9, r1
 8010398:	dc0e      	bgt.n	80103b8 <__kernel_cos+0xf0>
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	4650      	mov	r0, sl
 80103a0:	4659      	mov	r1, fp
 80103a2:	f7ef ff51 	bl	8000248 <__aeabi_dsub>
 80103a6:	4602      	mov	r2, r0
 80103a8:	2000      	movs	r0, #0
 80103aa:	460b      	mov	r3, r1
 80103ac:	4922      	ldr	r1, [pc, #136]	; (8010438 <__kernel_cos+0x170>)
 80103ae:	f7ef ff4b 	bl	8000248 <__aeabi_dsub>
 80103b2:	b003      	add	sp, #12
 80103b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b8:	2400      	movs	r4, #0
 80103ba:	4b20      	ldr	r3, [pc, #128]	; (801043c <__kernel_cos+0x174>)
 80103bc:	4622      	mov	r2, r4
 80103be:	429e      	cmp	r6, r3
 80103c0:	bfcc      	ite	gt
 80103c2:	4d1f      	ldrgt	r5, [pc, #124]	; (8010440 <__kernel_cos+0x178>)
 80103c4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80103c8:	462b      	mov	r3, r5
 80103ca:	2000      	movs	r0, #0
 80103cc:	491a      	ldr	r1, [pc, #104]	; (8010438 <__kernel_cos+0x170>)
 80103ce:	f7ef ff3b 	bl	8000248 <__aeabi_dsub>
 80103d2:	4622      	mov	r2, r4
 80103d4:	4606      	mov	r6, r0
 80103d6:	460f      	mov	r7, r1
 80103d8:	462b      	mov	r3, r5
 80103da:	4650      	mov	r0, sl
 80103dc:	4659      	mov	r1, fp
 80103de:	f7ef ff33 	bl	8000248 <__aeabi_dsub>
 80103e2:	4642      	mov	r2, r8
 80103e4:	464b      	mov	r3, r9
 80103e6:	f7ef ff2f 	bl	8000248 <__aeabi_dsub>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4630      	mov	r0, r6
 80103f0:	4639      	mov	r1, r7
 80103f2:	e7dc      	b.n	80103ae <__kernel_cos+0xe6>
 80103f4:	2000      	movs	r0, #0
 80103f6:	4910      	ldr	r1, [pc, #64]	; (8010438 <__kernel_cos+0x170>)
 80103f8:	e7db      	b.n	80103b2 <__kernel_cos+0xea>
 80103fa:	bf00      	nop
 80103fc:	f3af 8000 	nop.w
 8010400:	be8838d4 	.word	0xbe8838d4
 8010404:	bda8fae9 	.word	0xbda8fae9
 8010408:	bdb4b1c4 	.word	0xbdb4b1c4
 801040c:	3e21ee9e 	.word	0x3e21ee9e
 8010410:	809c52ad 	.word	0x809c52ad
 8010414:	3e927e4f 	.word	0x3e927e4f
 8010418:	19cb1590 	.word	0x19cb1590
 801041c:	3efa01a0 	.word	0x3efa01a0
 8010420:	16c15177 	.word	0x16c15177
 8010424:	3f56c16c 	.word	0x3f56c16c
 8010428:	5555554c 	.word	0x5555554c
 801042c:	3fa55555 	.word	0x3fa55555
 8010430:	3fe00000 	.word	0x3fe00000
 8010434:	3fd33332 	.word	0x3fd33332
 8010438:	3ff00000 	.word	0x3ff00000
 801043c:	3fe90000 	.word	0x3fe90000
 8010440:	3fd20000 	.word	0x3fd20000

08010444 <__kernel_rem_pio2>:
 8010444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801044c:	9308      	str	r3, [sp, #32]
 801044e:	9106      	str	r1, [sp, #24]
 8010450:	4bb6      	ldr	r3, [pc, #728]	; (801072c <__kernel_rem_pio2+0x2e8>)
 8010452:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8010454:	f112 0f14 	cmn.w	r2, #20
 8010458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801045c:	bfa8      	it	ge
 801045e:	1ed4      	subge	r4, r2, #3
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	9b08      	ldr	r3, [sp, #32]
 8010464:	bfb8      	it	lt
 8010466:	2400      	movlt	r4, #0
 8010468:	f103 33ff 	add.w	r3, r3, #4294967295
 801046c:	9307      	str	r3, [sp, #28]
 801046e:	bfa4      	itt	ge
 8010470:	2318      	movge	r3, #24
 8010472:	fb94 f4f3 	sdivge	r4, r4, r3
 8010476:	f06f 0317 	mvn.w	r3, #23
 801047a:	fb04 3303 	mla	r3, r4, r3, r3
 801047e:	eb03 0b02 	add.w	fp, r3, r2
 8010482:	9a07      	ldr	r2, [sp, #28]
 8010484:	9b02      	ldr	r3, [sp, #8]
 8010486:	1aa7      	subs	r7, r4, r2
 8010488:	eb03 0802 	add.w	r8, r3, r2
 801048c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801048e:	2500      	movs	r5, #0
 8010490:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010494:	2200      	movs	r2, #0
 8010496:	2300      	movs	r3, #0
 8010498:	9009      	str	r0, [sp, #36]	; 0x24
 801049a:	ae20      	add	r6, sp, #128	; 0x80
 801049c:	4545      	cmp	r5, r8
 801049e:	dd14      	ble.n	80104ca <__kernel_rem_pio2+0x86>
 80104a0:	f04f 0800 	mov.w	r8, #0
 80104a4:	9a08      	ldr	r2, [sp, #32]
 80104a6:	ab20      	add	r3, sp, #128	; 0x80
 80104a8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80104ac:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80104b0:	9b02      	ldr	r3, [sp, #8]
 80104b2:	4598      	cmp	r8, r3
 80104b4:	dc35      	bgt.n	8010522 <__kernel_rem_pio2+0xde>
 80104b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b8:	2200      	movs	r2, #0
 80104ba:	f1a3 0908 	sub.w	r9, r3, #8
 80104be:	2300      	movs	r3, #0
 80104c0:	462f      	mov	r7, r5
 80104c2:	2600      	movs	r6, #0
 80104c4:	e9cd 2300 	strd	r2, r3, [sp]
 80104c8:	e01f      	b.n	801050a <__kernel_rem_pio2+0xc6>
 80104ca:	42ef      	cmn	r7, r5
 80104cc:	d40b      	bmi.n	80104e6 <__kernel_rem_pio2+0xa2>
 80104ce:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80104d2:	e9cd 2300 	strd	r2, r3, [sp]
 80104d6:	f7f0 f805 	bl	80004e4 <__aeabi_i2d>
 80104da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104de:	e8e6 0102 	strd	r0, r1, [r6], #8
 80104e2:	3501      	adds	r5, #1
 80104e4:	e7da      	b.n	801049c <__kernel_rem_pio2+0x58>
 80104e6:	4610      	mov	r0, r2
 80104e8:	4619      	mov	r1, r3
 80104ea:	e7f8      	b.n	80104de <__kernel_rem_pio2+0x9a>
 80104ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104f0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80104f4:	f7f0 f860 	bl	80005b8 <__aeabi_dmul>
 80104f8:	4602      	mov	r2, r0
 80104fa:	460b      	mov	r3, r1
 80104fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010500:	f7ef fea4 	bl	800024c <__adddf3>
 8010504:	e9cd 0100 	strd	r0, r1, [sp]
 8010508:	3601      	adds	r6, #1
 801050a:	9b07      	ldr	r3, [sp, #28]
 801050c:	3f08      	subs	r7, #8
 801050e:	429e      	cmp	r6, r3
 8010510:	ddec      	ble.n	80104ec <__kernel_rem_pio2+0xa8>
 8010512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010516:	f108 0801 	add.w	r8, r8, #1
 801051a:	e8ea 2302 	strd	r2, r3, [sl], #8
 801051e:	3508      	adds	r5, #8
 8010520:	e7c6      	b.n	80104b0 <__kernel_rem_pio2+0x6c>
 8010522:	9b02      	ldr	r3, [sp, #8]
 8010524:	aa0c      	add	r2, sp, #48	; 0x30
 8010526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801052a:	930b      	str	r3, [sp, #44]	; 0x2c
 801052c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801052e:	9e02      	ldr	r6, [sp, #8]
 8010530:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010534:	930a      	str	r3, [sp, #40]	; 0x28
 8010536:	ab98      	add	r3, sp, #608	; 0x260
 8010538:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801053c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8010540:	ab70      	add	r3, sp, #448	; 0x1c0
 8010542:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8010546:	46d0      	mov	r8, sl
 8010548:	46b1      	mov	r9, r6
 801054a:	af0c      	add	r7, sp, #48	; 0x30
 801054c:	9700      	str	r7, [sp, #0]
 801054e:	f1b9 0f00 	cmp.w	r9, #0
 8010552:	f1a8 0808 	sub.w	r8, r8, #8
 8010556:	dc71      	bgt.n	801063c <__kernel_rem_pio2+0x1f8>
 8010558:	465a      	mov	r2, fp
 801055a:	4620      	mov	r0, r4
 801055c:	4629      	mov	r1, r5
 801055e:	f000 fe2f 	bl	80111c0 <scalbn>
 8010562:	2200      	movs	r2, #0
 8010564:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	f7f0 f824 	bl	80005b8 <__aeabi_dmul>
 8010570:	f000 fda6 	bl	80110c0 <floor>
 8010574:	2200      	movs	r2, #0
 8010576:	4b6e      	ldr	r3, [pc, #440]	; (8010730 <__kernel_rem_pio2+0x2ec>)
 8010578:	f7f0 f81e 	bl	80005b8 <__aeabi_dmul>
 801057c:	4602      	mov	r2, r0
 801057e:	460b      	mov	r3, r1
 8010580:	4620      	mov	r0, r4
 8010582:	4629      	mov	r1, r5
 8010584:	f7ef fe60 	bl	8000248 <__aeabi_dsub>
 8010588:	460d      	mov	r5, r1
 801058a:	4604      	mov	r4, r0
 801058c:	f7f0 fac4 	bl	8000b18 <__aeabi_d2iz>
 8010590:	9004      	str	r0, [sp, #16]
 8010592:	f7ef ffa7 	bl	80004e4 <__aeabi_i2d>
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	4620      	mov	r0, r4
 801059c:	4629      	mov	r1, r5
 801059e:	f7ef fe53 	bl	8000248 <__aeabi_dsub>
 80105a2:	f1bb 0f00 	cmp.w	fp, #0
 80105a6:	4680      	mov	r8, r0
 80105a8:	4689      	mov	r9, r1
 80105aa:	dd70      	ble.n	801068e <__kernel_rem_pio2+0x24a>
 80105ac:	1e72      	subs	r2, r6, #1
 80105ae:	ab0c      	add	r3, sp, #48	; 0x30
 80105b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80105b4:	9c04      	ldr	r4, [sp, #16]
 80105b6:	f1cb 0118 	rsb	r1, fp, #24
 80105ba:	fa40 f301 	asr.w	r3, r0, r1
 80105be:	441c      	add	r4, r3
 80105c0:	408b      	lsls	r3, r1
 80105c2:	1ac0      	subs	r0, r0, r3
 80105c4:	ab0c      	add	r3, sp, #48	; 0x30
 80105c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80105ca:	f1cb 0317 	rsb	r3, fp, #23
 80105ce:	9404      	str	r4, [sp, #16]
 80105d0:	fa40 f303 	asr.w	r3, r0, r3
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	9b00      	ldr	r3, [sp, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	dd66      	ble.n	80106aa <__kernel_rem_pio2+0x266>
 80105dc:	2200      	movs	r2, #0
 80105de:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80105e2:	4614      	mov	r4, r2
 80105e4:	9b04      	ldr	r3, [sp, #16]
 80105e6:	3301      	adds	r3, #1
 80105e8:	9304      	str	r3, [sp, #16]
 80105ea:	4296      	cmp	r6, r2
 80105ec:	f300 80ac 	bgt.w	8010748 <__kernel_rem_pio2+0x304>
 80105f0:	f1bb 0f00 	cmp.w	fp, #0
 80105f4:	dd07      	ble.n	8010606 <__kernel_rem_pio2+0x1c2>
 80105f6:	f1bb 0f01 	cmp.w	fp, #1
 80105fa:	f000 80b4 	beq.w	8010766 <__kernel_rem_pio2+0x322>
 80105fe:	f1bb 0f02 	cmp.w	fp, #2
 8010602:	f000 80ba 	beq.w	801077a <__kernel_rem_pio2+0x336>
 8010606:	9b00      	ldr	r3, [sp, #0]
 8010608:	2b02      	cmp	r3, #2
 801060a:	d14e      	bne.n	80106aa <__kernel_rem_pio2+0x266>
 801060c:	4642      	mov	r2, r8
 801060e:	464b      	mov	r3, r9
 8010610:	2000      	movs	r0, #0
 8010612:	4948      	ldr	r1, [pc, #288]	; (8010734 <__kernel_rem_pio2+0x2f0>)
 8010614:	f7ef fe18 	bl	8000248 <__aeabi_dsub>
 8010618:	4680      	mov	r8, r0
 801061a:	4689      	mov	r9, r1
 801061c:	2c00      	cmp	r4, #0
 801061e:	d044      	beq.n	80106aa <__kernel_rem_pio2+0x266>
 8010620:	465a      	mov	r2, fp
 8010622:	2000      	movs	r0, #0
 8010624:	4943      	ldr	r1, [pc, #268]	; (8010734 <__kernel_rem_pio2+0x2f0>)
 8010626:	f000 fdcb 	bl	80111c0 <scalbn>
 801062a:	4602      	mov	r2, r0
 801062c:	460b      	mov	r3, r1
 801062e:	4640      	mov	r0, r8
 8010630:	4649      	mov	r1, r9
 8010632:	f7ef fe09 	bl	8000248 <__aeabi_dsub>
 8010636:	4680      	mov	r8, r0
 8010638:	4689      	mov	r9, r1
 801063a:	e036      	b.n	80106aa <__kernel_rem_pio2+0x266>
 801063c:	2200      	movs	r2, #0
 801063e:	4b3e      	ldr	r3, [pc, #248]	; (8010738 <__kernel_rem_pio2+0x2f4>)
 8010640:	4620      	mov	r0, r4
 8010642:	4629      	mov	r1, r5
 8010644:	f7ef ffb8 	bl	80005b8 <__aeabi_dmul>
 8010648:	f7f0 fa66 	bl	8000b18 <__aeabi_d2iz>
 801064c:	f7ef ff4a 	bl	80004e4 <__aeabi_i2d>
 8010650:	4602      	mov	r2, r0
 8010652:	460b      	mov	r3, r1
 8010654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010658:	2200      	movs	r2, #0
 801065a:	4b38      	ldr	r3, [pc, #224]	; (801073c <__kernel_rem_pio2+0x2f8>)
 801065c:	f7ef ffac 	bl	80005b8 <__aeabi_dmul>
 8010660:	4602      	mov	r2, r0
 8010662:	460b      	mov	r3, r1
 8010664:	4620      	mov	r0, r4
 8010666:	4629      	mov	r1, r5
 8010668:	f7ef fdee 	bl	8000248 <__aeabi_dsub>
 801066c:	f7f0 fa54 	bl	8000b18 <__aeabi_d2iz>
 8010670:	9b00      	ldr	r3, [sp, #0]
 8010672:	f109 39ff 	add.w	r9, r9, #4294967295
 8010676:	f843 0b04 	str.w	r0, [r3], #4
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010680:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010684:	f7ef fde2 	bl	800024c <__adddf3>
 8010688:	4604      	mov	r4, r0
 801068a:	460d      	mov	r5, r1
 801068c:	e75f      	b.n	801054e <__kernel_rem_pio2+0x10a>
 801068e:	d105      	bne.n	801069c <__kernel_rem_pio2+0x258>
 8010690:	1e73      	subs	r3, r6, #1
 8010692:	aa0c      	add	r2, sp, #48	; 0x30
 8010694:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010698:	15c3      	asrs	r3, r0, #23
 801069a:	e79b      	b.n	80105d4 <__kernel_rem_pio2+0x190>
 801069c:	2200      	movs	r2, #0
 801069e:	4b28      	ldr	r3, [pc, #160]	; (8010740 <__kernel_rem_pio2+0x2fc>)
 80106a0:	f7f0 fa10 	bl	8000ac4 <__aeabi_dcmpge>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d13e      	bne.n	8010726 <__kernel_rem_pio2+0x2e2>
 80106a8:	9000      	str	r0, [sp, #0]
 80106aa:	2200      	movs	r2, #0
 80106ac:	2300      	movs	r3, #0
 80106ae:	4640      	mov	r0, r8
 80106b0:	4649      	mov	r1, r9
 80106b2:	f7f0 f9e9 	bl	8000a88 <__aeabi_dcmpeq>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	f000 80b1 	beq.w	801081e <__kernel_rem_pio2+0x3da>
 80106bc:	1e74      	subs	r4, r6, #1
 80106be:	4623      	mov	r3, r4
 80106c0:	2200      	movs	r2, #0
 80106c2:	9902      	ldr	r1, [sp, #8]
 80106c4:	428b      	cmp	r3, r1
 80106c6:	da5f      	bge.n	8010788 <__kernel_rem_pio2+0x344>
 80106c8:	2a00      	cmp	r2, #0
 80106ca:	d074      	beq.n	80107b6 <__kernel_rem_pio2+0x372>
 80106cc:	ab0c      	add	r3, sp, #48	; 0x30
 80106ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80106d2:	f1ab 0b18 	sub.w	fp, fp, #24
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 809f 	beq.w	801081a <__kernel_rem_pio2+0x3d6>
 80106dc:	465a      	mov	r2, fp
 80106de:	2000      	movs	r0, #0
 80106e0:	4914      	ldr	r1, [pc, #80]	; (8010734 <__kernel_rem_pio2+0x2f0>)
 80106e2:	f000 fd6d 	bl	80111c0 <scalbn>
 80106e6:	46a2      	mov	sl, r4
 80106e8:	4606      	mov	r6, r0
 80106ea:	460f      	mov	r7, r1
 80106ec:	f04f 0800 	mov.w	r8, #0
 80106f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80106f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8010738 <__kernel_rem_pio2+0x2f4>
 80106f6:	00e5      	lsls	r5, r4, #3
 80106f8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80106fc:	f1ba 0f00 	cmp.w	sl, #0
 8010700:	f280 80c3 	bge.w	801088a <__kernel_rem_pio2+0x446>
 8010704:	4626      	mov	r6, r4
 8010706:	2e00      	cmp	r6, #0
 8010708:	f2c0 80f5 	blt.w	80108f6 <__kernel_rem_pio2+0x4b2>
 801070c:	4b0d      	ldr	r3, [pc, #52]	; (8010744 <__kernel_rem_pio2+0x300>)
 801070e:	f04f 0a00 	mov.w	sl, #0
 8010712:	9307      	str	r3, [sp, #28]
 8010714:	ab70      	add	r3, sp, #448	; 0x1c0
 8010716:	f04f 0b00 	mov.w	fp, #0
 801071a:	f04f 0800 	mov.w	r8, #0
 801071e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010722:	1ba7      	subs	r7, r4, r6
 8010724:	e0db      	b.n	80108de <__kernel_rem_pio2+0x49a>
 8010726:	2302      	movs	r3, #2
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	e757      	b.n	80105dc <__kernel_rem_pio2+0x198>
 801072c:	08011c90 	.word	0x08011c90
 8010730:	40200000 	.word	0x40200000
 8010734:	3ff00000 	.word	0x3ff00000
 8010738:	3e700000 	.word	0x3e700000
 801073c:	41700000 	.word	0x41700000
 8010740:	3fe00000 	.word	0x3fe00000
 8010744:	08011c50 	.word	0x08011c50
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	b944      	cbnz	r4, 801075e <__kernel_rem_pio2+0x31a>
 801074c:	b11b      	cbz	r3, 8010756 <__kernel_rem_pio2+0x312>
 801074e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	2301      	movs	r3, #1
 8010756:	461c      	mov	r4, r3
 8010758:	3201      	adds	r2, #1
 801075a:	3704      	adds	r7, #4
 801075c:	e745      	b.n	80105ea <__kernel_rem_pio2+0x1a6>
 801075e:	1acb      	subs	r3, r1, r3
 8010760:	603b      	str	r3, [r7, #0]
 8010762:	4623      	mov	r3, r4
 8010764:	e7f7      	b.n	8010756 <__kernel_rem_pio2+0x312>
 8010766:	1e72      	subs	r2, r6, #1
 8010768:	ab0c      	add	r3, sp, #48	; 0x30
 801076a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801076e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010772:	a90c      	add	r1, sp, #48	; 0x30
 8010774:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010778:	e745      	b.n	8010606 <__kernel_rem_pio2+0x1c2>
 801077a:	1e72      	subs	r2, r6, #1
 801077c:	ab0c      	add	r3, sp, #48	; 0x30
 801077e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010782:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010786:	e7f4      	b.n	8010772 <__kernel_rem_pio2+0x32e>
 8010788:	a90c      	add	r1, sp, #48	; 0x30
 801078a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801078e:	3b01      	subs	r3, #1
 8010790:	430a      	orrs	r2, r1
 8010792:	e796      	b.n	80106c2 <__kernel_rem_pio2+0x27e>
 8010794:	3401      	adds	r4, #1
 8010796:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801079a:	2a00      	cmp	r2, #0
 801079c:	d0fa      	beq.n	8010794 <__kernel_rem_pio2+0x350>
 801079e:	9b08      	ldr	r3, [sp, #32]
 80107a0:	f106 0801 	add.w	r8, r6, #1
 80107a4:	18f5      	adds	r5, r6, r3
 80107a6:	ab20      	add	r3, sp, #128	; 0x80
 80107a8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80107ac:	4434      	add	r4, r6
 80107ae:	4544      	cmp	r4, r8
 80107b0:	da04      	bge.n	80107bc <__kernel_rem_pio2+0x378>
 80107b2:	4626      	mov	r6, r4
 80107b4:	e6bf      	b.n	8010536 <__kernel_rem_pio2+0xf2>
 80107b6:	2401      	movs	r4, #1
 80107b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ba:	e7ec      	b.n	8010796 <__kernel_rem_pio2+0x352>
 80107bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107be:	f04f 0900 	mov.w	r9, #0
 80107c2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80107c6:	f7ef fe8d 	bl	80004e4 <__aeabi_i2d>
 80107ca:	2600      	movs	r6, #0
 80107cc:	2700      	movs	r7, #0
 80107ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d0:	e9c5 0100 	strd	r0, r1, [r5]
 80107d4:	3b08      	subs	r3, #8
 80107d6:	9300      	str	r3, [sp, #0]
 80107d8:	9504      	str	r5, [sp, #16]
 80107da:	9b07      	ldr	r3, [sp, #28]
 80107dc:	4599      	cmp	r9, r3
 80107de:	dd05      	ble.n	80107ec <__kernel_rem_pio2+0x3a8>
 80107e0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80107e4:	f108 0801 	add.w	r8, r8, #1
 80107e8:	3508      	adds	r5, #8
 80107ea:	e7e0      	b.n	80107ae <__kernel_rem_pio2+0x36a>
 80107ec:	f8dd c010 	ldr.w	ip, [sp, #16]
 80107f0:	9900      	ldr	r1, [sp, #0]
 80107f2:	f109 0901 	add.w	r9, r9, #1
 80107f6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80107fa:	9100      	str	r1, [sp, #0]
 80107fc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8010800:	f8cd c010 	str.w	ip, [sp, #16]
 8010804:	f7ef fed8 	bl	80005b8 <__aeabi_dmul>
 8010808:	4602      	mov	r2, r0
 801080a:	460b      	mov	r3, r1
 801080c:	4630      	mov	r0, r6
 801080e:	4639      	mov	r1, r7
 8010810:	f7ef fd1c 	bl	800024c <__adddf3>
 8010814:	4606      	mov	r6, r0
 8010816:	460f      	mov	r7, r1
 8010818:	e7df      	b.n	80107da <__kernel_rem_pio2+0x396>
 801081a:	3c01      	subs	r4, #1
 801081c:	e756      	b.n	80106cc <__kernel_rem_pio2+0x288>
 801081e:	f1cb 0200 	rsb	r2, fp, #0
 8010822:	4640      	mov	r0, r8
 8010824:	4649      	mov	r1, r9
 8010826:	f000 fccb 	bl	80111c0 <scalbn>
 801082a:	2200      	movs	r2, #0
 801082c:	4ba4      	ldr	r3, [pc, #656]	; (8010ac0 <__kernel_rem_pio2+0x67c>)
 801082e:	4604      	mov	r4, r0
 8010830:	460d      	mov	r5, r1
 8010832:	f7f0 f947 	bl	8000ac4 <__aeabi_dcmpge>
 8010836:	b1f8      	cbz	r0, 8010878 <__kernel_rem_pio2+0x434>
 8010838:	2200      	movs	r2, #0
 801083a:	4ba2      	ldr	r3, [pc, #648]	; (8010ac4 <__kernel_rem_pio2+0x680>)
 801083c:	4620      	mov	r0, r4
 801083e:	4629      	mov	r1, r5
 8010840:	f7ef feba 	bl	80005b8 <__aeabi_dmul>
 8010844:	f7f0 f968 	bl	8000b18 <__aeabi_d2iz>
 8010848:	4607      	mov	r7, r0
 801084a:	f7ef fe4b 	bl	80004e4 <__aeabi_i2d>
 801084e:	2200      	movs	r2, #0
 8010850:	4b9b      	ldr	r3, [pc, #620]	; (8010ac0 <__kernel_rem_pio2+0x67c>)
 8010852:	f7ef feb1 	bl	80005b8 <__aeabi_dmul>
 8010856:	460b      	mov	r3, r1
 8010858:	4602      	mov	r2, r0
 801085a:	4629      	mov	r1, r5
 801085c:	4620      	mov	r0, r4
 801085e:	f7ef fcf3 	bl	8000248 <__aeabi_dsub>
 8010862:	f7f0 f959 	bl	8000b18 <__aeabi_d2iz>
 8010866:	1c74      	adds	r4, r6, #1
 8010868:	ab0c      	add	r3, sp, #48	; 0x30
 801086a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 801086e:	f10b 0b18 	add.w	fp, fp, #24
 8010872:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8010876:	e731      	b.n	80106dc <__kernel_rem_pio2+0x298>
 8010878:	4620      	mov	r0, r4
 801087a:	4629      	mov	r1, r5
 801087c:	f7f0 f94c 	bl	8000b18 <__aeabi_d2iz>
 8010880:	ab0c      	add	r3, sp, #48	; 0x30
 8010882:	4634      	mov	r4, r6
 8010884:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8010888:	e728      	b.n	80106dc <__kernel_rem_pio2+0x298>
 801088a:	ab0c      	add	r3, sp, #48	; 0x30
 801088c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010890:	f7ef fe28 	bl	80004e4 <__aeabi_i2d>
 8010894:	4632      	mov	r2, r6
 8010896:	463b      	mov	r3, r7
 8010898:	f7ef fe8e 	bl	80005b8 <__aeabi_dmul>
 801089c:	4642      	mov	r2, r8
 801089e:	e86b 0102 	strd	r0, r1, [fp], #-8
 80108a2:	464b      	mov	r3, r9
 80108a4:	4630      	mov	r0, r6
 80108a6:	4639      	mov	r1, r7
 80108a8:	f7ef fe86 	bl	80005b8 <__aeabi_dmul>
 80108ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108b0:	4606      	mov	r6, r0
 80108b2:	460f      	mov	r7, r1
 80108b4:	e722      	b.n	80106fc <__kernel_rem_pio2+0x2b8>
 80108b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80108ba:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80108be:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80108c2:	f8cd c01c 	str.w	ip, [sp, #28]
 80108c6:	f7ef fe77 	bl	80005b8 <__aeabi_dmul>
 80108ca:	4602      	mov	r2, r0
 80108cc:	460b      	mov	r3, r1
 80108ce:	4650      	mov	r0, sl
 80108d0:	4659      	mov	r1, fp
 80108d2:	f7ef fcbb 	bl	800024c <__adddf3>
 80108d6:	4682      	mov	sl, r0
 80108d8:	468b      	mov	fp, r1
 80108da:	f108 0801 	add.w	r8, r8, #1
 80108de:	9b02      	ldr	r3, [sp, #8]
 80108e0:	4598      	cmp	r8, r3
 80108e2:	dc01      	bgt.n	80108e8 <__kernel_rem_pio2+0x4a4>
 80108e4:	45b8      	cmp	r8, r7
 80108e6:	dde6      	ble.n	80108b6 <__kernel_rem_pio2+0x472>
 80108e8:	ab48      	add	r3, sp, #288	; 0x120
 80108ea:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80108ee:	e9c7 ab00 	strd	sl, fp, [r7]
 80108f2:	3e01      	subs	r6, #1
 80108f4:	e707      	b.n	8010706 <__kernel_rem_pio2+0x2c2>
 80108f6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	dc09      	bgt.n	8010910 <__kernel_rem_pio2+0x4cc>
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	dc32      	bgt.n	8010966 <__kernel_rem_pio2+0x522>
 8010900:	d05a      	beq.n	80109b8 <__kernel_rem_pio2+0x574>
 8010902:	9b04      	ldr	r3, [sp, #16]
 8010904:	f003 0007 	and.w	r0, r3, #7
 8010908:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801090c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010910:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010912:	2b03      	cmp	r3, #3
 8010914:	d1f5      	bne.n	8010902 <__kernel_rem_pio2+0x4be>
 8010916:	ab48      	add	r3, sp, #288	; 0x120
 8010918:	441d      	add	r5, r3
 801091a:	46aa      	mov	sl, r5
 801091c:	46a3      	mov	fp, r4
 801091e:	f1bb 0f00 	cmp.w	fp, #0
 8010922:	dc76      	bgt.n	8010a12 <__kernel_rem_pio2+0x5ce>
 8010924:	46aa      	mov	sl, r5
 8010926:	46a3      	mov	fp, r4
 8010928:	f1bb 0f01 	cmp.w	fp, #1
 801092c:	f300 8090 	bgt.w	8010a50 <__kernel_rem_pio2+0x60c>
 8010930:	2700      	movs	r7, #0
 8010932:	463e      	mov	r6, r7
 8010934:	2c01      	cmp	r4, #1
 8010936:	f300 80aa 	bgt.w	8010a8e <__kernel_rem_pio2+0x64a>
 801093a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 801093e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8010942:	9b00      	ldr	r3, [sp, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	f040 80ac 	bne.w	8010aa2 <__kernel_rem_pio2+0x65e>
 801094a:	4603      	mov	r3, r0
 801094c:	462a      	mov	r2, r5
 801094e:	9806      	ldr	r0, [sp, #24]
 8010950:	e9c0 2300 	strd	r2, r3, [r0]
 8010954:	4622      	mov	r2, r4
 8010956:	460b      	mov	r3, r1
 8010958:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801095c:	463a      	mov	r2, r7
 801095e:	4633      	mov	r3, r6
 8010960:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010964:	e7cd      	b.n	8010902 <__kernel_rem_pio2+0x4be>
 8010966:	2000      	movs	r0, #0
 8010968:	46a0      	mov	r8, r4
 801096a:	4601      	mov	r1, r0
 801096c:	ab48      	add	r3, sp, #288	; 0x120
 801096e:	441d      	add	r5, r3
 8010970:	f1b8 0f00 	cmp.w	r8, #0
 8010974:	da3a      	bge.n	80109ec <__kernel_rem_pio2+0x5a8>
 8010976:	9b00      	ldr	r3, [sp, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d03e      	beq.n	80109fa <__kernel_rem_pio2+0x5b6>
 801097c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8010980:	4602      	mov	r2, r0
 8010982:	462b      	mov	r3, r5
 8010984:	9d06      	ldr	r5, [sp, #24]
 8010986:	2601      	movs	r6, #1
 8010988:	e9c5 2300 	strd	r2, r3, [r5]
 801098c:	460b      	mov	r3, r1
 801098e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010992:	f7ef fc59 	bl	8000248 <__aeabi_dsub>
 8010996:	4684      	mov	ip, r0
 8010998:	460f      	mov	r7, r1
 801099a:	ad48      	add	r5, sp, #288	; 0x120
 801099c:	42b4      	cmp	r4, r6
 801099e:	f105 0508 	add.w	r5, r5, #8
 80109a2:	da2c      	bge.n	80109fe <__kernel_rem_pio2+0x5ba>
 80109a4:	9b00      	ldr	r3, [sp, #0]
 80109a6:	b10b      	cbz	r3, 80109ac <__kernel_rem_pio2+0x568>
 80109a8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80109ac:	4662      	mov	r2, ip
 80109ae:	463b      	mov	r3, r7
 80109b0:	9906      	ldr	r1, [sp, #24]
 80109b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80109b6:	e7a4      	b.n	8010902 <__kernel_rem_pio2+0x4be>
 80109b8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80109ba:	ab48      	add	r3, sp, #288	; 0x120
 80109bc:	4637      	mov	r7, r6
 80109be:	441d      	add	r5, r3
 80109c0:	2c00      	cmp	r4, #0
 80109c2:	da09      	bge.n	80109d8 <__kernel_rem_pio2+0x594>
 80109c4:	9b00      	ldr	r3, [sp, #0]
 80109c6:	b10b      	cbz	r3, 80109cc <__kernel_rem_pio2+0x588>
 80109c8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80109cc:	4632      	mov	r2, r6
 80109ce:	463b      	mov	r3, r7
 80109d0:	9906      	ldr	r1, [sp, #24]
 80109d2:	e9c1 2300 	strd	r2, r3, [r1]
 80109d6:	e794      	b.n	8010902 <__kernel_rem_pio2+0x4be>
 80109d8:	4630      	mov	r0, r6
 80109da:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80109de:	4639      	mov	r1, r7
 80109e0:	f7ef fc34 	bl	800024c <__adddf3>
 80109e4:	3c01      	subs	r4, #1
 80109e6:	4606      	mov	r6, r0
 80109e8:	460f      	mov	r7, r1
 80109ea:	e7e9      	b.n	80109c0 <__kernel_rem_pio2+0x57c>
 80109ec:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80109f0:	f7ef fc2c 	bl	800024c <__adddf3>
 80109f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80109f8:	e7ba      	b.n	8010970 <__kernel_rem_pio2+0x52c>
 80109fa:	460d      	mov	r5, r1
 80109fc:	e7c0      	b.n	8010980 <__kernel_rem_pio2+0x53c>
 80109fe:	4660      	mov	r0, ip
 8010a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a04:	4639      	mov	r1, r7
 8010a06:	f7ef fc21 	bl	800024c <__adddf3>
 8010a0a:	3601      	adds	r6, #1
 8010a0c:	4684      	mov	ip, r0
 8010a0e:	460f      	mov	r7, r1
 8010a10:	e7c4      	b.n	801099c <__kernel_rem_pio2+0x558>
 8010a12:	e9da 6700 	ldrd	r6, r7, [sl]
 8010a16:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8010a1a:	4632      	mov	r2, r6
 8010a1c:	463b      	mov	r3, r7
 8010a1e:	4640      	mov	r0, r8
 8010a20:	4649      	mov	r1, r9
 8010a22:	f7ef fc13 	bl	800024c <__adddf3>
 8010a26:	4602      	mov	r2, r0
 8010a28:	460b      	mov	r3, r1
 8010a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a2e:	4640      	mov	r0, r8
 8010a30:	4649      	mov	r1, r9
 8010a32:	f7ef fc09 	bl	8000248 <__aeabi_dsub>
 8010a36:	4632      	mov	r2, r6
 8010a38:	463b      	mov	r3, r7
 8010a3a:	f7ef fc07 	bl	800024c <__adddf3>
 8010a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a42:	e86a 0102 	strd	r0, r1, [sl], #-8
 8010a46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a4a:	e9ca 2300 	strd	r2, r3, [sl]
 8010a4e:	e766      	b.n	801091e <__kernel_rem_pio2+0x4da>
 8010a50:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a54:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8010a58:	4642      	mov	r2, r8
 8010a5a:	464b      	mov	r3, r9
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	4639      	mov	r1, r7
 8010a60:	f7ef fbf4 	bl	800024c <__adddf3>
 8010a64:	4602      	mov	r2, r0
 8010a66:	460b      	mov	r3, r1
 8010a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	4639      	mov	r1, r7
 8010a70:	f7ef fbea 	bl	8000248 <__aeabi_dsub>
 8010a74:	4642      	mov	r2, r8
 8010a76:	464b      	mov	r3, r9
 8010a78:	f7ef fbe8 	bl	800024c <__adddf3>
 8010a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a80:	e86a 0102 	strd	r0, r1, [sl], #-8
 8010a84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a88:	e9ca 2300 	strd	r2, r3, [sl]
 8010a8c:	e74c      	b.n	8010928 <__kernel_rem_pio2+0x4e4>
 8010a8e:	4638      	mov	r0, r7
 8010a90:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8010a94:	4631      	mov	r1, r6
 8010a96:	f7ef fbd9 	bl	800024c <__adddf3>
 8010a9a:	3c01      	subs	r4, #1
 8010a9c:	4607      	mov	r7, r0
 8010a9e:	460e      	mov	r6, r1
 8010aa0:	e748      	b.n	8010934 <__kernel_rem_pio2+0x4f0>
 8010aa2:	9b06      	ldr	r3, [sp, #24]
 8010aa4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010aa8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010aac:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8010ab0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8010ab4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8010ab8:	601d      	str	r5, [r3, #0]
 8010aba:	615e      	str	r6, [r3, #20]
 8010abc:	e721      	b.n	8010902 <__kernel_rem_pio2+0x4be>
 8010abe:	bf00      	nop
 8010ac0:	41700000 	.word	0x41700000
 8010ac4:	3e700000 	.word	0x3e700000

08010ac8 <__kernel_sin>:
 8010ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010acc:	b086      	sub	sp, #24
 8010ace:	e9cd 2300 	strd	r2, r3, [sp]
 8010ad2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ad6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010ada:	4682      	mov	sl, r0
 8010adc:	460c      	mov	r4, r1
 8010ade:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010ae0:	da03      	bge.n	8010aea <__kernel_sin+0x22>
 8010ae2:	f7f0 f819 	bl	8000b18 <__aeabi_d2iz>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d050      	beq.n	8010b8c <__kernel_sin+0xc4>
 8010aea:	4652      	mov	r2, sl
 8010aec:	4623      	mov	r3, r4
 8010aee:	4650      	mov	r0, sl
 8010af0:	4621      	mov	r1, r4
 8010af2:	f7ef fd61 	bl	80005b8 <__aeabi_dmul>
 8010af6:	4606      	mov	r6, r0
 8010af8:	460f      	mov	r7, r1
 8010afa:	4602      	mov	r2, r0
 8010afc:	460b      	mov	r3, r1
 8010afe:	4650      	mov	r0, sl
 8010b00:	4621      	mov	r1, r4
 8010b02:	f7ef fd59 	bl	80005b8 <__aeabi_dmul>
 8010b06:	a33e      	add	r3, pc, #248	; (adr r3, 8010c00 <__kernel_sin+0x138>)
 8010b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0c:	4680      	mov	r8, r0
 8010b0e:	4689      	mov	r9, r1
 8010b10:	4630      	mov	r0, r6
 8010b12:	4639      	mov	r1, r7
 8010b14:	f7ef fd50 	bl	80005b8 <__aeabi_dmul>
 8010b18:	a33b      	add	r3, pc, #236	; (adr r3, 8010c08 <__kernel_sin+0x140>)
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	f7ef fb93 	bl	8000248 <__aeabi_dsub>
 8010b22:	4632      	mov	r2, r6
 8010b24:	463b      	mov	r3, r7
 8010b26:	f7ef fd47 	bl	80005b8 <__aeabi_dmul>
 8010b2a:	a339      	add	r3, pc, #228	; (adr r3, 8010c10 <__kernel_sin+0x148>)
 8010b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b30:	f7ef fb8c 	bl	800024c <__adddf3>
 8010b34:	4632      	mov	r2, r6
 8010b36:	463b      	mov	r3, r7
 8010b38:	f7ef fd3e 	bl	80005b8 <__aeabi_dmul>
 8010b3c:	a336      	add	r3, pc, #216	; (adr r3, 8010c18 <__kernel_sin+0x150>)
 8010b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b42:	f7ef fb81 	bl	8000248 <__aeabi_dsub>
 8010b46:	4632      	mov	r2, r6
 8010b48:	463b      	mov	r3, r7
 8010b4a:	f7ef fd35 	bl	80005b8 <__aeabi_dmul>
 8010b4e:	a334      	add	r3, pc, #208	; (adr r3, 8010c20 <__kernel_sin+0x158>)
 8010b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b54:	f7ef fb7a 	bl	800024c <__adddf3>
 8010b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b5c:	b9dd      	cbnz	r5, 8010b96 <__kernel_sin+0xce>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	460b      	mov	r3, r1
 8010b62:	4630      	mov	r0, r6
 8010b64:	4639      	mov	r1, r7
 8010b66:	f7ef fd27 	bl	80005b8 <__aeabi_dmul>
 8010b6a:	a32f      	add	r3, pc, #188	; (adr r3, 8010c28 <__kernel_sin+0x160>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7ef fb6a 	bl	8000248 <__aeabi_dsub>
 8010b74:	4642      	mov	r2, r8
 8010b76:	464b      	mov	r3, r9
 8010b78:	f7ef fd1e 	bl	80005b8 <__aeabi_dmul>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	460b      	mov	r3, r1
 8010b80:	4650      	mov	r0, sl
 8010b82:	4621      	mov	r1, r4
 8010b84:	f7ef fb62 	bl	800024c <__adddf3>
 8010b88:	4682      	mov	sl, r0
 8010b8a:	460c      	mov	r4, r1
 8010b8c:	4650      	mov	r0, sl
 8010b8e:	4621      	mov	r1, r4
 8010b90:	b006      	add	sp, #24
 8010b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b96:	2200      	movs	r2, #0
 8010b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b9c:	4b24      	ldr	r3, [pc, #144]	; (8010c30 <__kernel_sin+0x168>)
 8010b9e:	f7ef fd0b 	bl	80005b8 <__aeabi_dmul>
 8010ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010baa:	4640      	mov	r0, r8
 8010bac:	4649      	mov	r1, r9
 8010bae:	f7ef fd03 	bl	80005b8 <__aeabi_dmul>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bba:	f7ef fb45 	bl	8000248 <__aeabi_dsub>
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	463b      	mov	r3, r7
 8010bc2:	f7ef fcf9 	bl	80005b8 <__aeabi_dmul>
 8010bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bca:	f7ef fb3d 	bl	8000248 <__aeabi_dsub>
 8010bce:	a316      	add	r3, pc, #88	; (adr r3, 8010c28 <__kernel_sin+0x160>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	4606      	mov	r6, r0
 8010bd6:	460f      	mov	r7, r1
 8010bd8:	4640      	mov	r0, r8
 8010bda:	4649      	mov	r1, r9
 8010bdc:	f7ef fcec 	bl	80005b8 <__aeabi_dmul>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	4630      	mov	r0, r6
 8010be6:	4639      	mov	r1, r7
 8010be8:	f7ef fb30 	bl	800024c <__adddf3>
 8010bec:	4602      	mov	r2, r0
 8010bee:	460b      	mov	r3, r1
 8010bf0:	4650      	mov	r0, sl
 8010bf2:	4621      	mov	r1, r4
 8010bf4:	f7ef fb28 	bl	8000248 <__aeabi_dsub>
 8010bf8:	e7c6      	b.n	8010b88 <__kernel_sin+0xc0>
 8010bfa:	bf00      	nop
 8010bfc:	f3af 8000 	nop.w
 8010c00:	5acfd57c 	.word	0x5acfd57c
 8010c04:	3de5d93a 	.word	0x3de5d93a
 8010c08:	8a2b9ceb 	.word	0x8a2b9ceb
 8010c0c:	3e5ae5e6 	.word	0x3e5ae5e6
 8010c10:	57b1fe7d 	.word	0x57b1fe7d
 8010c14:	3ec71de3 	.word	0x3ec71de3
 8010c18:	19c161d5 	.word	0x19c161d5
 8010c1c:	3f2a01a0 	.word	0x3f2a01a0
 8010c20:	1110f8a6 	.word	0x1110f8a6
 8010c24:	3f811111 	.word	0x3f811111
 8010c28:	55555549 	.word	0x55555549
 8010c2c:	3fc55555 	.word	0x3fc55555
 8010c30:	3fe00000 	.word	0x3fe00000

08010c34 <with_errno>:
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	4604      	mov	r4, r0
 8010c38:	460d      	mov	r5, r1
 8010c3a:	4616      	mov	r6, r2
 8010c3c:	f7fb ff6c 	bl	800cb18 <__errno>
 8010c40:	4629      	mov	r1, r5
 8010c42:	6006      	str	r6, [r0, #0]
 8010c44:	4620      	mov	r0, r4
 8010c46:	bd70      	pop	{r4, r5, r6, pc}

08010c48 <xflow>:
 8010c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c4a:	4615      	mov	r5, r2
 8010c4c:	461c      	mov	r4, r3
 8010c4e:	b180      	cbz	r0, 8010c72 <xflow+0x2a>
 8010c50:	4610      	mov	r0, r2
 8010c52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010c56:	e9cd 0100 	strd	r0, r1, [sp]
 8010c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c5e:	4628      	mov	r0, r5
 8010c60:	4621      	mov	r1, r4
 8010c62:	f7ef fca9 	bl	80005b8 <__aeabi_dmul>
 8010c66:	2222      	movs	r2, #34	; 0x22
 8010c68:	b003      	add	sp, #12
 8010c6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c6e:	f7ff bfe1 	b.w	8010c34 <with_errno>
 8010c72:	4610      	mov	r0, r2
 8010c74:	4619      	mov	r1, r3
 8010c76:	e7ee      	b.n	8010c56 <xflow+0xe>

08010c78 <__math_uflow>:
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010c7e:	f7ff bfe3 	b.w	8010c48 <xflow>

08010c82 <__math_oflow>:
 8010c82:	2200      	movs	r2, #0
 8010c84:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010c88:	f7ff bfde 	b.w	8010c48 <xflow>
 8010c8c:	0000      	movs	r0, r0
	...

08010c90 <expm1>:
 8010c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	4ace      	ldr	r2, [pc, #824]	; (8010fd0 <expm1+0x340>)
 8010c96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	460c      	mov	r4, r1
 8010ca0:	460e      	mov	r6, r1
 8010ca2:	d95b      	bls.n	8010d5c <expm1+0xcc>
 8010ca4:	4acb      	ldr	r2, [pc, #812]	; (8010fd4 <expm1+0x344>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d91d      	bls.n	8010ce6 <expm1+0x56>
 8010caa:	4acb      	ldr	r2, [pc, #812]	; (8010fd8 <expm1+0x348>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d90e      	bls.n	8010cce <expm1+0x3e>
 8010cb0:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8010cb4:	4303      	orrs	r3, r0
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	d003      	beq.n	8010cc2 <expm1+0x32>
 8010cba:	460b      	mov	r3, r1
 8010cbc:	f7ef fac6 	bl	800024c <__adddf3>
 8010cc0:	e14d      	b.n	8010f5e <expm1+0x2ce>
 8010cc2:	2900      	cmp	r1, #0
 8010cc4:	f280 814d 	bge.w	8010f62 <expm1+0x2d2>
 8010cc8:	2500      	movs	r5, #0
 8010cca:	4cc4      	ldr	r4, [pc, #784]	; (8010fdc <expm1+0x34c>)
 8010ccc:	e149      	b.n	8010f62 <expm1+0x2d2>
 8010cce:	a3a8      	add	r3, pc, #672	; (adr r3, 8010f70 <expm1+0x2e0>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	f7ef ff00 	bl	8000ad8 <__aeabi_dcmpgt>
 8010cd8:	b128      	cbz	r0, 8010ce6 <expm1+0x56>
 8010cda:	2000      	movs	r0, #0
 8010cdc:	b004      	add	sp, #16
 8010cde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ce2:	f7ff bfce 	b.w	8010c82 <__math_oflow>
 8010ce6:	2e00      	cmp	r6, #0
 8010ce8:	da0c      	bge.n	8010d04 <expm1+0x74>
 8010cea:	a3a3      	add	r3, pc, #652	; (adr r3, 8010f78 <expm1+0x2e8>)
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	4621      	mov	r1, r4
 8010cf4:	f7ef faaa 	bl	800024c <__adddf3>
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f7ef fece 	bl	8000a9c <__aeabi_dcmplt>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d1e1      	bne.n	8010cc8 <expm1+0x38>
 8010d04:	a39e      	add	r3, pc, #632	; (adr r3, 8010f80 <expm1+0x2f0>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	f7ef fc53 	bl	80005b8 <__aeabi_dmul>
 8010d12:	2e00      	cmp	r6, #0
 8010d14:	bfb4      	ite	lt
 8010d16:	4bb2      	ldrlt	r3, [pc, #712]	; (8010fe0 <expm1+0x350>)
 8010d18:	4bb2      	ldrge	r3, [pc, #712]	; (8010fe4 <expm1+0x354>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	f7ef fa96 	bl	800024c <__adddf3>
 8010d20:	f7ef fefa 	bl	8000b18 <__aeabi_d2iz>
 8010d24:	4682      	mov	sl, r0
 8010d26:	f7ef fbdd 	bl	80004e4 <__aeabi_i2d>
 8010d2a:	a397      	add	r3, pc, #604	; (adr r3, 8010f88 <expm1+0x2f8>)
 8010d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d30:	4680      	mov	r8, r0
 8010d32:	4689      	mov	r9, r1
 8010d34:	f7ef fc40 	bl	80005b8 <__aeabi_dmul>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	4621      	mov	r1, r4
 8010d40:	f7ef fa82 	bl	8000248 <__aeabi_dsub>
 8010d44:	a392      	add	r3, pc, #584	; (adr r3, 8010f90 <expm1+0x300>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460f      	mov	r7, r1
 8010d4e:	4640      	mov	r0, r8
 8010d50:	4649      	mov	r1, r9
 8010d52:	f7ef fc31 	bl	80005b8 <__aeabi_dmul>
 8010d56:	4680      	mov	r8, r0
 8010d58:	4689      	mov	r9, r1
 8010d5a:	e016      	b.n	8010d8a <expm1+0xfa>
 8010d5c:	4aa2      	ldr	r2, [pc, #648]	; (8010fe8 <expm1+0x358>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	f240 80a9 	bls.w	8010eb6 <expm1+0x226>
 8010d64:	4aa1      	ldr	r2, [pc, #644]	; (8010fec <expm1+0x35c>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d8cc      	bhi.n	8010d04 <expm1+0x74>
 8010d6a:	a387      	add	r3, pc, #540	; (adr r3, 8010f88 <expm1+0x2f8>)
 8010d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d70:	2900      	cmp	r1, #0
 8010d72:	f2c0 8095 	blt.w	8010ea0 <expm1+0x210>
 8010d76:	f20f 2918 	addw	r9, pc, #536	; 0x218
 8010d7a:	e9d9 8900 	ldrd	r8, r9, [r9]
 8010d7e:	f7ef fa63 	bl	8000248 <__aeabi_dsub>
 8010d82:	f04f 0a01 	mov.w	sl, #1
 8010d86:	4606      	mov	r6, r0
 8010d88:	460f      	mov	r7, r1
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	464b      	mov	r3, r9
 8010d8e:	4630      	mov	r0, r6
 8010d90:	4639      	mov	r1, r7
 8010d92:	f7ef fa59 	bl	8000248 <__aeabi_dsub>
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	4605      	mov	r5, r0
 8010d9c:	460c      	mov	r4, r1
 8010d9e:	4630      	mov	r0, r6
 8010da0:	4639      	mov	r1, r7
 8010da2:	f7ef fa51 	bl	8000248 <__aeabi_dsub>
 8010da6:	4642      	mov	r2, r8
 8010da8:	464b      	mov	r3, r9
 8010daa:	f7ef fa4d 	bl	8000248 <__aeabi_dsub>
 8010dae:	e9cd 0100 	strd	r0, r1, [sp]
 8010db2:	2200      	movs	r2, #0
 8010db4:	4b8b      	ldr	r3, [pc, #556]	; (8010fe4 <expm1+0x354>)
 8010db6:	4628      	mov	r0, r5
 8010db8:	4621      	mov	r1, r4
 8010dba:	f7ef fbfd 	bl	80005b8 <__aeabi_dmul>
 8010dbe:	4606      	mov	r6, r0
 8010dc0:	460f      	mov	r7, r1
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	4621      	mov	r1, r4
 8010dca:	f7ef fbf5 	bl	80005b8 <__aeabi_dmul>
 8010dce:	a372      	add	r3, pc, #456	; (adr r3, 8010f98 <expm1+0x308>)
 8010dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd4:	4680      	mov	r8, r0
 8010dd6:	4689      	mov	r9, r1
 8010dd8:	f7ef fbee 	bl	80005b8 <__aeabi_dmul>
 8010ddc:	a370      	add	r3, pc, #448	; (adr r3, 8010fa0 <expm1+0x310>)
 8010dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de2:	f7ef fa33 	bl	800024c <__adddf3>
 8010de6:	4642      	mov	r2, r8
 8010de8:	464b      	mov	r3, r9
 8010dea:	f7ef fbe5 	bl	80005b8 <__aeabi_dmul>
 8010dee:	a36e      	add	r3, pc, #440	; (adr r3, 8010fa8 <expm1+0x318>)
 8010df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df4:	f7ef fa28 	bl	8000248 <__aeabi_dsub>
 8010df8:	4642      	mov	r2, r8
 8010dfa:	464b      	mov	r3, r9
 8010dfc:	f7ef fbdc 	bl	80005b8 <__aeabi_dmul>
 8010e00:	a36b      	add	r3, pc, #428	; (adr r3, 8010fb0 <expm1+0x320>)
 8010e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e06:	f7ef fa21 	bl	800024c <__adddf3>
 8010e0a:	4642      	mov	r2, r8
 8010e0c:	464b      	mov	r3, r9
 8010e0e:	f7ef fbd3 	bl	80005b8 <__aeabi_dmul>
 8010e12:	a369      	add	r3, pc, #420	; (adr r3, 8010fb8 <expm1+0x328>)
 8010e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e18:	f7ef fa16 	bl	8000248 <__aeabi_dsub>
 8010e1c:	4642      	mov	r2, r8
 8010e1e:	464b      	mov	r3, r9
 8010e20:	f7ef fbca 	bl	80005b8 <__aeabi_dmul>
 8010e24:	2200      	movs	r2, #0
 8010e26:	4b72      	ldr	r3, [pc, #456]	; (8010ff0 <expm1+0x360>)
 8010e28:	f7ef fa10 	bl	800024c <__adddf3>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	460b      	mov	r3, r1
 8010e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e34:	4630      	mov	r0, r6
 8010e36:	4639      	mov	r1, r7
 8010e38:	f7ef fbbe 	bl	80005b8 <__aeabi_dmul>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	2000      	movs	r0, #0
 8010e42:	496c      	ldr	r1, [pc, #432]	; (8010ff4 <expm1+0x364>)
 8010e44:	f7ef fa00 	bl	8000248 <__aeabi_dsub>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	460b      	mov	r3, r1
 8010e4c:	4606      	mov	r6, r0
 8010e4e:	460f      	mov	r7, r1
 8010e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e54:	f7ef f9f8 	bl	8000248 <__aeabi_dsub>
 8010e58:	4632      	mov	r2, r6
 8010e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e5e:	463b      	mov	r3, r7
 8010e60:	4628      	mov	r0, r5
 8010e62:	4621      	mov	r1, r4
 8010e64:	f7ef fba8 	bl	80005b8 <__aeabi_dmul>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	4962      	ldr	r1, [pc, #392]	; (8010ff8 <expm1+0x368>)
 8010e70:	f7ef f9ea 	bl	8000248 <__aeabi_dsub>
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e7c:	f7ef fcc6 	bl	800080c <__aeabi_ddiv>
 8010e80:	4642      	mov	r2, r8
 8010e82:	464b      	mov	r3, r9
 8010e84:	f7ef fb98 	bl	80005b8 <__aeabi_dmul>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	f1ba 0f00 	cmp.w	sl, #0
 8010e90:	d127      	bne.n	8010ee2 <expm1+0x252>
 8010e92:	4628      	mov	r0, r5
 8010e94:	4621      	mov	r1, r4
 8010e96:	f7ef fb8f 	bl	80005b8 <__aeabi_dmul>
 8010e9a:	4642      	mov	r2, r8
 8010e9c:	464b      	mov	r3, r9
 8010e9e:	e014      	b.n	8010eca <expm1+0x23a>
 8010ea0:	f7ef f9d4 	bl	800024c <__adddf3>
 8010ea4:	f20f 1918 	addw	r9, pc, #280	; 0x118
 8010ea8:	e9d9 8900 	ldrd	r8, r9, [r9]
 8010eac:	4606      	mov	r6, r0
 8010eae:	460f      	mov	r7, r1
 8010eb0:	f04f 3aff 	mov.w	sl, #4294967295
 8010eb4:	e769      	b.n	8010d8a <expm1+0xfa>
 8010eb6:	4a51      	ldr	r2, [pc, #324]	; (8010ffc <expm1+0x36c>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d80f      	bhi.n	8010edc <expm1+0x24c>
 8010ebc:	a342      	add	r3, pc, #264	; (adr r3, 8010fc8 <expm1+0x338>)
 8010ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec2:	f7ef f9c3 	bl	800024c <__adddf3>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	f7ef f9bd 	bl	8000248 <__aeabi_dsub>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	4621      	mov	r1, r4
 8010ed6:	f7ef f9b7 	bl	8000248 <__aeabi_dsub>
 8010eda:	e040      	b.n	8010f5e <expm1+0x2ce>
 8010edc:	f04f 0a00 	mov.w	sl, #0
 8010ee0:	e767      	b.n	8010db2 <expm1+0x122>
 8010ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ee6:	f7ef f9af 	bl	8000248 <__aeabi_dsub>
 8010eea:	462a      	mov	r2, r5
 8010eec:	4623      	mov	r3, r4
 8010eee:	f7ef fb63 	bl	80005b8 <__aeabi_dmul>
 8010ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ef6:	f7ef f9a7 	bl	8000248 <__aeabi_dsub>
 8010efa:	4642      	mov	r2, r8
 8010efc:	464b      	mov	r3, r9
 8010efe:	f7ef f9a3 	bl	8000248 <__aeabi_dsub>
 8010f02:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010f06:	4606      	mov	r6, r0
 8010f08:	460f      	mov	r7, r1
 8010f0a:	d10c      	bne.n	8010f26 <expm1+0x296>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	4628      	mov	r0, r5
 8010f12:	4621      	mov	r1, r4
 8010f14:	f7ef f998 	bl	8000248 <__aeabi_dsub>
 8010f18:	2200      	movs	r2, #0
 8010f1a:	4b32      	ldr	r3, [pc, #200]	; (8010fe4 <expm1+0x354>)
 8010f1c:	f7ef fb4c 	bl	80005b8 <__aeabi_dmul>
 8010f20:	2200      	movs	r2, #0
 8010f22:	4b30      	ldr	r3, [pc, #192]	; (8010fe4 <expm1+0x354>)
 8010f24:	e7d7      	b.n	8010ed6 <expm1+0x246>
 8010f26:	f1ba 0f01 	cmp.w	sl, #1
 8010f2a:	d178      	bne.n	801101e <expm1+0x38e>
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4628      	mov	r0, r5
 8010f30:	4621      	mov	r1, r4
 8010f32:	4b33      	ldr	r3, [pc, #204]	; (8011000 <expm1+0x370>)
 8010f34:	f7ef fdb2 	bl	8000a9c <__aeabi_dcmplt>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d063      	beq.n	8011004 <expm1+0x374>
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	4b29      	ldr	r3, [pc, #164]	; (8010fe4 <expm1+0x354>)
 8010f40:	4628      	mov	r0, r5
 8010f42:	4621      	mov	r1, r4
 8010f44:	f7ef f982 	bl	800024c <__adddf3>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	4639      	mov	r1, r7
 8010f50:	f7ef f97a 	bl	8000248 <__aeabi_dsub>
 8010f54:	2200      	movs	r2, #0
 8010f56:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8010f5a:	f7ef fb2d 	bl	80005b8 <__aeabi_dmul>
 8010f5e:	4605      	mov	r5, r0
 8010f60:	460c      	mov	r4, r1
 8010f62:	4628      	mov	r0, r5
 8010f64:	4621      	mov	r1, r4
 8010f66:	b004      	add	sp, #16
 8010f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f6c:	f3af 8000 	nop.w
 8010f70:	fefa39ef 	.word	0xfefa39ef
 8010f74:	40862e42 	.word	0x40862e42
 8010f78:	c2f8f359 	.word	0xc2f8f359
 8010f7c:	01a56e1f 	.word	0x01a56e1f
 8010f80:	652b82fe 	.word	0x652b82fe
 8010f84:	3ff71547 	.word	0x3ff71547
 8010f88:	fee00000 	.word	0xfee00000
 8010f8c:	3fe62e42 	.word	0x3fe62e42
 8010f90:	35793c76 	.word	0x35793c76
 8010f94:	3dea39ef 	.word	0x3dea39ef
 8010f98:	6e09c32d 	.word	0x6e09c32d
 8010f9c:	be8afdb7 	.word	0xbe8afdb7
 8010fa0:	86e65239 	.word	0x86e65239
 8010fa4:	3ed0cfca 	.word	0x3ed0cfca
 8010fa8:	9eaadbb7 	.word	0x9eaadbb7
 8010fac:	3f14ce19 	.word	0x3f14ce19
 8010fb0:	19fe5585 	.word	0x19fe5585
 8010fb4:	3f5a01a0 	.word	0x3f5a01a0
 8010fb8:	111110f4 	.word	0x111110f4
 8010fbc:	3fa11111 	.word	0x3fa11111
 8010fc0:	35793c76 	.word	0x35793c76
 8010fc4:	bdea39ef 	.word	0xbdea39ef
 8010fc8:	8800759c 	.word	0x8800759c
 8010fcc:	7e37e43c 	.word	0x7e37e43c
 8010fd0:	40436879 	.word	0x40436879
 8010fd4:	40862e41 	.word	0x40862e41
 8010fd8:	7fefffff 	.word	0x7fefffff
 8010fdc:	bff00000 	.word	0xbff00000
 8010fe0:	bfe00000 	.word	0xbfe00000
 8010fe4:	3fe00000 	.word	0x3fe00000
 8010fe8:	3fd62e42 	.word	0x3fd62e42
 8010fec:	3ff0a2b1 	.word	0x3ff0a2b1
 8010ff0:	3ff00000 	.word	0x3ff00000
 8010ff4:	40080000 	.word	0x40080000
 8010ff8:	40180000 	.word	0x40180000
 8010ffc:	3c8fffff 	.word	0x3c8fffff
 8011000:	bfd00000 	.word	0xbfd00000
 8011004:	4632      	mov	r2, r6
 8011006:	463b      	mov	r3, r7
 8011008:	4628      	mov	r0, r5
 801100a:	4621      	mov	r1, r4
 801100c:	f7ef f91c 	bl	8000248 <__aeabi_dsub>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	f7ef f91a 	bl	800024c <__adddf3>
 8011018:	2200      	movs	r2, #0
 801101a:	4b22      	ldr	r3, [pc, #136]	; (80110a4 <expm1+0x414>)
 801101c:	e64e      	b.n	8010cbc <expm1+0x2c>
 801101e:	f10a 0301 	add.w	r3, sl, #1
 8011022:	2b39      	cmp	r3, #57	; 0x39
 8011024:	ea4f 560a 	mov.w	r6, sl, lsl #20
 8011028:	d90d      	bls.n	8011046 <expm1+0x3b6>
 801102a:	462a      	mov	r2, r5
 801102c:	4623      	mov	r3, r4
 801102e:	f7ef f90b 	bl	8000248 <__aeabi_dsub>
 8011032:	4602      	mov	r2, r0
 8011034:	460b      	mov	r3, r1
 8011036:	2000      	movs	r0, #0
 8011038:	491a      	ldr	r1, [pc, #104]	; (80110a4 <expm1+0x414>)
 801103a:	f7ef f905 	bl	8000248 <__aeabi_dsub>
 801103e:	2200      	movs	r2, #0
 8011040:	4b18      	ldr	r3, [pc, #96]	; (80110a4 <expm1+0x414>)
 8011042:	1871      	adds	r1, r6, r1
 8011044:	e747      	b.n	8010ed6 <expm1+0x246>
 8011046:	f1ba 0f13 	cmp.w	sl, #19
 801104a:	dc17      	bgt.n	801107c <expm1+0x3ec>
 801104c:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8011050:	462a      	mov	r2, r5
 8011052:	4623      	mov	r3, r4
 8011054:	f7ef f8f8 	bl	8000248 <__aeabi_dsub>
 8011058:	f04f 0800 	mov.w	r8, #0
 801105c:	fa47 fa0a 	asr.w	sl, r7, sl
 8011060:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 8011064:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 8011068:	4602      	mov	r2, r0
 801106a:	460b      	mov	r3, r1
 801106c:	4640      	mov	r0, r8
 801106e:	4649      	mov	r1, r9
 8011070:	f7ef f8ea 	bl	8000248 <__aeabi_dsub>
 8011074:	1873      	adds	r3, r6, r1
 8011076:	4605      	mov	r5, r0
 8011078:	461c      	mov	r4, r3
 801107a:	e772      	b.n	8010f62 <expm1+0x2d2>
 801107c:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 8011080:	f10a 0a03 	add.w	sl, sl, #3
 8011084:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8011088:	2200      	movs	r2, #0
 801108a:	f7ef f8df 	bl	800024c <__adddf3>
 801108e:	4602      	mov	r2, r0
 8011090:	460b      	mov	r3, r1
 8011092:	4628      	mov	r0, r5
 8011094:	4621      	mov	r1, r4
 8011096:	f7ef f8d7 	bl	8000248 <__aeabi_dsub>
 801109a:	2200      	movs	r2, #0
 801109c:	4b01      	ldr	r3, [pc, #4]	; (80110a4 <expm1+0x414>)
 801109e:	f7ef f8d5 	bl	800024c <__adddf3>
 80110a2:	e7e7      	b.n	8011074 <expm1+0x3e4>
 80110a4:	3ff00000 	.word	0x3ff00000

080110a8 <fabs>:
 80110a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80110ac:	4770      	bx	lr

080110ae <finite>:
 80110ae:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80110b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80110b6:	0fc0      	lsrs	r0, r0, #31
 80110b8:	4770      	bx	lr
 80110ba:	0000      	movs	r0, r0
 80110bc:	0000      	movs	r0, r0
	...

080110c0 <floor>:
 80110c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80110c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80110cc:	2e13      	cmp	r6, #19
 80110ce:	4602      	mov	r2, r0
 80110d0:	460b      	mov	r3, r1
 80110d2:	4607      	mov	r7, r0
 80110d4:	460c      	mov	r4, r1
 80110d6:	4605      	mov	r5, r0
 80110d8:	dc33      	bgt.n	8011142 <floor+0x82>
 80110da:	2e00      	cmp	r6, #0
 80110dc:	da14      	bge.n	8011108 <floor+0x48>
 80110de:	a334      	add	r3, pc, #208	; (adr r3, 80111b0 <floor+0xf0>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	f7ef f8b2 	bl	800024c <__adddf3>
 80110e8:	2200      	movs	r2, #0
 80110ea:	2300      	movs	r3, #0
 80110ec:	f7ef fcf4 	bl	8000ad8 <__aeabi_dcmpgt>
 80110f0:	b138      	cbz	r0, 8011102 <floor+0x42>
 80110f2:	2c00      	cmp	r4, #0
 80110f4:	da58      	bge.n	80111a8 <floor+0xe8>
 80110f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80110fa:	431d      	orrs	r5, r3
 80110fc:	d001      	beq.n	8011102 <floor+0x42>
 80110fe:	2500      	movs	r5, #0
 8011100:	4c2d      	ldr	r4, [pc, #180]	; (80111b8 <floor+0xf8>)
 8011102:	4623      	mov	r3, r4
 8011104:	462f      	mov	r7, r5
 8011106:	e025      	b.n	8011154 <floor+0x94>
 8011108:	4a2c      	ldr	r2, [pc, #176]	; (80111bc <floor+0xfc>)
 801110a:	fa42 f806 	asr.w	r8, r2, r6
 801110e:	ea01 0208 	and.w	r2, r1, r8
 8011112:	4302      	orrs	r2, r0
 8011114:	d01e      	beq.n	8011154 <floor+0x94>
 8011116:	a326      	add	r3, pc, #152	; (adr r3, 80111b0 <floor+0xf0>)
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	f7ef f896 	bl	800024c <__adddf3>
 8011120:	2200      	movs	r2, #0
 8011122:	2300      	movs	r3, #0
 8011124:	f7ef fcd8 	bl	8000ad8 <__aeabi_dcmpgt>
 8011128:	2800      	cmp	r0, #0
 801112a:	d0ea      	beq.n	8011102 <floor+0x42>
 801112c:	2c00      	cmp	r4, #0
 801112e:	bfbe      	ittt	lt
 8011130:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011134:	fa43 f606 	asrlt.w	r6, r3, r6
 8011138:	19a4      	addlt	r4, r4, r6
 801113a:	2500      	movs	r5, #0
 801113c:	ea24 0408 	bic.w	r4, r4, r8
 8011140:	e7df      	b.n	8011102 <floor+0x42>
 8011142:	2e33      	cmp	r6, #51	; 0x33
 8011144:	dd0a      	ble.n	801115c <floor+0x9c>
 8011146:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801114a:	d103      	bne.n	8011154 <floor+0x94>
 801114c:	f7ef f87e 	bl	800024c <__adddf3>
 8011150:	4607      	mov	r7, r0
 8011152:	460b      	mov	r3, r1
 8011154:	4638      	mov	r0, r7
 8011156:	4619      	mov	r1, r3
 8011158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115c:	f04f 32ff 	mov.w	r2, #4294967295
 8011160:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011164:	fa22 f808 	lsr.w	r8, r2, r8
 8011168:	ea18 0f00 	tst.w	r8, r0
 801116c:	d0f2      	beq.n	8011154 <floor+0x94>
 801116e:	a310      	add	r3, pc, #64	; (adr r3, 80111b0 <floor+0xf0>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	f7ef f86a 	bl	800024c <__adddf3>
 8011178:	2200      	movs	r2, #0
 801117a:	2300      	movs	r3, #0
 801117c:	f7ef fcac 	bl	8000ad8 <__aeabi_dcmpgt>
 8011180:	2800      	cmp	r0, #0
 8011182:	d0be      	beq.n	8011102 <floor+0x42>
 8011184:	2c00      	cmp	r4, #0
 8011186:	da02      	bge.n	801118e <floor+0xce>
 8011188:	2e14      	cmp	r6, #20
 801118a:	d103      	bne.n	8011194 <floor+0xd4>
 801118c:	3401      	adds	r4, #1
 801118e:	ea25 0508 	bic.w	r5, r5, r8
 8011192:	e7b6      	b.n	8011102 <floor+0x42>
 8011194:	2301      	movs	r3, #1
 8011196:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801119a:	fa03 f606 	lsl.w	r6, r3, r6
 801119e:	4435      	add	r5, r6
 80111a0:	42bd      	cmp	r5, r7
 80111a2:	bf38      	it	cc
 80111a4:	18e4      	addcc	r4, r4, r3
 80111a6:	e7f2      	b.n	801118e <floor+0xce>
 80111a8:	2500      	movs	r5, #0
 80111aa:	462c      	mov	r4, r5
 80111ac:	e7a9      	b.n	8011102 <floor+0x42>
 80111ae:	bf00      	nop
 80111b0:	8800759c 	.word	0x8800759c
 80111b4:	7e37e43c 	.word	0x7e37e43c
 80111b8:	bff00000 	.word	0xbff00000
 80111bc:	000fffff 	.word	0x000fffff

080111c0 <scalbn>:
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80111c6:	4604      	mov	r4, r0
 80111c8:	460d      	mov	r5, r1
 80111ca:	4617      	mov	r7, r2
 80111cc:	460b      	mov	r3, r1
 80111ce:	b996      	cbnz	r6, 80111f6 <scalbn+0x36>
 80111d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111d4:	4303      	orrs	r3, r0
 80111d6:	d039      	beq.n	801124c <scalbn+0x8c>
 80111d8:	4b33      	ldr	r3, [pc, #204]	; (80112a8 <scalbn+0xe8>)
 80111da:	2200      	movs	r2, #0
 80111dc:	f7ef f9ec 	bl	80005b8 <__aeabi_dmul>
 80111e0:	4b32      	ldr	r3, [pc, #200]	; (80112ac <scalbn+0xec>)
 80111e2:	4604      	mov	r4, r0
 80111e4:	429f      	cmp	r7, r3
 80111e6:	460d      	mov	r5, r1
 80111e8:	da0f      	bge.n	801120a <scalbn+0x4a>
 80111ea:	a32b      	add	r3, pc, #172	; (adr r3, 8011298 <scalbn+0xd8>)
 80111ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f0:	f7ef f9e2 	bl	80005b8 <__aeabi_dmul>
 80111f4:	e006      	b.n	8011204 <scalbn+0x44>
 80111f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80111fa:	4296      	cmp	r6, r2
 80111fc:	d10a      	bne.n	8011214 <scalbn+0x54>
 80111fe:	4602      	mov	r2, r0
 8011200:	f7ef f824 	bl	800024c <__adddf3>
 8011204:	4604      	mov	r4, r0
 8011206:	460d      	mov	r5, r1
 8011208:	e020      	b.n	801124c <scalbn+0x8c>
 801120a:	460b      	mov	r3, r1
 801120c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011210:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8011214:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011218:	19b9      	adds	r1, r7, r6
 801121a:	4291      	cmp	r1, r2
 801121c:	dd0e      	ble.n	801123c <scalbn+0x7c>
 801121e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011222:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011226:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801122a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801122e:	4820      	ldr	r0, [pc, #128]	; (80112b0 <scalbn+0xf0>)
 8011230:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011234:	a31a      	add	r3, pc, #104	; (adr r3, 80112a0 <scalbn+0xe0>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	e7d9      	b.n	80111f0 <scalbn+0x30>
 801123c:	2900      	cmp	r1, #0
 801123e:	dd08      	ble.n	8011252 <scalbn+0x92>
 8011240:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011244:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011248:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011252:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8011256:	da12      	bge.n	801127e <scalbn+0xbe>
 8011258:	f24c 3350 	movw	r3, #50000	; 0xc350
 801125c:	429f      	cmp	r7, r3
 801125e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8011262:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8011266:	dcdc      	bgt.n	8011222 <scalbn+0x62>
 8011268:	a30b      	add	r3, pc, #44	; (adr r3, 8011298 <scalbn+0xd8>)
 801126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8011272:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8011276:	480f      	ldr	r0, [pc, #60]	; (80112b4 <scalbn+0xf4>)
 8011278:	f041 011f 	orr.w	r1, r1, #31
 801127c:	e7b8      	b.n	80111f0 <scalbn+0x30>
 801127e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011282:	3136      	adds	r1, #54	; 0x36
 8011284:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011288:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	2200      	movs	r2, #0
 8011292:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <scalbn+0xf8>)
 8011294:	e7ac      	b.n	80111f0 <scalbn+0x30>
 8011296:	bf00      	nop
 8011298:	c2f8f359 	.word	0xc2f8f359
 801129c:	01a56e1f 	.word	0x01a56e1f
 80112a0:	8800759c 	.word	0x8800759c
 80112a4:	7e37e43c 	.word	0x7e37e43c
 80112a8:	43500000 	.word	0x43500000
 80112ac:	ffff3cb0 	.word	0xffff3cb0
 80112b0:	8800759c 	.word	0x8800759c
 80112b4:	c2f8f359 	.word	0xc2f8f359
 80112b8:	3c900000 	.word	0x3c900000

080112bc <_init>:
 80112bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112be:	bf00      	nop
 80112c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112c2:	bc08      	pop	{r3}
 80112c4:	469e      	mov	lr, r3
 80112c6:	4770      	bx	lr

080112c8 <_fini>:
 80112c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ca:	bf00      	nop
 80112cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ce:	bc08      	pop	{r3}
 80112d0:	469e      	mov	lr, r3
 80112d2:	4770      	bx	lr
